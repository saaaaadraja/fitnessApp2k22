{"ast":null,"code":"/**\n * To import utils.\n */\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * @private\n */\n\nvar CanvasRenderer =\n/** @class */\nfunction () {\n  /* End-Properties */\n  function CanvasRenderer(rootID) {\n    this.rootId = rootID;\n  } // method to get the attributes value\n\n  /* tslint:disable */\n\n\n  CanvasRenderer.prototype.getOptionValue = function (options, key) {\n    return options[key];\n  };\n  /* tslint:enable */\n\n  /**\n   * To create a Html5 canvas element\n   * @param {BaseAttibutes} options - Options to create canvas\n   * @return {HTMLCanvasElement}\n   */\n\n\n  CanvasRenderer.prototype.createCanvas = function (options) {\n    var canvasObj = document.createElement('canvas');\n    canvasObj.setAttribute('id', this.rootId + '_canvas');\n    this.ctx = canvasObj.getContext('2d');\n    this.canvasObj = canvasObj;\n    this.setCanvasSize(options.width, options.height);\n    return this.canvasObj;\n  };\n  /**\n   * To set the width and height for the Html5 canvas element\n   * @param {number} width - width of the canvas\n   * @param {number} height - height of the canvas\n   * @return {void}\n   */\n\n\n  CanvasRenderer.prototype.setCanvasSize = function (width, height) {\n    var element = document.getElementById(this.rootId);\n    var size = !isNullOrUndefined(element) ? element.getBoundingClientRect() : null;\n\n    if (isNullOrUndefined(this.width)) {\n      this.canvasObj.setAttribute('width', width ? width.toString() : size.width.toString());\n    } else {\n      this.canvasObj.setAttribute('width', this.width.toString());\n    }\n\n    if (isNullOrUndefined(this.height)) {\n      this.canvasObj.setAttribute('height', height ? height.toString() : '450');\n    } else {\n      this.canvasObj.setAttribute('height', this.height.toString());\n    }\n  }; // To set the values to the attributes\n\n\n  CanvasRenderer.prototype.setAttributes = function (options) {\n    this.ctx.lineWidth = this.getOptionValue(options, 'stroke-width');\n    var dashArray = this.getOptionValue(options, 'stroke-dasharray');\n\n    if (!isNullOrUndefined(dashArray)) {\n      var dashArrayString = dashArray.split(',');\n      this.ctx.setLineDash([parseInt(dashArrayString[0], 10), parseInt(dashArrayString[1], 10)]);\n    }\n\n    this.ctx.strokeStyle = this.getOptionValue(options, 'stroke');\n  };\n  /**\n   * To draw a line\n   * @param {LineAttributes} options - required options to draw a line on the canvas\n   * @return {void}\n   */\n\n\n  CanvasRenderer.prototype.drawLine = function (options) {\n    this.ctx.save();\n    this.ctx.beginPath();\n    this.ctx.lineWidth = this.getOptionValue(options, 'stroke-width');\n    this.ctx.strokeStyle = options.stroke;\n    this.ctx.moveTo(options.x1, options.y1);\n    this.ctx.lineTo(options.x2, options.y2);\n    this.ctx.stroke();\n    this.ctx.restore();\n  };\n  /**\n   * To draw a rectangle\n   * @param {RectAttributes} options - required options to draw a rectangle on the canvas\n   * @return {void}\n   */\n\n\n  CanvasRenderer.prototype.drawRectangle = function (options, canvasTranslate) {\n    var canvasCtx = this.ctx;\n    var cornerRadius = options.rx;\n    this.ctx.save();\n    this.ctx.beginPath();\n\n    if (canvasTranslate) {\n      this.ctx.translate(canvasTranslate[0], canvasTranslate[1]);\n    }\n\n    this.ctx.globalAlpha = this.getOptionValue(options, 'opacity');\n    this.setAttributes(options);\n    this.ctx.rect(options.x, options.y, options.width, options.height);\n\n    if (cornerRadius !== null && cornerRadius >= 0) {\n      this.drawCornerRadius(options);\n    } else {\n      if (options.fill === 'none') {\n        options.fill = 'transparent';\n      }\n\n      this.ctx.fillStyle = options.fill;\n      this.ctx.fillRect(options.x, options.y, options.width, options.height);\n      this.ctx.stroke();\n    }\n\n    this.ctx.restore();\n    this.ctx = canvasCtx;\n    return this.canvasObj;\n  }; // To draw the corner of a rectangle\n\n\n  CanvasRenderer.prototype.drawCornerRadius = function (options) {\n    var cornerRadius = options.rx;\n    var x = options.x;\n    var y = options.y;\n    var width = options.width;\n    var height = options.height;\n\n    if (options.fill === 'none') {\n      options.fill = 'transparent';\n    }\n\n    this.ctx.fillStyle = options.fill;\n\n    if (width < 2 * cornerRadius) {\n      cornerRadius = width / 2;\n    }\n\n    if (height < 2 * cornerRadius) {\n      cornerRadius = height / 2;\n    }\n\n    this.ctx.beginPath();\n    this.ctx.moveTo(x + width - cornerRadius, y);\n    this.ctx.arcTo(x + width, y, x + width, y + height, cornerRadius);\n    this.ctx.arcTo(x + width, y + height, x, y + height, cornerRadius);\n    this.ctx.arcTo(x, y + height, x, y, cornerRadius);\n    this.ctx.arcTo(x, y, x + width, y, cornerRadius);\n    this.ctx.closePath();\n    this.ctx.fill();\n    this.ctx.stroke();\n  };\n  /**\n   * To draw a path on the canvas\n   * @param {PathAttributes} options - options needed to draw path\n   * @param {Int32Array} canvasTranslate - Array of numbers to translate the canvas\n   * @return {void}\n   */\n\n\n  CanvasRenderer.prototype.drawPath = function (options, canvasTranslate) {\n    var path = options.d;\n    var dataSplit = path.split(' ');\n    var borderWidth = this.getOptionValue(options, 'stroke-width');\n    var canvasCtx = this.ctx;\n    var flag = true;\n    this.ctx.save();\n    this.ctx.beginPath();\n\n    if (canvasTranslate) {\n      this.ctx.translate(canvasTranslate[0], canvasTranslate[1]);\n    }\n\n    this.ctx.globalAlpha = options.opacity ? options.opacity : this.getOptionValue(options, 'fill-opacity');\n    this.setAttributes(options);\n\n    for (var i = 0; i < dataSplit.length; i = i + 3) {\n      var x1 = parseFloat(dataSplit[i + 1]);\n      var y1 = parseFloat(dataSplit[i + 2]);\n\n      switch (dataSplit[i]) {\n        case 'M':\n          if (!options.innerR && !options.cx) {\n            this.ctx.moveTo(x1, y1);\n          }\n\n          break;\n\n        case 'L':\n          if (!options.innerR) {\n            this.ctx.lineTo(x1, y1);\n          }\n\n          break;\n\n        case 'Q':\n          var q1 = parseFloat(dataSplit[i + 3]);\n          var q2 = parseFloat(dataSplit[i + 4]);\n          this.ctx.quadraticCurveTo(x1, y1, q1, q2);\n          i = i + 2;\n          break;\n\n        case 'C':\n          var c1 = parseFloat(dataSplit[i + 3]);\n          var c2 = parseFloat(dataSplit[i + 4]);\n          var c3 = parseFloat(dataSplit[i + 5]);\n          var c4 = parseFloat(dataSplit[i + 6]);\n          this.ctx.bezierCurveTo(x1, y1, c1, c2, c3, c4);\n          i = i + 4;\n          break;\n\n        case 'A':\n          if (!options.innerR) {\n            if (options.cx) {\n              this.ctx.arc(options.cx, options.cy, options.radius, 0, 2 * Math.PI, options.counterClockWise);\n            } else {\n              this.ctx.moveTo(options.x, options.y);\n              this.ctx.arc(options.x, options.y, options.radius, options.start, options.end, options.counterClockWise);\n              this.ctx.lineTo(options.x, options.y);\n            }\n          } else if (flag) {\n            this.ctx.arc(options.x, options.y, options.radius, options.start, options.end, options.counterClockWise);\n            this.ctx.arc(options.x, options.y, options.innerR, options.end, options.start, !options.counterClockWise);\n            flag = false;\n          }\n\n          i = i + 5;\n          break;\n\n        case 'z':\n        case 'Z':\n          this.ctx.closePath(); //since for loop is incremented by 3, to get next value after 'z' i is decremented for 2.\n\n          i = i - 2;\n          break;\n      }\n    }\n\n    if (options.fill !== 'none' && options.fill !== undefined) {\n      this.ctx.fillStyle = options.fill;\n      this.ctx.fill();\n    }\n\n    if (borderWidth > 0) {\n      this.ctx.stroke();\n    }\n\n    this.ctx.restore();\n    this.ctx = canvasCtx;\n    return this.canvasObj;\n  };\n  /**\n   * To draw a text\n   * @param {TextAttributes} options - options required to draw text\n   * @param {string} label - Specifies the text which has to be drawn on the canvas\n   * @return {void}\n   */\n\n\n  CanvasRenderer.prototype.createText = function (options, label, transX, transY, dy, isTSpan) {\n    var fontWeight = this.getOptionValue(options, 'font-weight');\n\n    if (!isNullOrUndefined(fontWeight) && fontWeight.toLowerCase() === 'regular') {\n      fontWeight = 'normal';\n    }\n\n    var fontSize = this.getOptionValue(options, 'font-size');\n    var fontFamily = this.getOptionValue(options, 'font-family');\n    var fontStyle = this.getOptionValue(options, 'font-style').toLowerCase();\n    var font = fontStyle + ' ' + fontWeight + ' ' + fontSize + ' ' + fontFamily;\n    var anchor = this.getOptionValue(options, 'text-anchor');\n    var opacity = options.opacity !== undefined ? options.opacity : 1;\n    var rotation = isNullOrUndefined(options.labelRotation) ? 0 : options.labelRotation;\n\n    if (anchor === 'middle') {\n      anchor = 'center';\n    }\n\n    this.ctx.save();\n    this.ctx.fillStyle = options.fill;\n    this.ctx.font = font;\n    this.ctx.textAlign = anchor;\n    this.ctx.globalAlpha = opacity;\n\n    if (options.baseline) {\n      this.ctx.textBaseline = options.baseline;\n    }\n\n    if (!isTSpan) {\n      var txtlngth = 0;\n      this.ctx.translate(options.x + txtlngth / 2 + (transX ? transX : 0), options.y + (transY ? transY : 0));\n      this.ctx.rotate(options.labelRotation * Math.PI / 180);\n    }\n\n    this.ctx.fillText(label, isTSpan ? options.x : 0, isTSpan ? dy : 0);\n    this.ctx.restore();\n    return this.canvasObj;\n  };\n  /**\n   * To draw circle on the canvas\n   * @param {CircleAttributes} options - required options to draw the circle\n   * @return {void}\n   */\n\n\n  CanvasRenderer.prototype.drawCircle = function (options, canvasTranslate) {\n    var canvasCtx = this.ctx;\n    this.ctx.save();\n    this.ctx.beginPath();\n    this.ctx.arc(options.cx, options.cy, options.r, 0, 2 * Math.PI);\n    this.ctx.fillStyle = options.fill;\n    this.ctx.globalAlpha = options.opacity;\n    this.ctx.fill();\n\n    if (canvasTranslate) {\n      this.ctx.translate(canvasTranslate[0], canvasTranslate[1]);\n    }\n\n    this.setAttributes(options);\n    this.ctx.stroke();\n    this.ctx.restore();\n    this.ctx = canvasCtx;\n    return this.canvasObj;\n  };\n  /**\n   * To draw polyline\n   * @param {PolylineAttributes} options - options needed to draw polyline\n   * @return {void}\n   */\n\n\n  CanvasRenderer.prototype.drawPolyline = function (options) {\n    this.ctx.save();\n    this.ctx.beginPath();\n    var points = options.points.split(' ');\n\n    for (var i = 0; i < points.length - 1; i++) {\n      var point = points[i].split(',');\n      var x = parseFloat(point[0]);\n      var y = parseFloat(point[1]);\n\n      if (i === 0) {\n        this.ctx.moveTo(x, y);\n      } else {\n        this.ctx.lineTo(x, y);\n      }\n    }\n\n    this.ctx.lineWidth = this.getOptionValue(options, 'stroke-width');\n    this.ctx.strokeStyle = options.stroke;\n    this.ctx.stroke();\n    this.ctx.restore();\n  };\n  /**\n   * To draw an ellipse on the canvas\n   * @param {EllipseAttributes} options - options needed to draw ellipse\n   * @return {void}\n   */\n\n\n  CanvasRenderer.prototype.drawEllipse = function (options, canvasTranslate) {\n    var canvasCtx = this.ctx;\n    var circumference = Math.max(options.rx, options.ry);\n    var scaleX = options.rx / circumference;\n    var scaleY = options.ry / circumference;\n    this.ctx.save();\n    this.ctx.beginPath();\n    this.ctx.translate(options.cx, options.cy);\n\n    if (canvasTranslate) {\n      this.ctx.translate(canvasTranslate[0], canvasTranslate[1]);\n    }\n\n    this.ctx.save();\n    this.ctx.scale(scaleX, scaleY);\n    this.ctx.arc(0, 0, circumference, 0, 2 * Math.PI, false);\n    this.ctx.fillStyle = options.fill;\n    this.ctx.fill();\n    this.ctx.restore();\n    this.ctx.lineWidth = this.getOptionValue(options, 'stroke-width');\n    this.ctx.strokeStyle = options.stroke;\n    this.ctx.stroke();\n    this.ctx.restore();\n    this.ctx = canvasCtx;\n  };\n  /**\n   * To draw an image\n   * @param {ImageAttributes} options - options required to draw an image on the canvas\n   * @return {void}\n   */\n\n\n  CanvasRenderer.prototype.drawImage = function (options) {\n    this.ctx.save();\n    var imageObj = new Image();\n\n    if (!isNullOrUndefined(options.href)) {\n      imageObj.src = options.href;\n      this.ctx.drawImage(imageObj, options.x, options.y, options.width, options.height);\n    }\n\n    this.ctx.restore();\n  };\n  /**\n   * To create a linear gradient\n   * @param {string[]} colors - Specifies the colors required to create linear gradient\n   * @return {string}\n   */\n\n\n  CanvasRenderer.prototype.createLinearGradient = function (colors) {\n    var myGradient;\n\n    if (!isNullOrUndefined(colors[0].colorStop)) {\n      myGradient = this.ctx.createLinearGradient(0, 0, 0, this.canvasObj.height);\n    }\n\n    var color = this.setGradientValues(colors, myGradient);\n    return color;\n  };\n  /**\n   * To create a radial gradient\n   * @param {string[]} colors - Specifies the colors required to create linear gradient\n   * @return {string}\n   */\n\n\n  CanvasRenderer.prototype.createRadialGradient = function (colors) {\n    var myGradient;\n\n    if (!isNullOrUndefined(colors[0].colorStop)) {\n      myGradient = this.ctx.createRadialGradient(0, 0, 0, 0, 0, this.canvasObj.height);\n    }\n\n    var colorName = this.setGradientValues(colors, myGradient);\n    return colorName;\n  }; // To set the gradient values\n\n\n  CanvasRenderer.prototype.setGradientValues = function (colors, myGradient) {\n    var colorName;\n\n    if (!isNullOrUndefined(colors[0].colorStop)) {\n      for (var i = 0; i <= colors.length - 1; i++) {\n        var color = colors[i].color;\n        var newColorStop = colors[i].colorStop.slice(0, -1);\n        var stopColor = parseInt(newColorStop, 10) / 100;\n        myGradient.addColorStop(stopColor, color);\n      }\n\n      colorName = myGradient.toString();\n    } else {\n      colorName = colors[0].color.toString();\n    }\n\n    return colorName;\n  };\n  /**\n   * To set the attributes to the element\n   * @param {SVGCanvasAttributes} options - Attributes to set for the element\n   * @param {HTMLElement} element - The element to which the attributes need to be set\n   * @return {HTMLElement}\n   */\n\n\n  CanvasRenderer.prototype.setElementAttributes = function (options, element) {\n    var keys = Object.keys(options);\n    var values = Object.keys(options).map(function (key) {\n      return options[key];\n    });\n\n    for (var i = 0; i < keys.length; i++) {\n      element.setAttribute(keys[i], values[i]);\n    }\n\n    return null;\n  };\n  /**\n   * To update the values of the canvas element attributes\n   * @param {SVGCanvasAttributes} options - Specifies the colors required to create gradient\n   * @return {void}\n   */\n\n\n  CanvasRenderer.prototype.updateCanvasAttributes = function (options) {\n    this.setElementAttributes(options, this.canvasObj);\n    var ctx = this.ctx;\n\n    if (!isNullOrUndefined(this.dataUrl)) {\n      var img_1 = new Image();\n\n      img_1.onload = function () {\n        ctx.drawImage(img_1, 0, 0);\n      };\n\n      img_1.src = this.dataUrl;\n    }\n  };\n  /**\n   * This method clears the given rectangle region\n   * @param options\n   */\n\n\n  CanvasRenderer.prototype.clearRect = function (rect) {\n    this.ctx.restore();\n    this.ctx.clearRect(rect.x, rect.y, rect.width, rect.height);\n  };\n\n  ;\n  /**\n   * For canvas rendering in chart\n   * Dummy method for using canvas/svg render in the same variable name in chart control\n   * @param {BaseAttibutes} options - Options needed to create group\n   * @return {Element}\n   */\n\n  CanvasRenderer.prototype.createGroup = function (options) {\n    return null;\n  };\n  /**\n   * To render a clip path\n   * Dummy method for using canvas/svg render in the same variable name in chart control\n   * @param {BaseAttibutes} options - Options required to render a clip path\n   * @return {Element}\n   */\n\n\n  CanvasRenderer.prototype.drawClipPath = function (options) {\n    return null;\n  };\n  /**\n   * Clip method to perform clip in canvas mode\n   * @param options\n   */\n\n\n  CanvasRenderer.prototype.canvasClip = function (options) {\n    this.ctx.save();\n    this.ctx.fillStyle = 'transparent';\n    this.ctx.rect(options.x, options.y, options.width, options.height);\n    this.ctx.fill();\n    this.ctx.clip();\n  };\n  /**\n   * Tp restore the canvas\n   * @param options\n   */\n\n\n  CanvasRenderer.prototype.canvasRestore = function () {\n    this.ctx.restore();\n  };\n  /**\n   * To draw a polygon\n   * Dummy method for using canvas/svg render in the same variable name in chart control\n   * @param {PolylineAttributes} options - Options needed to draw a polygon in SVG\n   * @return {Element}\n   */\n\n\n  CanvasRenderer.prototype.drawPolygon = function (options) {\n    return null;\n  };\n  /**\n   * To create defs element in SVG\n   * Dummy method for using canvas/svg render in the same variable name in chart control\n   * @return {Element}\n   */\n\n\n  CanvasRenderer.prototype.createDefs = function () {\n    return null;\n  };\n  /**\n   * To create clip path in SVG\n   * Dummy method for using canvas/svg render in the same variable name in chart control\n   * @param {BaseAttibutes} options - Options needed to create clip path\n   * @return {Element}\n   */\n\n\n  CanvasRenderer.prototype.createClipPath = function (options) {\n    return null;\n  };\n  /**\n   * To create a Html5 SVG element\n   * Dummy method for using canvas/svg render in the same variable name in chart control\n   * @param {SVGAttributes} options - Options to create SVG\n   * @return {Element}\n   */\n\n\n  CanvasRenderer.prototype.createSvg = function (options) {\n    return null;\n  };\n\n  return CanvasRenderer;\n}();\n\nexport { CanvasRenderer };","map":{"version":3,"names":["isNullOrUndefined","CanvasRenderer","rootID","rootId","prototype","getOptionValue","options","key","createCanvas","canvasObj","document","createElement","setAttribute","ctx","getContext","setCanvasSize","width","height","element","getElementById","size","getBoundingClientRect","toString","setAttributes","lineWidth","dashArray","dashArrayString","split","setLineDash","parseInt","strokeStyle","drawLine","save","beginPath","stroke","moveTo","x1","y1","lineTo","x2","y2","restore","drawRectangle","canvasTranslate","canvasCtx","cornerRadius","rx","translate","globalAlpha","rect","x","y","drawCornerRadius","fill","fillStyle","fillRect","arcTo","closePath","drawPath","path","d","dataSplit","borderWidth","flag","opacity","i","length","parseFloat","innerR","cx","q1","q2","quadraticCurveTo","c1","c2","c3","c4","bezierCurveTo","arc","cy","radius","Math","PI","counterClockWise","start","end","undefined","createText","label","transX","transY","dy","isTSpan","fontWeight","toLowerCase","fontSize","fontFamily","fontStyle","font","anchor","rotation","labelRotation","textAlign","baseline","textBaseline","txtlngth","rotate","fillText","drawCircle","r","drawPolyline","points","point","drawEllipse","circumference","max","ry","scaleX","scaleY","scale","drawImage","imageObj","Image","href","src","createLinearGradient","colors","myGradient","colorStop","color","setGradientValues","createRadialGradient","colorName","newColorStop","slice","stopColor","addColorStop","setElementAttributes","keys","Object","values","map","updateCanvasAttributes","dataUrl","img_1","onload","clearRect","createGroup","drawClipPath","canvasClip","clip","canvasRestore","drawPolygon","createDefs","createClipPath","createSvg"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-svg-base/src/svg-render/canvas-renderer.js"],"sourcesContent":["/**\n * To import utils.\n */\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * @private\n */\nvar CanvasRenderer = /** @class */ (function () {\n    /* End-Properties */\n    function CanvasRenderer(rootID) {\n        this.rootId = rootID;\n    }\n    // method to get the attributes value\n    /* tslint:disable */\n    CanvasRenderer.prototype.getOptionValue = function (options, key) {\n        return options[key];\n    };\n    /* tslint:enable */\n    /**\n     * To create a Html5 canvas element\n     * @param {BaseAttibutes} options - Options to create canvas\n     * @return {HTMLCanvasElement}\n     */\n    CanvasRenderer.prototype.createCanvas = function (options) {\n        var canvasObj = document.createElement('canvas');\n        canvasObj.setAttribute('id', this.rootId + '_canvas');\n        this.ctx = canvasObj.getContext('2d');\n        this.canvasObj = canvasObj;\n        this.setCanvasSize(options.width, options.height);\n        return this.canvasObj;\n    };\n    /**\n     * To set the width and height for the Html5 canvas element\n     * @param {number} width - width of the canvas\n     * @param {number} height - height of the canvas\n     * @return {void}\n     */\n    CanvasRenderer.prototype.setCanvasSize = function (width, height) {\n        var element = document.getElementById(this.rootId);\n        var size = !isNullOrUndefined(element) ? element.getBoundingClientRect() : null;\n        if (isNullOrUndefined(this.width)) {\n            this.canvasObj.setAttribute('width', width ? width.toString() : size.width.toString());\n        }\n        else {\n            this.canvasObj.setAttribute('width', this.width.toString());\n        }\n        if (isNullOrUndefined(this.height)) {\n            this.canvasObj.setAttribute('height', height ? height.toString() : '450');\n        }\n        else {\n            this.canvasObj.setAttribute('height', this.height.toString());\n        }\n    };\n    // To set the values to the attributes\n    CanvasRenderer.prototype.setAttributes = function (options) {\n        this.ctx.lineWidth = this.getOptionValue(options, 'stroke-width');\n        var dashArray = this.getOptionValue(options, 'stroke-dasharray');\n        if (!isNullOrUndefined(dashArray)) {\n            var dashArrayString = dashArray.split(',');\n            this.ctx.setLineDash([parseInt(dashArrayString[0], 10), parseInt(dashArrayString[1], 10)]);\n        }\n        this.ctx.strokeStyle = this.getOptionValue(options, 'stroke');\n    };\n    /**\n     * To draw a line\n     * @param {LineAttributes} options - required options to draw a line on the canvas\n     * @return {void}\n     */\n    CanvasRenderer.prototype.drawLine = function (options) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.lineWidth = this.getOptionValue(options, 'stroke-width');\n        this.ctx.strokeStyle = options.stroke;\n        this.ctx.moveTo(options.x1, options.y1);\n        this.ctx.lineTo(options.x2, options.y2);\n        this.ctx.stroke();\n        this.ctx.restore();\n    };\n    /**\n     * To draw a rectangle\n     * @param {RectAttributes} options - required options to draw a rectangle on the canvas\n     * @return {void}\n     */\n    CanvasRenderer.prototype.drawRectangle = function (options, canvasTranslate) {\n        var canvasCtx = this.ctx;\n        var cornerRadius = options.rx;\n        this.ctx.save();\n        this.ctx.beginPath();\n        if (canvasTranslate) {\n            this.ctx.translate(canvasTranslate[0], canvasTranslate[1]);\n        }\n        this.ctx.globalAlpha = this.getOptionValue(options, 'opacity');\n        this.setAttributes(options);\n        this.ctx.rect(options.x, options.y, options.width, options.height);\n        if (cornerRadius !== null && cornerRadius >= 0) {\n            this.drawCornerRadius(options);\n        }\n        else {\n            if (options.fill === 'none') {\n                options.fill = 'transparent';\n            }\n            this.ctx.fillStyle = options.fill;\n            this.ctx.fillRect(options.x, options.y, options.width, options.height);\n            this.ctx.stroke();\n        }\n        this.ctx.restore();\n        this.ctx = canvasCtx;\n        return (this.canvasObj);\n    };\n    // To draw the corner of a rectangle\n    CanvasRenderer.prototype.drawCornerRadius = function (options) {\n        var cornerRadius = options.rx;\n        var x = options.x;\n        var y = options.y;\n        var width = options.width;\n        var height = options.height;\n        if (options.fill === 'none') {\n            options.fill = 'transparent';\n        }\n        this.ctx.fillStyle = options.fill;\n        if (width < 2 * cornerRadius) {\n            cornerRadius = width / 2;\n        }\n        if (height < 2 * cornerRadius) {\n            cornerRadius = height / 2;\n        }\n        this.ctx.beginPath();\n        this.ctx.moveTo(x + width - cornerRadius, y);\n        this.ctx.arcTo(x + width, y, x + width, y + height, cornerRadius);\n        this.ctx.arcTo(x + width, y + height, x, y + height, cornerRadius);\n        this.ctx.arcTo(x, y + height, x, y, cornerRadius);\n        this.ctx.arcTo(x, y, x + width, y, cornerRadius);\n        this.ctx.closePath();\n        this.ctx.fill();\n        this.ctx.stroke();\n    };\n    /**\n     * To draw a path on the canvas\n     * @param {PathAttributes} options - options needed to draw path\n     * @param {Int32Array} canvasTranslate - Array of numbers to translate the canvas\n     * @return {void}\n     */\n    CanvasRenderer.prototype.drawPath = function (options, canvasTranslate) {\n        var path = options.d;\n        var dataSplit = path.split(' ');\n        var borderWidth = this.getOptionValue(options, 'stroke-width');\n        var canvasCtx = this.ctx;\n        var flag = true;\n        this.ctx.save();\n        this.ctx.beginPath();\n        if (canvasTranslate) {\n            this.ctx.translate(canvasTranslate[0], canvasTranslate[1]);\n        }\n        this.ctx.globalAlpha = options.opacity ? options.opacity : this.getOptionValue(options, 'fill-opacity');\n        this.setAttributes(options);\n        for (var i = 0; i < dataSplit.length; i = i + 3) {\n            var x1 = parseFloat(dataSplit[i + 1]);\n            var y1 = parseFloat(dataSplit[i + 2]);\n            switch (dataSplit[i]) {\n                case 'M':\n                    if (!options.innerR && !options.cx) {\n                        this.ctx.moveTo(x1, y1);\n                    }\n                    break;\n                case 'L':\n                    if (!options.innerR) {\n                        this.ctx.lineTo(x1, y1);\n                    }\n                    break;\n                case 'Q':\n                    var q1 = parseFloat(dataSplit[i + 3]);\n                    var q2 = parseFloat(dataSplit[i + 4]);\n                    this.ctx.quadraticCurveTo(x1, y1, q1, q2);\n                    i = i + 2;\n                    break;\n                case 'C':\n                    var c1 = parseFloat(dataSplit[i + 3]);\n                    var c2 = parseFloat(dataSplit[i + 4]);\n                    var c3 = parseFloat(dataSplit[i + 5]);\n                    var c4 = parseFloat(dataSplit[i + 6]);\n                    this.ctx.bezierCurveTo(x1, y1, c1, c2, c3, c4);\n                    i = i + 4;\n                    break;\n                case 'A':\n                    if (!options.innerR) {\n                        if (options.cx) {\n                            this.ctx.arc(options.cx, options.cy, options.radius, 0, 2 * Math.PI, options.counterClockWise);\n                        }\n                        else {\n                            this.ctx.moveTo(options.x, options.y);\n                            this.ctx.arc(options.x, options.y, options.radius, options.start, options.end, options.counterClockWise);\n                            this.ctx.lineTo(options.x, options.y);\n                        }\n                    }\n                    else if (flag) {\n                        this.ctx.arc(options.x, options.y, options.radius, options.start, options.end, options.counterClockWise);\n                        this.ctx.arc(options.x, options.y, options.innerR, options.end, options.start, !options.counterClockWise);\n                        flag = false;\n                    }\n                    i = i + 5;\n                    break;\n                case 'z':\n                case 'Z':\n                    this.ctx.closePath();\n                    //since for loop is incremented by 3, to get next value after 'z' i is decremented for 2.\n                    i = i - 2;\n                    break;\n            }\n        }\n        if (options.fill !== 'none' && options.fill !== undefined) {\n            this.ctx.fillStyle = options.fill;\n            this.ctx.fill();\n        }\n        if (borderWidth > 0) {\n            this.ctx.stroke();\n        }\n        this.ctx.restore();\n        this.ctx = canvasCtx;\n        return this.canvasObj;\n    };\n    /**\n     * To draw a text\n     * @param {TextAttributes} options - options required to draw text\n     * @param {string} label - Specifies the text which has to be drawn on the canvas\n     * @return {void}\n     */\n    CanvasRenderer.prototype.createText = function (options, label, transX, transY, dy, isTSpan) {\n        var fontWeight = this.getOptionValue(options, 'font-weight');\n        if (!isNullOrUndefined(fontWeight) && fontWeight.toLowerCase() === 'regular') {\n            fontWeight = 'normal';\n        }\n        var fontSize = this.getOptionValue(options, 'font-size');\n        var fontFamily = this.getOptionValue(options, 'font-family');\n        var fontStyle = this.getOptionValue(options, 'font-style').toLowerCase();\n        var font = (fontStyle + ' ' + fontWeight + ' ' + fontSize + ' ' + fontFamily);\n        var anchor = this.getOptionValue(options, 'text-anchor');\n        var opacity = options.opacity !== undefined ? options.opacity : 1;\n        var rotation = isNullOrUndefined(options.labelRotation) ? 0 : options.labelRotation;\n        if (anchor === 'middle') {\n            anchor = 'center';\n        }\n        this.ctx.save();\n        this.ctx.fillStyle = options.fill;\n        this.ctx.font = font;\n        this.ctx.textAlign = anchor;\n        this.ctx.globalAlpha = opacity;\n        if (options.baseline) {\n            this.ctx.textBaseline = options.baseline;\n        }\n        if (!isTSpan) {\n            var txtlngth = 0;\n            this.ctx.translate(options.x + (txtlngth / 2) + (transX ? transX : 0), options.y + (transY ? transY : 0));\n            this.ctx.rotate(options.labelRotation * Math.PI / 180);\n        }\n        this.ctx.fillText(label, isTSpan ? options.x : 0, isTSpan ? dy : 0);\n        this.ctx.restore();\n        return this.canvasObj;\n    };\n    /**\n     * To draw circle on the canvas\n     * @param {CircleAttributes} options - required options to draw the circle\n     * @return {void}\n     */\n    CanvasRenderer.prototype.drawCircle = function (options, canvasTranslate) {\n        var canvasCtx = this.ctx;\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.arc(options.cx, options.cy, options.r, 0, 2 * Math.PI);\n        this.ctx.fillStyle = options.fill;\n        this.ctx.globalAlpha = options.opacity;\n        this.ctx.fill();\n        if (canvasTranslate) {\n            this.ctx.translate(canvasTranslate[0], canvasTranslate[1]);\n        }\n        this.setAttributes(options);\n        this.ctx.stroke();\n        this.ctx.restore();\n        this.ctx = canvasCtx;\n        return this.canvasObj;\n    };\n    /**\n     * To draw polyline\n     * @param {PolylineAttributes} options - options needed to draw polyline\n     * @return {void}\n     */\n    CanvasRenderer.prototype.drawPolyline = function (options) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        var points = options.points.split(' ');\n        for (var i = 0; i < points.length - 1; i++) {\n            var point = points[i].split(',');\n            var x = parseFloat(point[0]);\n            var y = parseFloat(point[1]);\n            if (i === 0) {\n                this.ctx.moveTo(x, y);\n            }\n            else {\n                this.ctx.lineTo(x, y);\n            }\n        }\n        this.ctx.lineWidth = this.getOptionValue(options, 'stroke-width');\n        this.ctx.strokeStyle = options.stroke;\n        this.ctx.stroke();\n        this.ctx.restore();\n    };\n    /**\n     * To draw an ellipse on the canvas\n     * @param {EllipseAttributes} options - options needed to draw ellipse\n     * @return {void}\n     */\n    CanvasRenderer.prototype.drawEllipse = function (options, canvasTranslate) {\n        var canvasCtx = this.ctx;\n        var circumference = Math.max(options.rx, options.ry);\n        var scaleX = options.rx / circumference;\n        var scaleY = options.ry / circumference;\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.translate(options.cx, options.cy);\n        if (canvasTranslate) {\n            this.ctx.translate(canvasTranslate[0], canvasTranslate[1]);\n        }\n        this.ctx.save();\n        this.ctx.scale(scaleX, scaleY);\n        this.ctx.arc(0, 0, circumference, 0, 2 * Math.PI, false);\n        this.ctx.fillStyle = options.fill;\n        this.ctx.fill();\n        this.ctx.restore();\n        this.ctx.lineWidth = this.getOptionValue(options, 'stroke-width');\n        this.ctx.strokeStyle = options.stroke;\n        this.ctx.stroke();\n        this.ctx.restore();\n        this.ctx = canvasCtx;\n    };\n    /**\n     * To draw an image\n     * @param {ImageAttributes} options - options required to draw an image on the canvas\n     * @return {void}\n     */\n    CanvasRenderer.prototype.drawImage = function (options) {\n        this.ctx.save();\n        var imageObj = new Image();\n        if (!isNullOrUndefined(options.href)) {\n            imageObj.src = options.href;\n            this.ctx.drawImage(imageObj, options.x, options.y, options.width, options.height);\n        }\n        this.ctx.restore();\n    };\n    /**\n     * To create a linear gradient\n     * @param {string[]} colors - Specifies the colors required to create linear gradient\n     * @return {string}\n     */\n    CanvasRenderer.prototype.createLinearGradient = function (colors) {\n        var myGradient;\n        if (!isNullOrUndefined(colors[0].colorStop)) {\n            myGradient = this.ctx.createLinearGradient(0, 0, 0, this.canvasObj.height);\n        }\n        var color = this.setGradientValues(colors, myGradient);\n        return color;\n    };\n    /**\n     * To create a radial gradient\n     * @param {string[]} colors - Specifies the colors required to create linear gradient\n     * @return {string}\n     */\n    CanvasRenderer.prototype.createRadialGradient = function (colors) {\n        var myGradient;\n        if (!isNullOrUndefined(colors[0].colorStop)) {\n            myGradient = this.ctx.createRadialGradient(0, 0, 0, 0, 0, this.canvasObj.height);\n        }\n        var colorName = this.setGradientValues(colors, myGradient);\n        return colorName;\n    };\n    // To set the gradient values\n    CanvasRenderer.prototype.setGradientValues = function (colors, myGradient) {\n        var colorName;\n        if (!isNullOrUndefined(colors[0].colorStop)) {\n            for (var i = 0; i <= colors.length - 1; i++) {\n                var color = colors[i].color;\n                var newColorStop = (colors[i].colorStop).slice(0, -1);\n                var stopColor = parseInt(newColorStop, 10) / 100;\n                myGradient.addColorStop(stopColor, color);\n            }\n            colorName = myGradient.toString();\n        }\n        else {\n            colorName = colors[0].color.toString();\n        }\n        return colorName;\n    };\n    /**\n     * To set the attributes to the element\n     * @param {SVGCanvasAttributes} options - Attributes to set for the element\n     * @param {HTMLElement} element - The element to which the attributes need to be set\n     * @return {HTMLElement}\n     */\n    CanvasRenderer.prototype.setElementAttributes = function (options, element) {\n        var keys = Object.keys(options);\n        var values = Object.keys(options).map(function (key) { return options[key]; });\n        for (var i = 0; i < keys.length; i++) {\n            element.setAttribute(keys[i], values[i]);\n        }\n        return null;\n    };\n    /**\n     * To update the values of the canvas element attributes\n     * @param {SVGCanvasAttributes} options - Specifies the colors required to create gradient\n     * @return {void}\n     */\n    CanvasRenderer.prototype.updateCanvasAttributes = function (options) {\n        this.setElementAttributes(options, this.canvasObj);\n        var ctx = this.ctx;\n        if (!isNullOrUndefined(this.dataUrl)) {\n            var img_1 = new Image;\n            img_1.onload = function () {\n                ctx.drawImage(img_1, 0, 0);\n            };\n            img_1.src = this.dataUrl;\n        }\n    };\n    /**\n     * This method clears the given rectangle region\n     * @param options\n     */\n    CanvasRenderer.prototype.clearRect = function (rect) {\n        this.ctx.restore();\n        this.ctx.clearRect(rect.x, rect.y, rect.width, rect.height);\n    };\n    ;\n    /**\n     * For canvas rendering in chart\n     * Dummy method for using canvas/svg render in the same variable name in chart control\n     * @param {BaseAttibutes} options - Options needed to create group\n     * @return {Element}\n     */\n    CanvasRenderer.prototype.createGroup = function (options) {\n        return null;\n    };\n    /**\n     * To render a clip path\n     * Dummy method for using canvas/svg render in the same variable name in chart control\n     * @param {BaseAttibutes} options - Options required to render a clip path\n     * @return {Element}\n     */\n    CanvasRenderer.prototype.drawClipPath = function (options) {\n        return null;\n    };\n    /**\n     * Clip method to perform clip in canvas mode\n     * @param options\n     */\n    CanvasRenderer.prototype.canvasClip = function (options) {\n        this.ctx.save();\n        this.ctx.fillStyle = 'transparent';\n        this.ctx.rect(options.x, options.y, options.width, options.height);\n        this.ctx.fill();\n        this.ctx.clip();\n    };\n    /**\n     * Tp restore the canvas\n     * @param options\n     */\n    CanvasRenderer.prototype.canvasRestore = function () {\n        this.ctx.restore();\n    };\n    /**\n     * To draw a polygon\n     * Dummy method for using canvas/svg render in the same variable name in chart control\n     * @param {PolylineAttributes} options - Options needed to draw a polygon in SVG\n     * @return {Element}\n     */\n    CanvasRenderer.prototype.drawPolygon = function (options) {\n        return null;\n    };\n    /**\n     * To create defs element in SVG\n     * Dummy method for using canvas/svg render in the same variable name in chart control\n     * @return {Element}\n     */\n    CanvasRenderer.prototype.createDefs = function () {\n        return null;\n    };\n    /**\n     * To create clip path in SVG\n     * Dummy method for using canvas/svg render in the same variable name in chart control\n     * @param {BaseAttibutes} options - Options needed to create clip path\n     * @return {Element}\n     */\n    CanvasRenderer.prototype.createClipPath = function (options) {\n        return null;\n    };\n    /**\n     * To create a Html5 SVG element\n     * Dummy method for using canvas/svg render in the same variable name in chart control\n     * @param {SVGAttributes} options - Options to create SVG\n     * @return {Element}\n     */\n    CanvasRenderer.prototype.createSvg = function (options) {\n        return null;\n    };\n    return CanvasRenderer;\n}());\nexport { CanvasRenderer };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}