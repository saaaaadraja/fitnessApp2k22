{"ast":null,"code":"import { PdfString } from './../../primitives/pdf-string';\nimport { ArabicShapeRenderer } from './rtl/rtl-text-shape';\nimport { PdfTextDirection } from './../enum';\nimport { Bidi } from './rtl/rtl-bidirectional';\n/**\n * `Metrics` of the font.\n * @private\n */\n\nvar RtlRenderer =\n/** @class */\nfunction () {\n  function RtlRenderer() {\n    //region Constants\n    /// Open bracket symbol.\n    /// </summary>\n    this.openBracket = '('; /// <summary>\n    /// Close bracket symbol.\n    /// </summary>\n\n    this.closeBracket = ')'; //#endregion\n  } //#region Constructors\n  /// <summary>\n  /// Initializes a new instance of the <see cref=\"RtlRenderer\"/> class.\n  /// </summary>\n  // public constructor() {\n  // }\n  //#region Public Methods\n  /// <summary>\n  /// Layouts text. Changes blocks position in the RTL text.\n  /// Ligates the text if needed.\n  /// </summary>\n  /// <param name=\"line\">Line of the text.</param>\n  /// <param name=\"font\">Font to be used for string printing.</param>\n  /// <param name=\"rtl\">Font alignment.</param>\n  /// <param name=\"wordSpace\">Indicates whether Word Spacing used or not.</param>\n  /// <returns>Layout string.</returns>\n\n\n  RtlRenderer.prototype.layout = function (line, font, rtl, wordSpace, format) {\n    if (line == null) {\n      throw new Error('ArgumentNullException : line');\n    }\n\n    if (font == null) {\n      throw new Error('ArgumentNullException : font');\n    }\n\n    var result = [];\n\n    if (font.Unicode) {\n      result = this.customLayout(line, rtl, format, font, wordSpace);\n    } else {\n      result = [];\n      result[0] = line;\n    }\n\n    return result;\n  }; /// <summary>\n  /// Layouts a string and splits it by the words and using correct lay outing.\n  /// </summary>\n  /// <param name=\"line\">Text line.</param>\n  /// <param name=\"font\">Font object.</param>\n  /// <param name=\"rtl\">Indicates whether RTL should be applied.</param>\n  /// <param name=\"wordSpace\">Indicates whether word spacing is used.</param>\n  /// <returns>Array of words if converted, null otherwise.</returns>\n\n\n  RtlRenderer.prototype.splitLayout = function (line, font, rtl, wordSpace, format) {\n    if (line == null) {\n      throw new Error('ArgumentNullException : line');\n    }\n\n    if (font == null) {\n      throw new Error('ArgumentNullException : font');\n    }\n\n    var words = [];\n    var system = false;\n\n    if (!system || words == null) {\n      words = this.customSplitLayout(line, font, rtl, wordSpace, format);\n    }\n\n    return words;\n  }; //#endregion\n  //#region Implementation\n  // private isEnglish( word : string) : boolean\n  // {\n  //     let c : string = (word.length > 0) ? word[0] : '';\n  //     return (c >= '0' && c < 'Ã¿');\n  // }\n  // private keepOrder( words : string, startIndex : number, count: number, result : string[], resultIndex : number) : void\n  // {\n  //     for (let i : number = 0, ri = resultIndex - count + 1; i < count; ++i, ++ri) {\n  //         result[ri] = words[i + startIndex];\n  //     }\n  // }\n  /// <summary>\n  /// Uses system API to layout the text.\n  /// </summary>\n  /// <param name=\"line\">Line of the text to be layouted.</param>\n  /// <param name=\"font\">Font which is used for text printing.</param>\n  /// <param name=\"rtl\">Indicates whether we use RTL or RTL lay outing of the text container.</param>\n  /// <returns>Layout string.</returns>\n\n  /* tslint:disable-next-line:max-line-length */\n\n\n  RtlRenderer.prototype.getGlyphIndex = function (line, font, rtl,\n  /*out*/\n  glyphs, custom) {\n    var success = true;\n    var fail = false;\n\n    if (line == null) {\n      throw new Error('ArgumentNullException : line');\n    }\n\n    if (font == null) {\n      throw new Error('ArgumentNullException : font');\n    }\n\n    glyphs = null;\n\n    if (line.length === 0) {\n      return {\n        success: fail,\n        glyphs: glyphs\n      };\n    }\n\n    var renderer = new ArabicShapeRenderer();\n    var text = renderer.shape(line, 0);\n    var internalFont = font.fontInternal;\n    var ttfReader = internalFont.ttfReader;\n    glyphs = new Uint16Array(text.length);\n    var i = 0;\n\n    for (var k = 0, len = text.length; k < len; k++) {\n      var ch = text[k];\n      var glyphInfo = ttfReader.getGlyph(ch);\n\n      if (glyphInfo !== null && typeof glyphInfo !== 'undefined') {\n        glyphs[i++] = glyphInfo.index;\n      }\n    }\n\n    return {\n      success: success,\n      glyphs: glyphs\n    };\n  };\n  /* tslint:disable-next-line:max-line-length */\n\n\n  RtlRenderer.prototype.customLayout = function (line, rtl, format, font, wordSpace) {\n    if (wordSpace === null || typeof wordSpace === 'undefined') {\n      if (line == null) {\n        throw new Error('ArgumentNullException : line');\n      }\n\n      var result = null; //bidirectional order.\n\n      if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.None) {\n        var bidi = new Bidi();\n        result = bidi.getLogicalToVisualString(line, rtl);\n      }\n\n      return result;\n    } else {\n      if (line == null) {\n        throw new Error('ArgumentNullException : line');\n      }\n\n      if (font == null) {\n        throw new Error('ArgumentNullException : font');\n      }\n\n      var layouted = null;\n\n      if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.None) {\n        var renderer = new ArabicShapeRenderer();\n        var txt = renderer.shape(line, 0);\n        layouted = this.customLayout(txt, rtl, format);\n      } // else {\n      //     layouted = this.customLayout(line, rtl, format);\n      // }\n      // We have unicode font, but from the file.        \n\n\n      var result = []; // Split the text by words if word spacing is not default.\n\n      if (wordSpace) {\n        var words = layouted.split('');\n        var count = words.length;\n\n        for (var i = 0; i < count; i++) {\n          words[i] = this.addChars(font, words[i]);\n        }\n\n        result = words;\n      } else {\n        result = [];\n        result[0] = this.addChars(font, layouted);\n      }\n\n      return result;\n    }\n  }; /// <summary>\n  /// Add information about used glyphs to the font.\n  /// </summary>\n  /// <param name=\"font\">Font used for text rendering.</param>\n  /// <param name=\"glyphs\">Array of used glyphs.</param>\n  /// <returns>String in the form to be written to the file.</returns>\n\n\n  RtlRenderer.prototype.addChars = function (font, glyphs) {\n    var line = glyphs;\n\n    if (font == null) {\n      throw new Error('ArgumentNullException : font');\n    }\n\n    if (line == null) {\n      throw new Error('ArgumentNullException : line');\n    }\n\n    var text = line;\n    var internalFont = font.fontInternal;\n    var ttfReader = internalFont.ttfReader;\n    font.setSymbols(text); // Reconvert string according to unicode standard.\n\n    text = ttfReader.convertString(text);\n    var bytes = PdfString.toUnicodeArray(text, false);\n    text = PdfString.byteToString(bytes);\n    return text; // else {\n    //     if (font == null) {\n    //         throw new Error('ArgumentNullException : font');\n    //     }\n    //     if (glyphs == null) {\n    //         throw new Error('ArgumentNullException : glyphs');\n    //     }\n    //     // Mark the chars as used.\n    //     let text : string = '';\n    //     font.setSymbols(glyphs);\n    //     // Create string from the glyphs.\n    //     \n    //     let chars : string[] = [];\n    //     for (let i : number = 0; i < glyphs.length; i++) {\n    //         chars[i] = glyphs[i].toString();\n    //     }\n    //     for (let j : number = 0 ; j < chars.length; j++) {\n    //         text = text + chars[j];\n    //     }\n    //     let bytes : number[] = PdfString.toUnicodeArray(text, false);\n    //     text = PdfString.byteToString(bytes);\n    //     return text;\n    // }\n  }; /// <summary>\n  /// Layouts a string and splits it by the words by using custom lay outing.\n  /// </summary>\n  /// <param name=\"line\">Text line.</param>\n  /// <param name=\"font\">Font object.</param>\n  /// <param name=\"rtl\">Indicates whether RTL should be applied.</param>\n  /// <param name=\"wordSpace\">Indicates whether word spacing is used.</param>\n  /// <returns>Array of words if converted, null otherwise.</returns>\n\n  /* tslint:disable-next-line:max-line-length */\n\n\n  RtlRenderer.prototype.customSplitLayout = function (line, font, rtl, wordSpace, format) {\n    if (line == null) {\n      throw new Error('ArgumentNullException : line');\n    }\n\n    if (font == null) {\n      throw new Error('ArgumentNullException : font');\n    }\n\n    var reversedLine = this.customLayout(line, rtl, format);\n    var words = reversedLine.split('');\n    return words;\n  };\n\n  return RtlRenderer;\n}();\n\nexport { RtlRenderer };","map":{"version":3,"names":["PdfString","ArabicShapeRenderer","PdfTextDirection","Bidi","RtlRenderer","openBracket","closeBracket","prototype","layout","line","font","rtl","wordSpace","format","Error","result","Unicode","customLayout","splitLayout","words","system","customSplitLayout","getGlyphIndex","glyphs","custom","success","fail","length","renderer","text","shape","internalFont","fontInternal","ttfReader","Uint16Array","i","k","len","ch","glyphInfo","getGlyph","index","textDirection","None","bidi","getLogicalToVisualString","layouted","txt","split","count","addChars","setSymbols","convertString","bytes","toUnicodeArray","byteToString","reversedLine"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/rtl-renderer.js"],"sourcesContent":["import { PdfString } from './../../primitives/pdf-string';\nimport { ArabicShapeRenderer } from './rtl/rtl-text-shape';\nimport { PdfTextDirection } from './../enum';\nimport { Bidi } from './rtl/rtl-bidirectional';\n/**\n * `Metrics` of the font.\n * @private\n */\nvar RtlRenderer = /** @class */ (function () {\n    function RtlRenderer() {\n        //region Constants\n        /// Open bracket symbol.\n        /// </summary>\n        this.openBracket = '(';\n        /// <summary>\n        /// Close bracket symbol.\n        /// </summary>\n        this.closeBracket = ')';\n        //#endregion\n    }\n    //#region Constructors\n    /// <summary>\n    /// Initializes a new instance of the <see cref=\"RtlRenderer\"/> class.\n    /// </summary>\n    // public constructor() {\n    // }\n    //#region Public Methods\n    /// <summary>\n    /// Layouts text. Changes blocks position in the RTL text.\n    /// Ligates the text if needed.\n    /// </summary>\n    /// <param name=\"line\">Line of the text.</param>\n    /// <param name=\"font\">Font to be used for string printing.</param>\n    /// <param name=\"rtl\">Font alignment.</param>\n    /// <param name=\"wordSpace\">Indicates whether Word Spacing used or not.</param>\n    /// <returns>Layout string.</returns>\n    RtlRenderer.prototype.layout = function (line, font, rtl, wordSpace, format) {\n        if (line == null) {\n            throw new Error('ArgumentNullException : line');\n        }\n        if (font == null) {\n            throw new Error('ArgumentNullException : font');\n        }\n        var result = [];\n        if (font.Unicode) {\n            result = this.customLayout(line, rtl, format, font, wordSpace);\n        }\n        else {\n            result = [];\n            result[0] = line;\n        }\n        return result;\n    };\n    /// <summary>\n    /// Layouts a string and splits it by the words and using correct lay outing.\n    /// </summary>\n    /// <param name=\"line\">Text line.</param>\n    /// <param name=\"font\">Font object.</param>\n    /// <param name=\"rtl\">Indicates whether RTL should be applied.</param>\n    /// <param name=\"wordSpace\">Indicates whether word spacing is used.</param>\n    /// <returns>Array of words if converted, null otherwise.</returns>\n    RtlRenderer.prototype.splitLayout = function (line, font, rtl, wordSpace, format) {\n        if (line == null) {\n            throw new Error('ArgumentNullException : line');\n        }\n        if (font == null) {\n            throw new Error('ArgumentNullException : font');\n        }\n        var words = [];\n        var system = false;\n        if (!system || words == null) {\n            words = this.customSplitLayout(line, font, rtl, wordSpace, format);\n        }\n        return words;\n    };\n    //#endregion\n    //#region Implementation\n    // private isEnglish( word : string) : boolean\n    // {\n    //     let c : string = (word.length > 0) ? word[0] : '';\n    //     return (c >= '0' && c < 'Ã¿');\n    // }\n    // private keepOrder( words : string, startIndex : number, count: number, result : string[], resultIndex : number) : void\n    // {\n    //     for (let i : number = 0, ri = resultIndex - count + 1; i < count; ++i, ++ri) {\n    //         result[ri] = words[i + startIndex];\n    //     }\n    // }\n    /// <summary>\n    /// Uses system API to layout the text.\n    /// </summary>\n    /// <param name=\"line\">Line of the text to be layouted.</param>\n    /// <param name=\"font\">Font which is used for text printing.</param>\n    /// <param name=\"rtl\">Indicates whether we use RTL or RTL lay outing of the text container.</param>\n    /// <returns>Layout string.</returns>\n    /* tslint:disable-next-line:max-line-length */\n    RtlRenderer.prototype.getGlyphIndex = function (line, font, rtl, /*out*/ glyphs, custom) {\n        var success = true;\n        var fail = false;\n        if (line == null) {\n            throw new Error('ArgumentNullException : line');\n        }\n        if (font == null) {\n            throw new Error('ArgumentNullException : font');\n        }\n        glyphs = null;\n        if (line.length === 0) {\n            return { success: fail, glyphs: glyphs };\n        }\n        var renderer = new ArabicShapeRenderer();\n        var text = renderer.shape(line, 0);\n        var internalFont = font.fontInternal;\n        var ttfReader = internalFont.ttfReader;\n        glyphs = new Uint16Array(text.length);\n        var i = 0;\n        for (var k = 0, len = text.length; k < len; k++) {\n            var ch = text[k];\n            var glyphInfo = ttfReader.getGlyph(ch);\n            if (glyphInfo !== null && typeof glyphInfo !== 'undefined') {\n                glyphs[i++] = (glyphInfo).index;\n            }\n        }\n        return { success: success, glyphs: glyphs };\n    };\n    /* tslint:disable-next-line:max-line-length */\n    RtlRenderer.prototype.customLayout = function (line, rtl, format, font, wordSpace) {\n        if (wordSpace === null || typeof wordSpace === 'undefined') {\n            if (line == null) {\n                throw new Error('ArgumentNullException : line');\n            }\n            var result = null;\n            //bidirectional order.\n            if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.None) {\n                var bidi = new Bidi();\n                result = bidi.getLogicalToVisualString(line, rtl);\n            }\n            return result;\n        }\n        else {\n            if (line == null) {\n                throw new Error('ArgumentNullException : line');\n            }\n            if (font == null) {\n                throw new Error('ArgumentNullException : font');\n            }\n            var layouted = null;\n            if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.None) {\n                var renderer = new ArabicShapeRenderer();\n                var txt = renderer.shape(line, 0);\n                layouted = this.customLayout(txt, rtl, format);\n            }\n            // else {\n            //     layouted = this.customLayout(line, rtl, format);\n            // }\n            // We have unicode font, but from the file.        \n            var result = [];\n            // Split the text by words if word spacing is not default.\n            if (wordSpace) {\n                var words = layouted.split('');\n                var count = words.length;\n                for (var i = 0; i < count; i++) {\n                    words[i] = this.addChars(font, words[i]);\n                }\n                result = words;\n            }\n            else {\n                result = [];\n                result[0] = this.addChars(font, layouted);\n            }\n            return result;\n        }\n    };\n    /// <summary>\n    /// Add information about used glyphs to the font.\n    /// </summary>\n    /// <param name=\"font\">Font used for text rendering.</param>\n    /// <param name=\"glyphs\">Array of used glyphs.</param>\n    /// <returns>String in the form to be written to the file.</returns>\n    RtlRenderer.prototype.addChars = function (font, glyphs) {\n        var line = glyphs;\n        if (font == null) {\n            throw new Error('ArgumentNullException : font');\n        }\n        if (line == null) {\n            throw new Error('ArgumentNullException : line');\n        }\n        var text = line;\n        var internalFont = font.fontInternal;\n        var ttfReader = internalFont.ttfReader;\n        font.setSymbols(text);\n        // Reconvert string according to unicode standard.\n        text = ttfReader.convertString(text);\n        var bytes = PdfString.toUnicodeArray(text, false);\n        text = PdfString.byteToString(bytes);\n        return text;\n        // else {\n        //     if (font == null) {\n        //         throw new Error('ArgumentNullException : font');\n        //     }\n        //     if (glyphs == null) {\n        //         throw new Error('ArgumentNullException : glyphs');\n        //     }\n        //     // Mark the chars as used.\n        //     let text : string = '';\n        //     font.setSymbols(glyphs);\n        //     // Create string from the glyphs.\n        //     \n        //     let chars : string[] = [];\n        //     for (let i : number = 0; i < glyphs.length; i++) {\n        //         chars[i] = glyphs[i].toString();\n        //     }\n        //     for (let j : number = 0 ; j < chars.length; j++) {\n        //         text = text + chars[j];\n        //     }\n        //     let bytes : number[] = PdfString.toUnicodeArray(text, false);\n        //     text = PdfString.byteToString(bytes);\n        //     return text;\n        // }\n    };\n    /// <summary>\n    /// Layouts a string and splits it by the words by using custom lay outing.\n    /// </summary>\n    /// <param name=\"line\">Text line.</param>\n    /// <param name=\"font\">Font object.</param>\n    /// <param name=\"rtl\">Indicates whether RTL should be applied.</param>\n    /// <param name=\"wordSpace\">Indicates whether word spacing is used.</param>\n    /// <returns>Array of words if converted, null otherwise.</returns>\n    /* tslint:disable-next-line:max-line-length */\n    RtlRenderer.prototype.customSplitLayout = function (line, font, rtl, wordSpace, format) {\n        if (line == null) {\n            throw new Error('ArgumentNullException : line');\n        }\n        if (font == null) {\n            throw new Error('ArgumentNullException : font');\n        }\n        var reversedLine = this.customLayout(line, rtl, format);\n        var words = reversedLine.split('');\n        return words;\n    };\n    return RtlRenderer;\n}());\nexport { RtlRenderer };\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,+BAA1B;AACA,SAASC,mBAAT,QAAoC,sBAApC;AACA,SAASC,gBAAT,QAAiC,WAAjC;AACA,SAASC,IAAT,QAAqB,yBAArB;AACA;AACA;AACA;AACA;;AACA,IAAIC,WAAW;AAAG;AAAe,YAAY;EACzC,SAASA,WAAT,GAAuB;IACnB;IACA;IACA;IACA,KAAKC,WAAL,GAAmB,GAAnB,CAJmB,CAKnB;IACA;IACA;;IACA,KAAKC,YAAL,GAAoB,GAApB,CARmB,CASnB;EACH,CAXwC,CAYzC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACAF,WAAW,CAACG,SAAZ,CAAsBC,MAAtB,GAA+B,UAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,GAAtB,EAA2BC,SAA3B,EAAsCC,MAAtC,EAA8C;IACzE,IAAIJ,IAAI,IAAI,IAAZ,EAAkB;MACd,MAAM,IAAIK,KAAJ,CAAU,8BAAV,CAAN;IACH;;IACD,IAAIJ,IAAI,IAAI,IAAZ,EAAkB;MACd,MAAM,IAAII,KAAJ,CAAU,8BAAV,CAAN;IACH;;IACD,IAAIC,MAAM,GAAG,EAAb;;IACA,IAAIL,IAAI,CAACM,OAAT,EAAkB;MACdD,MAAM,GAAG,KAAKE,YAAL,CAAkBR,IAAlB,EAAwBE,GAAxB,EAA6BE,MAA7B,EAAqCH,IAArC,EAA2CE,SAA3C,CAAT;IACH,CAFD,MAGK;MACDG,MAAM,GAAG,EAAT;MACAA,MAAM,CAAC,CAAD,CAAN,GAAYN,IAAZ;IACH;;IACD,OAAOM,MAAP;EACH,CAhBD,CA5ByC,CA6CzC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACAX,WAAW,CAACG,SAAZ,CAAsBW,WAAtB,GAAoC,UAAUT,IAAV,EAAgBC,IAAhB,EAAsBC,GAAtB,EAA2BC,SAA3B,EAAsCC,MAAtC,EAA8C;IAC9E,IAAIJ,IAAI,IAAI,IAAZ,EAAkB;MACd,MAAM,IAAIK,KAAJ,CAAU,8BAAV,CAAN;IACH;;IACD,IAAIJ,IAAI,IAAI,IAAZ,EAAkB;MACd,MAAM,IAAII,KAAJ,CAAU,8BAAV,CAAN;IACH;;IACD,IAAIK,KAAK,GAAG,EAAZ;IACA,IAAIC,MAAM,GAAG,KAAb;;IACA,IAAI,CAACA,MAAD,IAAWD,KAAK,IAAI,IAAxB,EAA8B;MAC1BA,KAAK,GAAG,KAAKE,iBAAL,CAAuBZ,IAAvB,EAA6BC,IAA7B,EAAmCC,GAAnC,EAAwCC,SAAxC,EAAmDC,MAAnD,CAAR;IACH;;IACD,OAAOM,KAAP;EACH,CAbD,CArDyC,CAmEzC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA;;;EACAf,WAAW,CAACG,SAAZ,CAAsBe,aAAtB,GAAsC,UAAUb,IAAV,EAAgBC,IAAhB,EAAsBC,GAAtB;EAA2B;EAAQY,MAAnC,EAA2CC,MAA3C,EAAmD;IACrF,IAAIC,OAAO,GAAG,IAAd;IACA,IAAIC,IAAI,GAAG,KAAX;;IACA,IAAIjB,IAAI,IAAI,IAAZ,EAAkB;MACd,MAAM,IAAIK,KAAJ,CAAU,8BAAV,CAAN;IACH;;IACD,IAAIJ,IAAI,IAAI,IAAZ,EAAkB;MACd,MAAM,IAAII,KAAJ,CAAU,8BAAV,CAAN;IACH;;IACDS,MAAM,GAAG,IAAT;;IACA,IAAId,IAAI,CAACkB,MAAL,KAAgB,CAApB,EAAuB;MACnB,OAAO;QAAEF,OAAO,EAAEC,IAAX;QAAiBH,MAAM,EAAEA;MAAzB,CAAP;IACH;;IACD,IAAIK,QAAQ,GAAG,IAAI3B,mBAAJ,EAAf;IACA,IAAI4B,IAAI,GAAGD,QAAQ,CAACE,KAAT,CAAerB,IAAf,EAAqB,CAArB,CAAX;IACA,IAAIsB,YAAY,GAAGrB,IAAI,CAACsB,YAAxB;IACA,IAAIC,SAAS,GAAGF,YAAY,CAACE,SAA7B;IACAV,MAAM,GAAG,IAAIW,WAAJ,CAAgBL,IAAI,CAACF,MAArB,CAAT;IACA,IAAIQ,CAAC,GAAG,CAAR;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGR,IAAI,CAACF,MAA3B,EAAmCS,CAAC,GAAGC,GAAvC,EAA4CD,CAAC,EAA7C,EAAiD;MAC7C,IAAIE,EAAE,GAAGT,IAAI,CAACO,CAAD,CAAb;MACA,IAAIG,SAAS,GAAGN,SAAS,CAACO,QAAV,CAAmBF,EAAnB,CAAhB;;MACA,IAAIC,SAAS,KAAK,IAAd,IAAsB,OAAOA,SAAP,KAAqB,WAA/C,EAA4D;QACxDhB,MAAM,CAACY,CAAC,EAAF,CAAN,GAAeI,SAAD,CAAYE,KAA1B;MACH;IACJ;;IACD,OAAO;MAAEhB,OAAO,EAAEA,OAAX;MAAoBF,MAAM,EAAEA;IAA5B,CAAP;EACH,CA3BD;EA4BA;;;EACAnB,WAAW,CAACG,SAAZ,CAAsBU,YAAtB,GAAqC,UAAUR,IAAV,EAAgBE,GAAhB,EAAqBE,MAArB,EAA6BH,IAA7B,EAAmCE,SAAnC,EAA8C;IAC/E,IAAIA,SAAS,KAAK,IAAd,IAAsB,OAAOA,SAAP,KAAqB,WAA/C,EAA4D;MACxD,IAAIH,IAAI,IAAI,IAAZ,EAAkB;QACd,MAAM,IAAIK,KAAJ,CAAU,8BAAV,CAAN;MACH;;MACD,IAAIC,MAAM,GAAG,IAAb,CAJwD,CAKxD;;MACA,IAAIF,MAAM,KAAK,IAAX,IAAmB,OAAOA,MAAP,KAAkB,WAArC,IAAoDA,MAAM,CAAC6B,aAAP,KAAyBxC,gBAAgB,CAACyC,IAAlG,EAAwG;QACpG,IAAIC,IAAI,GAAG,IAAIzC,IAAJ,EAAX;QACAY,MAAM,GAAG6B,IAAI,CAACC,wBAAL,CAA8BpC,IAA9B,EAAoCE,GAApC,CAAT;MACH;;MACD,OAAOI,MAAP;IACH,CAXD,MAYK;MACD,IAAIN,IAAI,IAAI,IAAZ,EAAkB;QACd,MAAM,IAAIK,KAAJ,CAAU,8BAAV,CAAN;MACH;;MACD,IAAIJ,IAAI,IAAI,IAAZ,EAAkB;QACd,MAAM,IAAII,KAAJ,CAAU,8BAAV,CAAN;MACH;;MACD,IAAIgC,QAAQ,GAAG,IAAf;;MACA,IAAIjC,MAAM,KAAK,IAAX,IAAmB,OAAOA,MAAP,KAAkB,WAArC,IAAoDA,MAAM,CAAC6B,aAAP,KAAyBxC,gBAAgB,CAACyC,IAAlG,EAAwG;QACpG,IAAIf,QAAQ,GAAG,IAAI3B,mBAAJ,EAAf;QACA,IAAI8C,GAAG,GAAGnB,QAAQ,CAACE,KAAT,CAAerB,IAAf,EAAqB,CAArB,CAAV;QACAqC,QAAQ,GAAG,KAAK7B,YAAL,CAAkB8B,GAAlB,EAAuBpC,GAAvB,EAA4BE,MAA5B,CAAX;MACH,CAZA,CAaD;MACA;MACA;MACA;;;MACA,IAAIE,MAAM,GAAG,EAAb,CAjBC,CAkBD;;MACA,IAAIH,SAAJ,EAAe;QACX,IAAIO,KAAK,GAAG2B,QAAQ,CAACE,KAAT,CAAe,EAAf,CAAZ;QACA,IAAIC,KAAK,GAAG9B,KAAK,CAACQ,MAAlB;;QACA,KAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGc,KAApB,EAA2Bd,CAAC,EAA5B,EAAgC;UAC5BhB,KAAK,CAACgB,CAAD,CAAL,GAAW,KAAKe,QAAL,CAAcxC,IAAd,EAAoBS,KAAK,CAACgB,CAAD,CAAzB,CAAX;QACH;;QACDpB,MAAM,GAAGI,KAAT;MACH,CAPD,MAQK;QACDJ,MAAM,GAAG,EAAT;QACAA,MAAM,CAAC,CAAD,CAAN,GAAY,KAAKmC,QAAL,CAAcxC,IAAd,EAAoBoC,QAApB,CAAZ;MACH;;MACD,OAAO/B,MAAP;IACH;EACJ,CA9CD,CArHyC,CAoKzC;EACA;EACA;EACA;EACA;EACA;;;EACAX,WAAW,CAACG,SAAZ,CAAsB2C,QAAtB,GAAiC,UAAUxC,IAAV,EAAgBa,MAAhB,EAAwB;IACrD,IAAId,IAAI,GAAGc,MAAX;;IACA,IAAIb,IAAI,IAAI,IAAZ,EAAkB;MACd,MAAM,IAAII,KAAJ,CAAU,8BAAV,CAAN;IACH;;IACD,IAAIL,IAAI,IAAI,IAAZ,EAAkB;MACd,MAAM,IAAIK,KAAJ,CAAU,8BAAV,CAAN;IACH;;IACD,IAAIe,IAAI,GAAGpB,IAAX;IACA,IAAIsB,YAAY,GAAGrB,IAAI,CAACsB,YAAxB;IACA,IAAIC,SAAS,GAAGF,YAAY,CAACE,SAA7B;IACAvB,IAAI,CAACyC,UAAL,CAAgBtB,IAAhB,EAXqD,CAYrD;;IACAA,IAAI,GAAGI,SAAS,CAACmB,aAAV,CAAwBvB,IAAxB,CAAP;IACA,IAAIwB,KAAK,GAAGrD,SAAS,CAACsD,cAAV,CAAyBzB,IAAzB,EAA+B,KAA/B,CAAZ;IACAA,IAAI,GAAG7B,SAAS,CAACuD,YAAV,CAAuBF,KAAvB,CAAP;IACA,OAAOxB,IAAP,CAhBqD,CAiBrD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACH,CAxCD,CA1KyC,CAmNzC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA;;;EACAzB,WAAW,CAACG,SAAZ,CAAsBc,iBAAtB,GAA0C,UAAUZ,IAAV,EAAgBC,IAAhB,EAAsBC,GAAtB,EAA2BC,SAA3B,EAAsCC,MAAtC,EAA8C;IACpF,IAAIJ,IAAI,IAAI,IAAZ,EAAkB;MACd,MAAM,IAAIK,KAAJ,CAAU,8BAAV,CAAN;IACH;;IACD,IAAIJ,IAAI,IAAI,IAAZ,EAAkB;MACd,MAAM,IAAII,KAAJ,CAAU,8BAAV,CAAN;IACH;;IACD,IAAI0C,YAAY,GAAG,KAAKvC,YAAL,CAAkBR,IAAlB,EAAwBE,GAAxB,EAA6BE,MAA7B,CAAnB;IACA,IAAIM,KAAK,GAAGqC,YAAY,CAACR,KAAb,CAAmB,EAAnB,CAAZ;IACA,OAAO7B,KAAP;EACH,CAVD;;EAWA,OAAOf,WAAP;AACH,CAxOgC,EAAjC;;AAyOA,SAASA,WAAT"},"metadata":{},"sourceType":"module"}