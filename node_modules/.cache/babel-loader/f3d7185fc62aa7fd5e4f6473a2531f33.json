{"ast":null,"code":"/**\n * TtfReader.ts class for EJ2-PDF\n */\nimport { TtfTableInfo } from './ttf-table-info';\nimport { Dictionary } from './../../collections/dictionary';\nimport { TtfNameTable } from './ttf-name-table';\nimport { TtfNameRecord } from './ttf-name-record';\nimport { TtfHeadTable } from './ttf-head-table';\nimport { TtfMetrics } from './ttf-metrics';\nimport { TtfHorizontalHeaderTable } from './ttf-horizontal-header-table';\nimport { TtfOS2Table } from './ttf-OS2-Table';\nimport { TtfPostTable } from './ttf-post-table';\nimport { TtfLongHorMetric } from './ttf-long-hor-metric';\nimport { TtfCmapSubTable } from './ttf-cmap-sub-table';\nimport { TtfCmapTable } from './ttf-cmap-table';\nimport { TtfGlyphInfo } from './ttf-glyph-info';\nimport { TtfLocaTable } from './ttf-loca-table';\nimport { TtfAppleCmapSubTable } from './ttf-apple-cmap-sub-table';\nimport { TtfMicrosoftCmapSubTable } from './ttf-microsoft-cmap-sub-table';\nimport { TtfTrimmedCmapSubTable } from './ttf-trimmed-cmap-sub-table';\nimport { TtfGlyphHeader } from './ttf-glyph-header';\nimport { Rectangle } from './../../drawing/pdf-drawing';\nimport { StringTokenizer } from './string-tokenizer';\nimport { TtfCmapFormat, TtfCmapEncoding, TtfPlatformID } from './enum';\nimport { TtfMicrosoftEncodingID, TtfMacintoshEncodingID, TtfCompositeGlyphFlags } from './enum';\nimport { BigEndianWriter } from './../../input-output/big-endian-writer';\n\nvar TtfReader =\n/** @class */\nfunction () {\n  //Constructors\n  function TtfReader(fontData) {\n    this.int32Size = 4;\n    this.isTtcFont = false;\n    this.isMacTtf = false;\n    this.metricsName = '';\n    this.isMacTTF = false;\n    this.missedGlyphs = 0;\n    this.tableNames = ['cvt ', 'fpgm', 'glyf', 'head', 'hhea', 'hmtx', 'loca', 'maxp', 'prep'];\n    this.entrySelectors = [0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4];\n    this.fontData = fontData;\n    this.initialize();\n  }\n\n  Object.defineProperty(TtfReader.prototype, \"macintosh\", {\n    //Properties\n\n    /**\n     * Gets glyphs for Macintosh or Symbol fonts (char - key, glyph - value).\n     */\n    get: function () {\n      if (this.macintoshDictionary === null || this.macintoshDictionary === undefined) {\n        this.macintoshDictionary = new Dictionary();\n      }\n\n      return this.macintoshDictionary;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TtfReader.prototype, \"microsoft\", {\n    /**\n     * Gets glyphs for Microsoft or Symbol fonts (char - key, glyph - value).\n     */\n    get: function () {\n      if (this.microsoftDictionary === null || this.microsoftDictionary === undefined) {\n        this.microsoftDictionary = new Dictionary();\n      }\n\n      return this.microsoftDictionary;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TtfReader.prototype, \"macintoshGlyphs\", {\n    /**\n     * Gets glyphs for Macintosh or Symbol fonts (glyph index - key, glyph - value).\n     */\n    get: function () {\n      if (this.internalMacintoshGlyphs === null || this.internalMacintoshGlyphs === undefined) {\n        this.internalMacintoshGlyphs = new Dictionary();\n      }\n\n      return this.internalMacintoshGlyphs;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TtfReader.prototype, \"microsoftGlyphs\", {\n    /**\n     * Gets glyphs for Microsoft Unicode fonts (glyph index - key, glyph - value).\n     */\n    get: function () {\n      if (this.internalMicrosoftGlyphs === null || this.internalMicrosoftGlyphs === undefined) {\n        this.internalMicrosoftGlyphs = new Dictionary();\n      }\n\n      return this.internalMicrosoftGlyphs;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Implementation\n\n  TtfReader.prototype.initialize = function () {\n    if (this.metrics === undefined) {\n      this.metrics = new TtfMetrics();\n    }\n\n    this.readFontDictionary();\n    var nameTable = this.readNameTable();\n    var headTable = this.readHeadTable();\n    this.initializeFontName(nameTable);\n    this.metrics.macStyle = headTable.macStyle;\n  };\n\n  TtfReader.prototype.readFontDictionary = function () {\n    this.offset = 0;\n    var version = this.checkPreambula(); //this.offset += 4;\n\n    var numTables = this.readInt16(this.offset);\n    var searchRange = this.readInt16(this.offset);\n    var entrySelector = this.readInt16(this.offset);\n    var rangeShift = this.readInt16(this.offset);\n\n    if (this.tableDirectory === undefined) {\n      this.tableDirectory = new Dictionary();\n    }\n\n    for (var i = 0; i < numTables; ++i) {\n      var table = new TtfTableInfo();\n      var tableKey = this.readString(this.int32Size);\n      table.checksum = this.readInt32(this.offset);\n      table.offset = this.readInt32(this.offset);\n      table.length = this.readInt32(this.offset);\n      this.tableDirectory.setValue(tableKey, table);\n    }\n\n    this.lowestPosition = this.offset;\n\n    if (!this.isTtcFont) {\n      this.fixOffsets();\n    }\n  };\n\n  TtfReader.prototype.fixOffsets = function () {\n    var minOffset = Number.MAX_VALUE; // Search for a smallest offset and compare it with the lowest position found.\n\n    var tableKeys = this.tableDirectory.keys();\n\n    for (var i = 0; i < tableKeys.length; i++) {\n      var value = this.tableDirectory.getValue(tableKeys[i]);\n      var offset = value.offset;\n\n      if (minOffset > offset) {\n        minOffset = offset;\n\n        if (minOffset <= this.lowestPosition) {\n          break;\n        }\n      }\n    }\n\n    var shift = minOffset - this.lowestPosition;\n\n    if (shift !== 0) {\n      var table = new Dictionary();\n\n      for (var i = 0; i < tableKeys.length; i++) {\n        var value = this.tableDirectory.getValue(tableKeys[i]);\n        value.offset -= shift;\n        table.setValue(tableKeys[i], value);\n      }\n\n      this.tableDirectory = table;\n    }\n  };\n\n  TtfReader.prototype.checkPreambula = function () {\n    var version = this.readInt32(this.offset);\n    this.isMacTtf = version === 0x74727565 ? true : false;\n\n    if (version !== 0x10000 && version !== 0x74727565 && version !== 0x4f54544f) {\n      this.isTtcFont = true;\n      this.offset = 0;\n      var fontTag = this.readString(4);\n\n      if (fontTag !== 'ttcf') {\n        throw new Error('Can not read TTF font data');\n      } //skip 4\n\n\n      this.offset += 4;\n      var ttcIdentificationNumber = this.readInt32(this.offset);\n\n      if (ttcIdentificationNumber < 0) {\n        throw new Error('Can not read TTF font data');\n      }\n\n      this.offset = this.readInt32(this.offset);\n      version = this.readInt32(this.offset);\n    }\n\n    return version;\n  };\n\n  TtfReader.prototype.readNameTable = function () {\n    var tableInfo = this.getTable('name');\n    this.offset = tableInfo.offset;\n    var table = new TtfNameTable();\n    table.formatSelector = this.readUInt16(this.offset);\n    table.recordsCount = this.readUInt16(this.offset);\n    table.offset = this.readUInt16(this.offset);\n    table.nameRecords = [];\n    var recordSize = 12;\n    var position = this.offset;\n\n    for (var i = 0; i < table.recordsCount; i++) {\n      this.offset = position;\n      var record = new TtfNameRecord();\n      record.platformID = this.readUInt16(this.offset);\n      record.encodingID = this.readUInt16(this.offset);\n      record.languageID = this.readUInt16(this.offset);\n      record.nameID = this.readUInt16(this.offset);\n      record.length = this.readUInt16(this.offset);\n      record.offset = this.readUInt16(this.offset);\n      this.offset = tableInfo.offset + table.offset + record.offset;\n      var unicode = record.platformID === 0 || record.platformID === 3;\n      record.name = this.readString(record.length, unicode);\n      table.nameRecords[i] = record;\n      position += recordSize;\n    }\n\n    return table;\n  };\n\n  TtfReader.prototype.readHeadTable = function () {\n    var tableInfo = this.getTable('head');\n    this.offset = tableInfo.offset;\n    var table = new TtfHeadTable();\n    table.version = this.readFixed(this.offset);\n    table.fontRevision = this.readFixed(this.offset);\n    table.checkSumAdjustment = this.readUInt32(this.offset);\n    table.magicNumber = this.readUInt32(this.offset);\n    table.flags = this.readUInt16(this.offset);\n    table.unitsPerEm = this.readUInt16(this.offset);\n    table.created = this.readInt64(this.offset);\n    table.modified = this.readInt64(this.offset);\n    table.xMin = this.readInt16(this.offset);\n    table.yMin = this.readInt16(this.offset);\n    table.xMax = this.readInt16(this.offset);\n    table.yMax = this.readInt16(this.offset);\n    table.macStyle = this.readUInt16(this.offset);\n    table.lowestReadableSize = this.readUInt16(this.offset);\n    table.fontDirectionHint = this.readInt16(this.offset);\n    table.indexToLocalFormat = this.readInt16(this.offset);\n    table.glyphDataFormat = this.readInt16(this.offset);\n    return table;\n  };\n\n  TtfReader.prototype.readHorizontalHeaderTable = function () {\n    var tableInfo = this.getTable('hhea');\n    this.offset = tableInfo.offset;\n    var table = new TtfHorizontalHeaderTable();\n    table.version = this.readFixed(this.offset);\n    table.ascender = this.readInt16(this.offset);\n    table.descender = this.readInt16(this.offset);\n    table.lineGap = this.readInt16(this.offset);\n    table.advanceWidthMax = this.readUInt16(this.offset);\n    table.minLeftSideBearing = this.readInt16(this.offset);\n    table.minRightSideBearing = this.readInt16(this.offset);\n    table.xMaxExtent = this.readInt16(this.offset);\n    table.caretSlopeRise = this.readInt16(this.offset);\n    table.caretSlopeRun = this.readInt16(this.offset); //skip 2 * 5\n\n    this.offset += 10;\n    table.metricDataFormat = this.readInt16(this.offset);\n    table.numberOfHMetrics = this.readUInt16(this.offset);\n    return table;\n  };\n\n  TtfReader.prototype.readOS2Table = function () {\n    var tableInfo = this.getTable('OS/2');\n    this.offset = tableInfo.offset;\n    var table = new TtfOS2Table();\n    table.version = this.readUInt16(this.offset);\n    table.xAvgCharWidth = this.readInt16(this.offset);\n    table.usWeightClass = this.readUInt16(this.offset);\n    table.usWidthClass = this.readUInt16(this.offset);\n    table.fsType = this.readInt16(this.offset);\n    table.ySubscriptXSize = this.readInt16(this.offset);\n    table.ySubscriptYSize = this.readInt16(this.offset);\n    table.ySubscriptXOffset = this.readInt16(this.offset);\n    table.ySubscriptYOffset = this.readInt16(this.offset);\n    table.ySuperscriptXSize = this.readInt16(this.offset);\n    table.ySuperscriptYSize = this.readInt16(this.offset);\n    table.ySuperscriptXOffset = this.readInt16(this.offset);\n    table.ySuperscriptYOffset = this.readInt16(this.offset);\n    table.yStrikeoutSize = this.readInt16(this.offset);\n    table.yStrikeoutPosition = this.readInt16(this.offset);\n    table.sFamilyClass = this.readInt16(this.offset);\n    table.panose = this.readBytes(10);\n    table.ulUnicodeRange1 = this.readUInt32(this.offset);\n    table.ulUnicodeRange2 = this.readUInt32(this.offset);\n    table.ulUnicodeRange3 = this.readUInt32(this.offset);\n    table.ulUnicodeRange4 = this.readUInt32(this.offset);\n    table.vendorIdentifier = this.readBytes(4);\n    table.fsSelection = this.readUInt16(this.offset);\n    table.usFirstCharIndex = this.readUInt16(this.offset);\n    table.usLastCharIndex = this.readUInt16(this.offset);\n    table.sTypoAscender = this.readInt16(this.offset);\n    table.sTypoDescender = this.readInt16(this.offset);\n    table.sTypoLineGap = this.readInt16(this.offset);\n    table.usWinAscent = this.readUInt16(this.offset);\n    table.usWinDescent = this.readUInt16(this.offset);\n    table.ulCodePageRange1 = this.readUInt32(this.offset);\n    table.ulCodePageRange2 = this.readUInt32(this.offset);\n\n    if (table.version > 1) {\n      table.sxHeight = this.readInt16(this.offset);\n      table.sCapHeight = this.readInt16(this.offset);\n      table.usDefaultChar = this.readUInt16(this.offset);\n      table.usBreakChar = this.readUInt16(this.offset);\n      table.usMaxContext = this.readUInt16(this.offset);\n    } else {\n      table.sxHeight = 0;\n      table.sCapHeight = 0;\n      table.usDefaultChar = 0;\n      table.usBreakChar = 0;\n      table.usMaxContext = 0;\n    }\n\n    return table;\n  };\n\n  TtfReader.prototype.readPostTable = function () {\n    var tableInfo = this.getTable('post');\n    this.offset = tableInfo.offset;\n    var table = new TtfPostTable();\n    table.formatType = this.readFixed(this.offset);\n    table.italicAngle = this.readFixed(this.offset);\n    table.underlinePosition = this.readInt16(this.offset);\n    table.underlineThickness = this.readInt16(this.offset);\n    table.isFixedPitch = this.readUInt32(this.offset);\n    table.minType42 = this.readUInt32(this.offset);\n    table.maxType42 = this.readUInt32(this.offset);\n    table.minType1 = this.readUInt32(this.offset);\n    table.maxType1 = this.readUInt32(this.offset);\n    return table;\n  };\n  /**\n   * Reads Width of the glyphs.\n   */\n\n\n  TtfReader.prototype.readWidthTable = function (glyphCount, unitsPerEm) {\n    var tableInfo = this.getTable('hmtx');\n    this.offset = tableInfo.offset;\n    var width = [];\n\n    for (var i = 0; i < glyphCount; i++) {\n      var glyph = new TtfLongHorMetric();\n      glyph.advanceWidth = this.readUInt16(this.offset);\n      glyph.lsb = this.readInt16(this.offset);\n      var glyphWidth = glyph.advanceWidth * 1000 / unitsPerEm;\n      width.push(Math.floor(glyphWidth));\n    }\n\n    return width;\n  };\n  /**\n   * Reads the cmap table.\n   */\n\n\n  TtfReader.prototype.readCmapTable = function () {\n    var tableInfo = this.getTable('cmap');\n    this.offset = tableInfo.offset;\n    var table = new TtfCmapTable();\n    table.version = this.readUInt16(this.offset);\n    table.tablesCount = this.readUInt16(this.offset);\n    var position = this.offset;\n    var subTables = [];\n\n    for (var i = 0; i < table.tablesCount; i++) {\n      this.offset = position;\n      var subTable = new TtfCmapSubTable();\n      subTable.platformID = this.readUInt16(this.offset);\n      subTable.encodingID = this.readUInt16(this.offset);\n      subTable.offset = this.readUInt32(this.offset);\n      position = this.offset;\n      this.readCmapSubTable(subTable);\n      subTables[i] = subTable;\n    }\n\n    return subTables;\n  };\n  /**\n   * Reads the cmap sub table.\n   */\n\n\n  TtfReader.prototype.readCmapSubTable = function (subTable) {\n    var tableInfo = this.getTable('cmap');\n    this.offset = tableInfo.offset + subTable.offset;\n    var format = this.readUInt16(this.offset);\n    var encoding = this.getCmapEncoding(subTable.platformID, subTable.encodingID);\n    var platform = encoding === TtfCmapEncoding.Macintosh ? TtfPlatformID.Macintosh : TtfPlatformID.Microsoft;\n\n    if (encoding !== TtfCmapEncoding.Unknown) {\n      switch (format) {\n        case TtfCmapFormat.Apple:\n          this.readAppleCmapTable(subTable, encoding);\n          break;\n\n        case TtfCmapFormat.Microsoft:\n          this.readMicrosoftCmapTable(subTable, encoding);\n          break;\n\n        case TtfCmapFormat.Trimmed:\n          this.readTrimmedCmapTable(subTable, encoding);\n          break;\n      }\n    }\n  };\n  /**\n   * Reads Symbol cmap table.\n   */\n\n\n  TtfReader.prototype.readAppleCmapTable = function (subTable, encoding) {\n    var tableInfo = this.getTable('cmap');\n    this.offset = tableInfo.offset + subTable.offset;\n    var table = new TtfAppleCmapSubTable();\n    table.format = this.readUInt16(this.offset);\n    table.length = this.readUInt16(this.offset);\n    table.version = this.readUInt16(this.offset);\n\n    if (this.maxMacIndex === null || this.maxMacIndex === undefined) {\n      this.maxMacIndex = 0;\n    }\n\n    for (var i = 0; i < 256; ++i) {\n      var glyphInfo = new TtfGlyphInfo();\n      glyphInfo.index = this.readByte(this.offset);\n      glyphInfo.width = this.getWidth(glyphInfo.index);\n      glyphInfo.charCode = i;\n      this.macintosh.setValue(i, glyphInfo);\n      this.addGlyph(glyphInfo, encoding); // NOTE: this code fixes char codes that extends 0x100. However, it might corrupt something.\n\n      this.maxMacIndex = Math.max(i, this.maxMacIndex);\n    }\n  };\n  /**\n   * Reads Symbol cmap table.\n   */\n\n\n  TtfReader.prototype.readMicrosoftCmapTable = function (subTable, encoding) {\n    var tableInfo = this.getTable('cmap');\n    this.offset = tableInfo.offset + subTable.offset;\n    var collection = encoding === TtfCmapEncoding.Unicode ? this.microsoft : this.macintosh;\n    var table = new TtfMicrosoftCmapSubTable();\n    table.format = this.readUInt16(this.offset);\n    table.length = this.readUInt16(this.offset);\n    table.version = this.readUInt16(this.offset);\n    table.segCountX2 = this.readUInt16(this.offset);\n    table.searchRange = this.readUInt16(this.offset);\n    table.entrySelector = this.readUInt16(this.offset);\n    table.rangeShift = this.readUInt16(this.offset);\n    var segCount = table.segCountX2 / 2;\n    table.endCount = this.readUshortArray(segCount);\n    table.reservedPad = this.readUInt16(this.offset);\n    table.startCount = this.readUshortArray(segCount);\n    table.idDelta = this.readUshortArray(segCount);\n    table.idRangeOffset = this.readUshortArray(segCount);\n    var length = table.length / 2 - 8 - segCount * 4;\n    table.glyphID = this.readUshortArray(length); // Process glyphIdArray array.\n\n    var codeOffset = 0;\n    var index = 0;\n\n    for (var j = 0; j < segCount; j++) {\n      for (var k = table.startCount[j]; k <= table.endCount[j] && k !== 65535; k++) {\n        if (table.idRangeOffset[j] === 0) {\n          codeOffset = k + table.idDelta[j] & 65535;\n        } else {\n          index = j + table.idRangeOffset[j] / 2 - segCount + k - table.startCount[j];\n\n          if (index >= table.glyphID.length) {\n            continue;\n          }\n\n          codeOffset = table.glyphID[index] + table.idDelta[j] & 65535;\n        }\n\n        var glyph = new TtfGlyphInfo();\n        glyph.index = codeOffset;\n        glyph.width = this.getWidth(glyph.index);\n        var id = encoding === TtfCmapEncoding.Symbol ? (k & 0xff00) === 0xf000 ? k & 0xff : k : k;\n        glyph.charCode = id;\n        collection.setValue(id, glyph);\n        this.addGlyph(glyph, encoding);\n      }\n    }\n  };\n  /**\n   * Reads Trimed cmap table.\n   */\n\n\n  TtfReader.prototype.readTrimmedCmapTable = function (subTable, encoding) {\n    var tableInfo = this.getTable('cmap');\n    this.offset = tableInfo.offset + subTable.offset;\n    var table = new TtfTrimmedCmapSubTable();\n    table.format = this.readUInt16(this.offset);\n    table.length = this.readUInt16(this.offset);\n    table.version = this.readUInt16(this.offset);\n    table.firstCode = this.readUInt16(this.offset);\n    table.entryCount = this.readUInt16(this.offset);\n\n    for (var i = 0; i < table.entryCount; ++i) {\n      var glyphInfo = new TtfGlyphInfo();\n      glyphInfo.index = this.readUInt16(this.offset);\n      glyphInfo.width = this.getWidth(glyphInfo.index);\n      glyphInfo.charCode = i + table.firstCode;\n      this.macintosh.setValue(i, glyphInfo);\n      this.addGlyph(glyphInfo, encoding); // NOTE: this code fixes char codes that extends 0x100. However, it might corrupt something.\n\n      this.maxMacIndex = Math.max(i, this.maxMacIndex);\n    }\n  };\n\n  TtfReader.prototype.initializeFontName = function (nameTable) {\n    for (var i = 0; i < nameTable.recordsCount; i++) {\n      var record = nameTable.nameRecords[i];\n\n      if (record.nameID === 1) {\n        //font family\n        this.metrics.fontFamily = record.name;\n      } else if (record.nameID === 6) {\n        //post script name\n        this.metrics.postScriptName = record.name;\n      }\n      /* tslint:disable */\n\n\n      if (this.metrics.fontFamily !== null && this.metrics.fontFamily !== undefined && this.metrics.postScriptName !== null && this.metrics.postScriptName !== undefined) {\n        break;\n      }\n      /* tslint:disable */\n\n    }\n  };\n\n  TtfReader.prototype.getTable = function (name) {\n    // if (name === null) {\n    //     throw new Error('Argument Null Exception : name');\n    // }\n    var table = new TtfTableInfo();\n    var obj;\n\n    if (this.tableDirectory.containsKey(name)) {\n      obj = this.tableDirectory.getValue(name);\n    }\n\n    if (obj !== null && obj !== undefined) {\n      table = obj;\n    }\n\n    return table;\n  };\n  /**\n   * Returns width of the glyph.\n   */\n\n\n  TtfReader.prototype.getWidth = function (glyphCode) {\n    glyphCode = glyphCode < this.width.length ? glyphCode : this.width.length - 1;\n    return this.width[glyphCode];\n  };\n  /**\n   * Gets CMAP encoding based on platform ID and encoding ID.\n   */\n\n  /* tslint:disable */\n\n\n  TtfReader.prototype.getCmapEncoding = function (platformID, encodingID) {\n    var format = TtfCmapEncoding.Unknown;\n\n    if (platformID == TtfPlatformID.Microsoft && encodingID == TtfMicrosoftEncodingID.Undefined) {\n      // When building a symbol font for Windows,\n      // the platform ID should be 3 and the encoding ID should be 0.\n      format = TtfCmapEncoding.Symbol;\n    } else if (platformID == TtfPlatformID.Microsoft && encodingID == TtfMicrosoftEncodingID.Unicode) {\n      // When building a Unicode font for Windows,\n      // the platform ID should be 3 and the encoding ID should be 1.\n      format = TtfCmapEncoding.Unicode;\n    } else if (platformID == TtfPlatformID.Macintosh && encodingID == TtfMacintoshEncodingID.Roman) {\n      // When building a font that will be used on the Macintosh,\n      // the platform ID should be 1 and the encoding ID should be 0.\n      format = TtfCmapEncoding.Macintosh;\n    }\n\n    return format;\n  };\n  /* tslint:enable */\n\n  /**\n   * Adds glyph to the collection.\n   */\n\n\n  TtfReader.prototype.addGlyph = function (glyph, encoding) {\n    var collection = null;\n\n    switch (encoding) {\n      case TtfCmapEncoding.Unicode:\n        collection = this.microsoftGlyphs;\n        break;\n\n      case TtfCmapEncoding.Macintosh:\n      case TtfCmapEncoding.Symbol:\n        collection = this.macintoshGlyphs;\n        break;\n    }\n\n    collection.setValue(glyph.index, glyph);\n  };\n  /**\n   * Initializes metrics.\n   */\n\n  /* tslint:disable */\n\n\n  TtfReader.prototype.initializeMetrics = function (nameTable, headTable, horizontalHeadTable, os2Table, postTable, cmapTables) {\n    /* tslint:enable */\n    // if (cmapTables === null) {\n    //     throw new Error('ArgumentNullException : cmapTables');\n    // }\n    this.initializeFontName(nameTable); // Get font encoding.\n\n    var bSymbol = false;\n\n    for (var i = 0; i < cmapTables.length; i++) {\n      var subTable = cmapTables[i];\n      var encoding = this.getCmapEncoding(subTable.platformID, subTable.encodingID);\n\n      if (encoding === TtfCmapEncoding.Symbol) {\n        bSymbol = true;\n        break;\n      }\n    }\n\n    this.metrics.isSymbol = bSymbol;\n    this.metrics.macStyle = headTable.macStyle;\n    this.metrics.isFixedPitch = postTable.isFixedPitch !== 0;\n    this.metrics.italicAngle = postTable.italicAngle;\n    var factor = 1000 / headTable.unitsPerEm;\n    this.metrics.winAscent = os2Table.sTypoAscender * factor;\n    this.metrics.macAscent = horizontalHeadTable.ascender * factor; //m_metrics.MacAscent = os2Table.UsWinAscent * factor;\n    // NOTE: This is stange workaround. The value is good if os2Table.SCapHeight != 0, otherwise it should be properly computed.\n\n    this.metrics.capHeight = os2Table.sCapHeight !== 0 ? os2Table.sCapHeight : 0.7 * headTable.unitsPerEm * factor;\n    this.metrics.winDescent = os2Table.sTypoDescender * factor;\n    this.metrics.macDescent = horizontalHeadTable.descender * factor; //m_metrics.MacDescent = -os2Table.UsWinDescent * factor;\n\n    this.metrics.leading = (os2Table.sTypoAscender - os2Table.sTypoDescender + os2Table.sTypoLineGap) * factor;\n    this.metrics.lineGap = Math.ceil(horizontalHeadTable.lineGap * factor);\n    var left = headTable.xMin * factor;\n    var top = Math.ceil(this.metrics.macAscent + this.metrics.lineGap);\n    var right = headTable.xMax * factor;\n    var bottom = this.metrics.macDescent;\n    this.metrics.fontBox = new Rectangle(left, top, right, bottom); // NOTE: Strange!\n\n    this.metrics.stemV = 80;\n    this.metrics.widthTable = this.updateWidth();\n    this.metrics.contains = this.tableDirectory.containsKey('CFF');\n    this.metrics.subScriptSizeFactor = headTable.unitsPerEm / os2Table.ySubscriptYSize;\n    this.metrics.superscriptSizeFactor = headTable.unitsPerEm / os2Table.ySuperscriptYSize;\n  };\n  /**\n   * Updates chars structure which is used in the case of ansi encoding (256 bytes).\n   */\n\n\n  TtfReader.prototype.updateWidth = function () {\n    var count = 256;\n    var bytes = [];\n\n    if (this.metrics.isSymbol) {\n      for (var i = 0; i < count; i++) {\n        var glyphInfo = this.getGlyph(String.fromCharCode(i));\n        bytes[i] = glyphInfo.empty ? 0 : glyphInfo.width;\n      }\n    } else {\n      var byteToProcess = [];\n      var unknown = '?';\n      var space = String.fromCharCode(32);\n\n      for (var i = 0; i < count; i++) {\n        byteToProcess[0] = i;\n        var text = this.getString(byteToProcess, 0, byteToProcess.length);\n        var ch = text.length > 0 ? text[0] : unknown;\n        var glyphInfo = this.getGlyph(ch);\n\n        if (!glyphInfo.empty) {\n          bytes[i] = glyphInfo.width;\n        } else {\n          glyphInfo = this.getGlyph(space);\n          bytes[i] = glyphInfo.empty ? 0 : glyphInfo.width;\n        }\n      }\n    }\n\n    return bytes;\n  };\n  /**\n   * Returns default glyph.\n   */\n\n\n  TtfReader.prototype.getDefaultGlyph = function () {\n    var glyph = this.getGlyph(StringTokenizer.whiteSpace);\n    return glyph;\n  };\n  /**\n   * Reads unicode string from byte array.\n   */\n\n\n  TtfReader.prototype.getString = function (byteToProcess, start, length) {\n    var result = '';\n\n    for (var index = 0; index < length; index++) {\n      result += String.fromCharCode(byteToProcess[index + start]);\n    }\n\n    return result;\n  };\n  /**\n   * Reads loca table.\n   */\n\n\n  TtfReader.prototype.readLocaTable = function (bShort) {\n    var tableInfo = this.getTable('loca');\n    this.offset = tableInfo.offset;\n    var table = new TtfLocaTable();\n    var buffer = null;\n\n    if (bShort) {\n      var len = tableInfo.length / 2;\n      buffer = [];\n\n      for (var i = 0; i < len; i++) {\n        buffer[i] = this.readUInt16(this.offset) * 2;\n      }\n    } else {\n      var len = tableInfo.length / 4;\n      buffer = [];\n\n      for (var i = 0; i < len; i++) {\n        buffer[i] = this.readUInt32(this.offset);\n      }\n    }\n\n    table.offsets = buffer;\n    return table;\n  };\n  /**\n   * Updates hash table of used glyphs.\n   */\n\n\n  TtfReader.prototype.updateGlyphChars = function (glyphChars, locaTable) {\n    // if (glyphChars === null) {\n    //     throw new Error('Argument Null Exception : glyphChars');\n    // }\n    // Add zero key.\n    if (!glyphChars.containsKey(0)) {\n      glyphChars.setValue(0, 0);\n    }\n\n    var clone = new Dictionary();\n    var glyphCharKeys = glyphChars.keys();\n\n    for (var i = 0; i < glyphCharKeys.length; i++) {\n      clone.setValue(glyphCharKeys[i], glyphChars.getValue(glyphCharKeys[i]));\n    }\n\n    for (var i = 0; i < glyphCharKeys.length; i++) {\n      var nextKey = glyphCharKeys[i];\n      this.processCompositeGlyph(glyphChars, nextKey, locaTable);\n    }\n  };\n  /**\n   * Checks if glyph is composite or not.\n   */\n\n\n  TtfReader.prototype.processCompositeGlyph = function (glyphChars, glyph, locaTable) {\n    // if (glyphChars === null) {\n    //     throw new Error('Argument Null Exception : glyphChars');\n    // }\n    // Is in range.\n    if (glyph < locaTable.offsets.length - 1) {\n      var glyphOffset = locaTable.offsets[glyph];\n\n      if (glyphOffset !== locaTable.offsets[glyph + 1]) {\n        var tableInfo = this.getTable('glyf');\n        this.offset = tableInfo.offset + glyphOffset;\n        var glyphHeader = new TtfGlyphHeader();\n        glyphHeader.numberOfContours = this.readInt16(this.offset);\n        glyphHeader.xMin = this.readInt16(this.offset);\n        glyphHeader.yMin = this.readInt16(this.offset);\n        glyphHeader.xMax = this.readInt16(this.offset);\n        glyphHeader.yMax = this.readInt16(this.offset); // Glyph is composite.\n\n        if (glyphHeader.numberOfContours < 0) {\n          var skipBytes = 0;\n          var entry = true;\n\n          while (entry) {\n            var flags = this.readUInt16(this.offset);\n            var glyphIndex = this.readUInt16(this.offset);\n\n            if (!glyphChars.containsKey(glyphIndex)) {\n              glyphChars.setValue(glyphIndex, 0);\n            }\n\n            if ((flags & TtfCompositeGlyphFlags.MoreComponents) === 0) {\n              break;\n            }\n\n            skipBytes = (flags & TtfCompositeGlyphFlags.Arg1And2AreWords) !== 0 ? 4 : 2;\n\n            if ((flags & TtfCompositeGlyphFlags.WeHaveScale) !== 0) {\n              skipBytes += 2;\n            } else if ((flags & TtfCompositeGlyphFlags.WeHaveAnXyScale) !== 0) {\n              skipBytes += 4;\n            } else if ((flags & TtfCompositeGlyphFlags.WeHaveTwoByTwo) !== 0) {\n              skipBytes += 2 * 4;\n            }\n\n            this.offset += skipBytes;\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Creates new glyph tables based on chars that are used for output.\n   */\n\n  /* tslint:disable */\n\n\n  TtfReader.prototype.generateGlyphTable = function (glyphChars, locaTable, newLocaTable, newGlyphTable) {\n    /* tslint:enable */\n    // if (glyphChars === null) {\n    //     throw new Error('Argument Null Exception : glyphChars');\n    // }\n    newLocaTable = []; // Sorting used glyphs keys.\n\n    var activeGlyphs = glyphChars.keys();\n    activeGlyphs.sort(function (a, b) {\n      return a - b;\n    });\n    var glyphSize = 0;\n\n    for (var i = 0; i < activeGlyphs.length; i++) {\n      var glyphIndex = activeGlyphs[i];\n\n      if (locaTable.offsets.length > 0) {\n        glyphSize += locaTable.offsets[glyphIndex + 1] - locaTable.offsets[glyphIndex];\n      }\n    }\n\n    var glyphSizeAligned = this.align(glyphSize);\n    newGlyphTable = [];\n\n    for (var i = 0; i < glyphSizeAligned; i++) {\n      newGlyphTable.push(0);\n    }\n\n    var nextGlyphOffset = 0;\n    var nextGlyphIndex = 0;\n    var table = this.getTable('glyf'); // Creating NewLocaTable - that would hold offsets for filtered glyphs.\n\n    for (var i = 0; i < locaTable.offsets.length; i++) {\n      newLocaTable.push(nextGlyphOffset);\n\n      if (nextGlyphIndex < activeGlyphs.length && activeGlyphs[nextGlyphIndex] === i) {\n        ++nextGlyphIndex;\n        newLocaTable[i] = nextGlyphOffset;\n        var oldGlyphOffset = locaTable.offsets[i];\n        var oldNextGlyphOffset = locaTable.offsets[i + 1] - oldGlyphOffset;\n\n        if (oldNextGlyphOffset > 0) {\n          this.offset = table.offset + oldGlyphOffset;\n          var result = this.read(newGlyphTable, nextGlyphOffset, oldNextGlyphOffset);\n          newGlyphTable = result.buffer;\n          nextGlyphOffset += oldNextGlyphOffset;\n        }\n      }\n    }\n\n    return {\n      glyphTableSize: glyphSize,\n      newLocaTable: newLocaTable,\n      newGlyphTable: newGlyphTable\n    };\n  };\n  /**\n   * Updates new Loca table.\n   */\n\n  /* tslint:disable */\n\n\n  TtfReader.prototype.updateLocaTable = function (newLocaTable, bLocaIsShort, newLocaTableOut) {\n    /* tslint:enable */\n    if (newLocaTable === null) {\n      throw new Error('Argument Null Exception : newLocaTable');\n    }\n\n    var size = bLocaIsShort ? newLocaTable.length * 2 : newLocaTable.length * 4;\n    var count = this.align(size); //BigEndianWiter\n\n    var writer = new BigEndianWriter(count);\n\n    for (var i = 0; i < newLocaTable.length; i++) {\n      var value = newLocaTable[i];\n\n      if (bLocaIsShort) {\n        value /= 2;\n        writer.writeShort(value);\n      } else {\n        writer.writeInt(value);\n      }\n    }\n\n    return {\n      newLocaUpdated: writer.data,\n      newLocaSize: size\n    };\n  };\n  /**\n   * Aligns number to be divisible on 4.\n   */\n\n\n  TtfReader.prototype.align = function (value) {\n    return value + 3 & ~3;\n  };\n  /**\n   * Returns font program data.\n   */\n\n  /* tslint:disable */\n\n\n  TtfReader.prototype.getFontProgram = function (newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize) {\n    /* tslint:enable */\n    if (newLocaTableOut === null) {\n      throw new Error('Argument Null Exception : newLocaTableOut');\n    }\n\n    if (newGlyphTable === null) {\n      throw new Error('Argument Null Exception : newGlyphTable');\n    }\n\n    var tableNames = this.tableNames;\n    var result = this.getFontProgramLength(newLocaTableOut, newGlyphTable, 0);\n    var fontProgramLength = result.fontProgramLength;\n    var numTables = result.numTables;\n    var writer = new BigEndianWriter(fontProgramLength);\n    writer.writeInt(0x10000);\n    writer.writeShort(numTables);\n    var entrySelector = this.entrySelectors[numTables];\n    writer.writeShort((1 << (entrySelector & 31)) * 16);\n    writer.writeShort(entrySelector);\n    writer.writeShort((numTables - (1 << (entrySelector & 31))) * 16); // Writing to destination buffer - checksums && sizes of used tables.\n\n    this.writeCheckSums(writer, numTables, newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize); // // Writing to destination buffer - used glyphs.\n\n    this.writeGlyphs(writer, newLocaTableOut, newGlyphTable);\n    return writer.data;\n  };\n  /* tslint:disable */\n\n\n  TtfReader.prototype.getFontProgramLength = function (newLocaTableOut, newGlyphTable, numTables) {\n    /* tslint:enable */\n    if (newLocaTableOut === null) {\n      throw new Error('Argument Null Exception : newLocaTableOut');\n    }\n\n    if (newGlyphTable === null) {\n      throw new Error('Argument Null Exception : newGlyphTable');\n    } // glyf and loca are used by default;\n\n\n    numTables = 2;\n    var tableNames = this.tableNames;\n    var fontProgramLength = 0;\n\n    for (var i = 0; i < tableNames.length; i++) {\n      var tableName = tableNames[i];\n\n      if (tableName !== 'glyf' && tableName !== 'loca') {\n        var table = this.getTable(tableName);\n\n        if (!table.empty) {\n          ++numTables;\n          fontProgramLength += this.align(table.length);\n        }\n      }\n    }\n\n    fontProgramLength += newLocaTableOut.length;\n    fontProgramLength += newGlyphTable.length;\n    var usedTablesSize = numTables * 16 + 3 * 4;\n    fontProgramLength += usedTablesSize;\n    return {\n      fontProgramLength: fontProgramLength,\n      numTables: numTables\n    };\n  };\n  /**\n   * Writing to destination buffer - checksums and sizes of used tables.\n   */\n\n  /* tslint:disable */\n\n\n  TtfReader.prototype.writeCheckSums = function (writer, numTables, newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize) {\n    /* tslint:enable */\n    if (writer === null) {\n      throw new Error('Argument Null Exception : writer');\n    }\n\n    if (newLocaTableOut === null) {\n      throw new Error('Argument Null Exception : newLocaTableOut');\n    }\n\n    if (newGlyphTable === null) {\n      throw new Error('Argument Null Exception : newGlyphTable');\n    }\n\n    var tableNames = this.tableNames;\n    var usedTablesSize = numTables * 16 + 3 * 4;\n    var nextTableSize = 0;\n\n    for (var i = 0; i < tableNames.length; i++) {\n      var tableName = tableNames[i];\n      var tableInfo = this.getTable(tableName);\n\n      if (tableInfo.empty) {\n        continue;\n      }\n\n      writer.writeString(tableName);\n\n      if (tableName === 'glyf') {\n        var checksum = this.calculateCheckSum(newGlyphTable);\n        writer.writeInt(checksum);\n        nextTableSize = glyphTableSize;\n      } else if (tableName === 'loca') {\n        var checksum = this.calculateCheckSum(newLocaTableOut);\n        writer.writeInt(checksum);\n        nextTableSize = locaTableSize;\n      } else {\n        writer.writeInt(tableInfo.checksum);\n        nextTableSize = tableInfo.length;\n      }\n\n      writer.writeUInt(usedTablesSize);\n      writer.writeUInt(nextTableSize);\n      usedTablesSize += this.align(nextTableSize);\n    }\n  };\n  /**\n   * Gets checksum from source buffer.\n   */\n\n\n  TtfReader.prototype.calculateCheckSum = function (bytes) {\n    if (bytes === null) {\n      throw new Error('Argument Null Exception : bytes');\n    }\n\n    var pos = 0;\n    var byte1 = 0;\n    var byte2 = 0;\n    var byte3 = 0;\n    var byte4 = 0;\n\n    for (var i = 0; i < (bytes.length + 1) / 4; i++) {\n      byte4 += bytes[pos++] & 255;\n      byte3 += bytes[pos++] & 255;\n      byte2 += bytes[pos++] & 255;\n      byte1 += bytes[pos++] & 255;\n    }\n\n    var result = byte1;\n    result += byte2 << 8;\n    result += byte3 << 16;\n    result += byte4 << 24;\n    return result;\n  };\n  /**\n   * Writing to destination buffer - used glyphs.\n   */\n\n\n  TtfReader.prototype.writeGlyphs = function (writer, newLocaTable, newGlyphTable) {\n    if (writer === null) {\n      throw new Error('Argument Null Exception : writer');\n    }\n\n    if (newLocaTable === null) {\n      throw new Error('Argument Null Exception : newLocaTableOut');\n    }\n\n    if (newGlyphTable === null) {\n      throw new Error('Argument Null Exception : newGlyphTable');\n    }\n\n    var tableNames = this.tableNames;\n\n    for (var i = 0; i < tableNames.length; i++) {\n      var tableName = tableNames[i];\n      var tableInfo = this.getTable(tableName);\n\n      if (tableInfo.empty) {\n        continue;\n      }\n\n      if (tableName === 'glyf') {\n        writer.writeBytes(newGlyphTable);\n      } else if (tableName === 'loca') {\n        writer.writeBytes(newLocaTable);\n      } else {\n        var count = this.align(tableInfo.length);\n        var buff = [];\n\n        for (var i_1 = 0; i_1 < count; i_1++) {\n          buff.push(0);\n        }\n\n        this.offset = tableInfo.offset;\n        var result = this.read(buff, 0, tableInfo.length);\n        writer.writeBytes(result.buffer);\n      }\n    }\n  }; //public methods\n\n  /**\n   * Sets position value of font data.\n   */\n\n\n  TtfReader.prototype.setOffset = function (offset) {\n    this.offset = offset;\n  };\n  /**\n   * Creates font Internals\n   * @private\n   */\n\n\n  TtfReader.prototype.createInternals = function () {\n    this.metrics = new TtfMetrics();\n    var nameTable = this.readNameTable();\n    var headTable = this.readHeadTable();\n    this.bIsLocaShort = headTable.indexToLocalFormat === 0;\n    var horizontalHeadTable = this.readHorizontalHeaderTable();\n    var os2Table = this.readOS2Table();\n    var postTable = this.readPostTable();\n    this.width = this.readWidthTable(horizontalHeadTable.numberOfHMetrics, headTable.unitsPerEm);\n    var subTables = this.readCmapTable();\n    this.initializeMetrics(nameTable, headTable, horizontalHeadTable, os2Table, postTable, subTables);\n  };\n\n  TtfReader.prototype.getGlyph = function (charCode) {\n    if (typeof charCode === 'number') {\n      var obj1 = null;\n\n      if (!this.metrics.isSymbol && this.microsoftGlyphs != null) {\n        if (this.microsoftGlyphs.containsKey(charCode)) {\n          obj1 = this.microsoftGlyphs.getValue(charCode);\n        }\n      } else if (this.metrics.isSymbol && this.macintoshGlyphs != null) {\n        if (this.macintoshGlyphs.containsKey(charCode)) {\n          obj1 = this.macintoshGlyphs.getValue(charCode);\n        }\n      }\n\n      var glyph = obj1 != null ? obj1 : this.getDefaultGlyph();\n      return glyph;\n    } else {\n      var obj = null;\n      var code = charCode.charCodeAt(0);\n\n      if (!this.metrics.isSymbol && this.microsoft !== null) {\n        if (this.microsoft.containsKey(code)) {\n          obj = this.microsoft.getValue(code);\n\n          if (code !== StringTokenizer.whiteSpace.charCodeAt(0)) {\n            this.isFontPresent = true;\n          }\n        } else if (code !== StringTokenizer.whiteSpace.charCodeAt(0)) {\n          this.isFontPresent = false;\n        }\n      } else if (this.metrics.isSymbol && this.macintosh !== null || this.isMacTTF) {\n        // NOTE: this code fixes char codes that extends 0x100. However, it might corrupt something.\n        if (this.maxMacIndex !== 0) {\n          code %= this.maxMacIndex + 1;\n        } else {\n          code = (code & 0xff00) === 0xf000 ? code & 0xff : code;\n        }\n\n        if (this.macintosh.containsKey(code)) {\n          obj = this.macintosh.getValue(code);\n          this.isFontPresent = true;\n        }\n      } // Fix for StackOverFlow exception in XPS to PDF converter\n\n\n      if (charCode === StringTokenizer.whiteSpace && obj === null) {\n        obj = new TtfGlyphInfo();\n      }\n\n      var glyph = obj !== null ? obj : this.getDefaultGlyph();\n      return glyph;\n    }\n  };\n  /**\n   * Gets hash table with chars indexed by glyph index.\n   */\n\n\n  TtfReader.prototype.getGlyphChars = function (chars) {\n    if (chars === null || chars === undefined) {\n      throw new Error('Argument Null Exception : chars');\n    }\n\n    var dictionary = new Dictionary();\n    var charKeys = chars.keys();\n\n    for (var i = 0; i < charKeys.length; i++) {\n      var ch = charKeys[i];\n      var glyph = this.getGlyph(ch);\n\n      if (!glyph.empty) {\n        dictionary.setValue(glyph.index, ch.charCodeAt(0));\n      }\n    }\n\n    return dictionary;\n  };\n  /**\n   * Gets all glyphs.\n   */\n\n\n  TtfReader.prototype.getAllGlyphs = function () {\n    var allGlyphInfo = [];\n    var info = new TtfGlyphInfo();\n    var index = 0;\n\n    for (var i = 0; i < this.width.length; i++) {\n      var width = this.width[i];\n      info.index = index;\n      info.width = width;\n      allGlyphInfo.push(info);\n      index++;\n    }\n\n    return allGlyphInfo;\n  };\n  /**\n   * Reads a font's program.\n   * @private\n   */\n\n\n  TtfReader.prototype.readFontProgram = function (chars) {\n    var glyphChars = this.getGlyphChars(chars);\n    var locaTable = this.readLocaTable(this.bIsLocaShort);\n\n    if (glyphChars.size() < chars.size()) {\n      this.missedGlyphs = chars.size() - glyphChars.size();\n    }\n\n    this.updateGlyphChars(glyphChars, locaTable);\n    /* tslint:disable */\n\n    var result1 = this.generateGlyphTable(glyphChars, locaTable, null, null);\n    /* tslint:enable */\n\n    var glyphTableSize = result1.glyphTableSize;\n    var newLocaTable = result1.newLocaTable;\n    var newGlyphTable = result1.newGlyphTable;\n    var result2 = this.updateLocaTable(newLocaTable, this.bIsLocaShort, null);\n    var newLocaSize = result2.newLocaSize;\n    var newLocaUpdated = result2.newLocaUpdated;\n    var fontProgram = this.getFontProgram(newLocaUpdated, newGlyphTable, glyphTableSize, newLocaSize);\n    return fontProgram;\n  };\n  /**\n   * Reconverts string to be in proper format saved into PDF file.\n   */\n\n\n  TtfReader.prototype.convertString = function (text) {\n    if (text === null) {\n      throw new Error('Argument Null Exception : text');\n    }\n\n    var glyph = '';\n    var i = 0;\n\n    for (var k = 0; k < text.length; k++) {\n      var ch = text[k];\n      var glyphInfo = this.getGlyph(ch);\n\n      if (!glyphInfo.empty) {\n        glyph += String.fromCharCode(glyphInfo.index);\n        i++;\n      }\n    }\n\n    return glyph;\n  };\n  /**\n   * Gets char width.\n   */\n\n\n  TtfReader.prototype.getCharWidth = function (code) {\n    var glyphInfo = this.getGlyph(code);\n    glyphInfo = !glyphInfo.empty ? glyphInfo : this.getDefaultGlyph();\n    var codeWidth = !glyphInfo.empty ? glyphInfo.width : 0;\n    return codeWidth;\n  };\n\n  TtfReader.prototype.readString = function (length, isUnicode) {\n    if (isUnicode === undefined) {\n      return this.readString(length, false);\n    } else {\n      //let buffer : number[] = this.readBytes(length);\n      var result = '';\n\n      if (isUnicode) {\n        for (var i = 0; i < length; i++) {\n          if (i % 2 !== 0) {\n            result += String.fromCharCode(this.fontData[this.offset]);\n          }\n\n          this.offset += 1;\n        }\n      } else {\n        for (var i = 0; i < length; i++) {\n          result += String.fromCharCode(this.fontData[this.offset]);\n          this.offset += 1;\n        }\n      }\n\n      return result;\n    }\n  };\n\n  TtfReader.prototype.readFixed = function (offset) {\n    var integer = this.readInt16(offset);\n    var sFraction = this.readInt16(offset + 2);\n    var fraction = sFraction / 16384;\n    return integer + fraction;\n  };\n\n  TtfReader.prototype.readInt32 = function (offset) {\n    var i1 = this.fontData[offset + 3];\n    var i2 = this.fontData[offset + 2];\n    var i3 = this.fontData[offset + 1];\n    var i4 = this.fontData[offset];\n    this.offset += 4;\n    return i1 + (i2 << 8) + (i3 << 16) + (i4 << 24);\n  };\n\n  TtfReader.prototype.readUInt32 = function (offset) {\n    var i1 = this.fontData[offset + 3];\n    var i2 = this.fontData[offset + 2];\n    var i3 = this.fontData[offset + 1];\n    var i4 = this.fontData[offset];\n    this.offset += 4;\n    return i1 | i2 << 8 | i3 << 16 | i4 << 24;\n  }; // private readInt16(offset : number) : number {\n  //     let result : number = (this.fontData[offset] << 8) + this.fontData[offset + 1];\n  //     this.offset += 2;\n  //     return result;\n  // }\n\n\n  TtfReader.prototype.readInt16 = function (offset) {\n    var result = (this.fontData[offset] << 8) + this.fontData[offset + 1];\n    result = result & 1 << 15 ? result - 0x10000 : result;\n    this.offset += 2;\n    return result;\n  };\n\n  TtfReader.prototype.readInt64 = function (offset) {\n    var low = this.readInt32(offset + 4);\n    var n = this.readInt32(offset) * 4294967296.0 + low;\n\n    if (low < 0) {\n      n += 4294967296;\n    }\n\n    return n;\n  };\n\n  TtfReader.prototype.readUInt16 = function (offset) {\n    var result = this.fontData[offset] << 8 | this.fontData[offset + 1];\n    this.offset += 2;\n    return result;\n  };\n  /**\n   * Reads ushort array.\n   */\n\n\n  TtfReader.prototype.readUshortArray = function (length) {\n    var buffer = [];\n\n    for (var i = 0; i < length; i++) {\n      buffer[i] = this.readUInt16(this.offset);\n    }\n\n    return buffer;\n  };\n\n  TtfReader.prototype.readBytes = function (length) {\n    var result = [];\n\n    for (var i = 0; i < length; i++) {\n      result.push(this.fontData[this.offset]);\n      this.offset += 1;\n    }\n\n    return result;\n  };\n\n  TtfReader.prototype.readByte = function (offset) {\n    var result = this.fontData[offset];\n    this.offset += 1;\n    return result;\n  };\n  /**\n   * Reads bytes to array in BigEndian order.\n   * @private\n   */\n\n\n  TtfReader.prototype.read = function (buffer, index, count) {\n    if (buffer === null) {\n      throw new Error('Argument Null Exception : buffer');\n    }\n\n    var written = 0;\n    var read = 0;\n\n    do {\n      for (var i = 0; i < count - written && this.offset + i < this.fontData.length; i++) {\n        buffer[index + i] = this.fontData[this.offset + i];\n      }\n\n      read = count - written;\n      this.offset += read;\n      written += read;\n    } while (written < count);\n\n    return {\n      buffer: buffer,\n      written: written\n    };\n  };\n\n  return TtfReader;\n}();\n\nexport { TtfReader };","map":{"version":3,"names":["TtfTableInfo","Dictionary","TtfNameTable","TtfNameRecord","TtfHeadTable","TtfMetrics","TtfHorizontalHeaderTable","TtfOS2Table","TtfPostTable","TtfLongHorMetric","TtfCmapSubTable","TtfCmapTable","TtfGlyphInfo","TtfLocaTable","TtfAppleCmapSubTable","TtfMicrosoftCmapSubTable","TtfTrimmedCmapSubTable","TtfGlyphHeader","Rectangle","StringTokenizer","TtfCmapFormat","TtfCmapEncoding","TtfPlatformID","TtfMicrosoftEncodingID","TtfMacintoshEncodingID","TtfCompositeGlyphFlags","BigEndianWriter","TtfReader","fontData","int32Size","isTtcFont","isMacTtf","metricsName","isMacTTF","missedGlyphs","tableNames","entrySelectors","initialize","Object","defineProperty","prototype","get","macintoshDictionary","undefined","enumerable","configurable","microsoftDictionary","internalMacintoshGlyphs","internalMicrosoftGlyphs","metrics","readFontDictionary","nameTable","readNameTable","headTable","readHeadTable","initializeFontName","macStyle","offset","version","checkPreambula","numTables","readInt16","searchRange","entrySelector","rangeShift","tableDirectory","i","table","tableKey","readString","checksum","readInt32","length","setValue","lowestPosition","fixOffsets","minOffset","Number","MAX_VALUE","tableKeys","keys","value","getValue","shift","fontTag","Error","ttcIdentificationNumber","tableInfo","getTable","formatSelector","readUInt16","recordsCount","nameRecords","recordSize","position","record","platformID","encodingID","languageID","nameID","unicode","name","readFixed","fontRevision","checkSumAdjustment","readUInt32","magicNumber","flags","unitsPerEm","created","readInt64","modified","xMin","yMin","xMax","yMax","lowestReadableSize","fontDirectionHint","indexToLocalFormat","glyphDataFormat","readHorizontalHeaderTable","ascender","descender","lineGap","advanceWidthMax","minLeftSideBearing","minRightSideBearing","xMaxExtent","caretSlopeRise","caretSlopeRun","metricDataFormat","numberOfHMetrics","readOS2Table","xAvgCharWidth","usWeightClass","usWidthClass","fsType","ySubscriptXSize","ySubscriptYSize","ySubscriptXOffset","ySubscriptYOffset","ySuperscriptXSize","ySuperscriptYSize","ySuperscriptXOffset","ySuperscriptYOffset","yStrikeoutSize","yStrikeoutPosition","sFamilyClass","panose","readBytes","ulUnicodeRange1","ulUnicodeRange2","ulUnicodeRange3","ulUnicodeRange4","vendorIdentifier","fsSelection","usFirstCharIndex","usLastCharIndex","sTypoAscender","sTypoDescender","sTypoLineGap","usWinAscent","usWinDescent","ulCodePageRange1","ulCodePageRange2","sxHeight","sCapHeight","usDefaultChar","usBreakChar","usMaxContext","readPostTable","formatType","italicAngle","underlinePosition","underlineThickness","isFixedPitch","minType42","maxType42","minType1","maxType1","readWidthTable","glyphCount","width","glyph","advanceWidth","lsb","glyphWidth","push","Math","floor","readCmapTable","tablesCount","subTables","subTable","readCmapSubTable","format","encoding","getCmapEncoding","platform","Macintosh","Microsoft","Unknown","Apple","readAppleCmapTable","readMicrosoftCmapTable","Trimmed","readTrimmedCmapTable","maxMacIndex","glyphInfo","index","readByte","getWidth","charCode","macintosh","addGlyph","max","collection","Unicode","microsoft","segCountX2","segCount","endCount","readUshortArray","reservedPad","startCount","idDelta","idRangeOffset","glyphID","codeOffset","j","k","id","Symbol","firstCode","entryCount","fontFamily","postScriptName","obj","containsKey","glyphCode","Undefined","Roman","microsoftGlyphs","macintoshGlyphs","initializeMetrics","horizontalHeadTable","os2Table","postTable","cmapTables","bSymbol","isSymbol","factor","winAscent","macAscent","capHeight","winDescent","macDescent","leading","ceil","left","top","right","bottom","fontBox","stemV","widthTable","updateWidth","contains","subScriptSizeFactor","superscriptSizeFactor","count","bytes","getGlyph","String","fromCharCode","empty","byteToProcess","unknown","space","text","getString","ch","getDefaultGlyph","whiteSpace","start","result","readLocaTable","bShort","buffer","len","offsets","updateGlyphChars","glyphChars","locaTable","clone","glyphCharKeys","nextKey","processCompositeGlyph","glyphOffset","glyphHeader","numberOfContours","skipBytes","entry","glyphIndex","MoreComponents","Arg1And2AreWords","WeHaveScale","WeHaveAnXyScale","WeHaveTwoByTwo","generateGlyphTable","newLocaTable","newGlyphTable","activeGlyphs","sort","a","b","glyphSize","glyphSizeAligned","align","nextGlyphOffset","nextGlyphIndex","oldGlyphOffset","oldNextGlyphOffset","read","glyphTableSize","updateLocaTable","bLocaIsShort","newLocaTableOut","size","writer","writeShort","writeInt","newLocaUpdated","data","newLocaSize","getFontProgram","locaTableSize","getFontProgramLength","fontProgramLength","writeCheckSums","writeGlyphs","tableName","usedTablesSize","nextTableSize","writeString","calculateCheckSum","writeUInt","pos","byte1","byte2","byte3","byte4","writeBytes","buff","i_1","setOffset","createInternals","bIsLocaShort","obj1","code","charCodeAt","isFontPresent","getGlyphChars","chars","dictionary","charKeys","getAllGlyphs","allGlyphInfo","info","readFontProgram","result1","result2","fontProgram","convertString","getCharWidth","codeWidth","isUnicode","integer","sFraction","fraction","i1","i2","i3","i4","low","n","written"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-reader.js"],"sourcesContent":["/**\n * TtfReader.ts class for EJ2-PDF\n */\nimport { TtfTableInfo } from './ttf-table-info';\nimport { Dictionary } from './../../collections/dictionary';\nimport { TtfNameTable } from './ttf-name-table';\nimport { TtfNameRecord } from './ttf-name-record';\nimport { TtfHeadTable } from './ttf-head-table';\nimport { TtfMetrics } from './ttf-metrics';\nimport { TtfHorizontalHeaderTable } from './ttf-horizontal-header-table';\nimport { TtfOS2Table } from './ttf-OS2-Table';\nimport { TtfPostTable } from './ttf-post-table';\nimport { TtfLongHorMetric } from './ttf-long-hor-metric';\nimport { TtfCmapSubTable } from './ttf-cmap-sub-table';\nimport { TtfCmapTable } from './ttf-cmap-table';\nimport { TtfGlyphInfo } from './ttf-glyph-info';\nimport { TtfLocaTable } from './ttf-loca-table';\nimport { TtfAppleCmapSubTable } from './ttf-apple-cmap-sub-table';\nimport { TtfMicrosoftCmapSubTable } from './ttf-microsoft-cmap-sub-table';\nimport { TtfTrimmedCmapSubTable } from './ttf-trimmed-cmap-sub-table';\nimport { TtfGlyphHeader } from './ttf-glyph-header';\nimport { Rectangle } from './../../drawing/pdf-drawing';\nimport { StringTokenizer } from './string-tokenizer';\nimport { TtfCmapFormat, TtfCmapEncoding, TtfPlatformID } from './enum';\nimport { TtfMicrosoftEncodingID, TtfMacintoshEncodingID, TtfCompositeGlyphFlags } from './enum';\nimport { BigEndianWriter } from './../../input-output/big-endian-writer';\nvar TtfReader = /** @class */ (function () {\n    //Constructors\n    function TtfReader(fontData) {\n        this.int32Size = 4;\n        this.isTtcFont = false;\n        this.isMacTtf = false;\n        this.metricsName = '';\n        this.isMacTTF = false;\n        this.missedGlyphs = 0;\n        this.tableNames = ['cvt ', 'fpgm', 'glyf', 'head', 'hhea', 'hmtx', 'loca', 'maxp', 'prep'];\n        this.entrySelectors = [0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4];\n        this.fontData = fontData;\n        this.initialize();\n    }\n    Object.defineProperty(TtfReader.prototype, \"macintosh\", {\n        //Properties\n        /**\n         * Gets glyphs for Macintosh or Symbol fonts (char - key, glyph - value).\n         */\n        get: function () {\n            if (this.macintoshDictionary === null || this.macintoshDictionary === undefined) {\n                this.macintoshDictionary = new Dictionary();\n            }\n            return this.macintoshDictionary;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TtfReader.prototype, \"microsoft\", {\n        /**\n         * Gets glyphs for Microsoft or Symbol fonts (char - key, glyph - value).\n         */\n        get: function () {\n            if (this.microsoftDictionary === null || this.microsoftDictionary === undefined) {\n                this.microsoftDictionary = new Dictionary();\n            }\n            return this.microsoftDictionary;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TtfReader.prototype, \"macintoshGlyphs\", {\n        /**\n         * Gets glyphs for Macintosh or Symbol fonts (glyph index - key, glyph - value).\n         */\n        get: function () {\n            if (this.internalMacintoshGlyphs === null || this.internalMacintoshGlyphs === undefined) {\n                this.internalMacintoshGlyphs = new Dictionary();\n            }\n            return this.internalMacintoshGlyphs;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TtfReader.prototype, \"microsoftGlyphs\", {\n        /**\n         * Gets glyphs for Microsoft Unicode fonts (glyph index - key, glyph - value).\n         */\n        get: function () {\n            if (this.internalMicrosoftGlyphs === null || this.internalMicrosoftGlyphs === undefined) {\n                this.internalMicrosoftGlyphs = new Dictionary();\n            }\n            return this.internalMicrosoftGlyphs;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Implementation\n    TtfReader.prototype.initialize = function () {\n        if (this.metrics === undefined) {\n            this.metrics = new TtfMetrics();\n        }\n        this.readFontDictionary();\n        var nameTable = this.readNameTable();\n        var headTable = this.readHeadTable();\n        this.initializeFontName(nameTable);\n        this.metrics.macStyle = headTable.macStyle;\n    };\n    TtfReader.prototype.readFontDictionary = function () {\n        this.offset = 0;\n        var version = this.checkPreambula();\n        //this.offset += 4;\n        var numTables = this.readInt16(this.offset);\n        var searchRange = this.readInt16(this.offset);\n        var entrySelector = this.readInt16(this.offset);\n        var rangeShift = this.readInt16(this.offset);\n        if (this.tableDirectory === undefined) {\n            this.tableDirectory = new Dictionary();\n        }\n        for (var i = 0; i < numTables; ++i) {\n            var table = new TtfTableInfo();\n            var tableKey = this.readString(this.int32Size);\n            table.checksum = this.readInt32(this.offset);\n            table.offset = this.readInt32(this.offset);\n            table.length = this.readInt32(this.offset);\n            this.tableDirectory.setValue(tableKey, table);\n        }\n        this.lowestPosition = this.offset;\n        if (!this.isTtcFont) {\n            this.fixOffsets();\n        }\n    };\n    TtfReader.prototype.fixOffsets = function () {\n        var minOffset = Number.MAX_VALUE;\n        // Search for a smallest offset and compare it with the lowest position found.\n        var tableKeys = this.tableDirectory.keys();\n        for (var i = 0; i < tableKeys.length; i++) {\n            var value = this.tableDirectory.getValue(tableKeys[i]);\n            var offset = value.offset;\n            if (minOffset > offset) {\n                minOffset = offset;\n                if (minOffset <= this.lowestPosition) {\n                    break;\n                }\n            }\n        }\n        var shift = minOffset - this.lowestPosition;\n        if (shift !== 0) {\n            var table = new Dictionary();\n            for (var i = 0; i < tableKeys.length; i++) {\n                var value = this.tableDirectory.getValue(tableKeys[i]);\n                value.offset -= shift;\n                table.setValue(tableKeys[i], value);\n            }\n            this.tableDirectory = table;\n        }\n    };\n    TtfReader.prototype.checkPreambula = function () {\n        var version = this.readInt32(this.offset);\n        this.isMacTtf = (version === 0x74727565) ? true : false;\n        if (version !== 0x10000 && version !== 0x74727565 && version !== 0x4f54544f) {\n            this.isTtcFont = true;\n            this.offset = 0;\n            var fontTag = this.readString(4);\n            if (fontTag !== 'ttcf') {\n                throw new Error('Can not read TTF font data');\n            }\n            //skip 4\n            this.offset += 4;\n            var ttcIdentificationNumber = this.readInt32(this.offset);\n            if (ttcIdentificationNumber < 0) {\n                throw new Error('Can not read TTF font data');\n            }\n            this.offset = this.readInt32(this.offset);\n            version = this.readInt32(this.offset);\n        }\n        return version;\n    };\n    TtfReader.prototype.readNameTable = function () {\n        var tableInfo = this.getTable('name');\n        this.offset = tableInfo.offset;\n        var table = new TtfNameTable();\n        table.formatSelector = this.readUInt16(this.offset);\n        table.recordsCount = this.readUInt16(this.offset);\n        table.offset = this.readUInt16(this.offset);\n        table.nameRecords = [];\n        var recordSize = 12;\n        var position = this.offset;\n        for (var i = 0; i < table.recordsCount; i++) {\n            this.offset = position;\n            var record = new TtfNameRecord();\n            record.platformID = this.readUInt16(this.offset);\n            record.encodingID = this.readUInt16(this.offset);\n            record.languageID = this.readUInt16(this.offset);\n            record.nameID = this.readUInt16(this.offset);\n            record.length = this.readUInt16(this.offset);\n            record.offset = this.readUInt16(this.offset);\n            this.offset = tableInfo.offset + table.offset + record.offset;\n            var unicode = (record.platformID === 0 || record.platformID === 3);\n            record.name = this.readString(record.length, unicode);\n            table.nameRecords[i] = record;\n            position += recordSize;\n        }\n        return table;\n    };\n    TtfReader.prototype.readHeadTable = function () {\n        var tableInfo = this.getTable('head');\n        this.offset = tableInfo.offset;\n        var table = new TtfHeadTable();\n        table.version = this.readFixed(this.offset);\n        table.fontRevision = this.readFixed(this.offset);\n        table.checkSumAdjustment = this.readUInt32(this.offset);\n        table.magicNumber = this.readUInt32(this.offset);\n        table.flags = this.readUInt16(this.offset);\n        table.unitsPerEm = this.readUInt16(this.offset);\n        table.created = this.readInt64(this.offset);\n        table.modified = this.readInt64(this.offset);\n        table.xMin = this.readInt16(this.offset);\n        table.yMin = this.readInt16(this.offset);\n        table.xMax = this.readInt16(this.offset);\n        table.yMax = this.readInt16(this.offset);\n        table.macStyle = this.readUInt16(this.offset);\n        table.lowestReadableSize = this.readUInt16(this.offset);\n        table.fontDirectionHint = this.readInt16(this.offset);\n        table.indexToLocalFormat = this.readInt16(this.offset);\n        table.glyphDataFormat = this.readInt16(this.offset);\n        return table;\n    };\n    TtfReader.prototype.readHorizontalHeaderTable = function () {\n        var tableInfo = this.getTable('hhea');\n        this.offset = tableInfo.offset;\n        var table = new TtfHorizontalHeaderTable();\n        table.version = this.readFixed(this.offset);\n        table.ascender = this.readInt16(this.offset);\n        table.descender = this.readInt16(this.offset);\n        table.lineGap = this.readInt16(this.offset);\n        table.advanceWidthMax = this.readUInt16(this.offset);\n        table.minLeftSideBearing = this.readInt16(this.offset);\n        table.minRightSideBearing = this.readInt16(this.offset);\n        table.xMaxExtent = this.readInt16(this.offset);\n        table.caretSlopeRise = this.readInt16(this.offset);\n        table.caretSlopeRun = this.readInt16(this.offset);\n        //skip 2 * 5\n        this.offset += 10;\n        table.metricDataFormat = this.readInt16(this.offset);\n        table.numberOfHMetrics = this.readUInt16(this.offset);\n        return table;\n    };\n    TtfReader.prototype.readOS2Table = function () {\n        var tableInfo = this.getTable('OS/2');\n        this.offset = tableInfo.offset;\n        var table = new TtfOS2Table();\n        table.version = this.readUInt16(this.offset);\n        table.xAvgCharWidth = this.readInt16(this.offset);\n        table.usWeightClass = this.readUInt16(this.offset);\n        table.usWidthClass = this.readUInt16(this.offset);\n        table.fsType = this.readInt16(this.offset);\n        table.ySubscriptXSize = this.readInt16(this.offset);\n        table.ySubscriptYSize = this.readInt16(this.offset);\n        table.ySubscriptXOffset = this.readInt16(this.offset);\n        table.ySubscriptYOffset = this.readInt16(this.offset);\n        table.ySuperscriptXSize = this.readInt16(this.offset);\n        table.ySuperscriptYSize = this.readInt16(this.offset);\n        table.ySuperscriptXOffset = this.readInt16(this.offset);\n        table.ySuperscriptYOffset = this.readInt16(this.offset);\n        table.yStrikeoutSize = this.readInt16(this.offset);\n        table.yStrikeoutPosition = this.readInt16(this.offset);\n        table.sFamilyClass = this.readInt16(this.offset);\n        table.panose = this.readBytes(10);\n        table.ulUnicodeRange1 = this.readUInt32(this.offset);\n        table.ulUnicodeRange2 = this.readUInt32(this.offset);\n        table.ulUnicodeRange3 = this.readUInt32(this.offset);\n        table.ulUnicodeRange4 = this.readUInt32(this.offset);\n        table.vendorIdentifier = this.readBytes(4);\n        table.fsSelection = this.readUInt16(this.offset);\n        table.usFirstCharIndex = this.readUInt16(this.offset);\n        table.usLastCharIndex = this.readUInt16(this.offset);\n        table.sTypoAscender = this.readInt16(this.offset);\n        table.sTypoDescender = this.readInt16(this.offset);\n        table.sTypoLineGap = this.readInt16(this.offset);\n        table.usWinAscent = this.readUInt16(this.offset);\n        table.usWinDescent = this.readUInt16(this.offset);\n        table.ulCodePageRange1 = this.readUInt32(this.offset);\n        table.ulCodePageRange2 = this.readUInt32(this.offset);\n        if (table.version > 1) {\n            table.sxHeight = this.readInt16(this.offset);\n            table.sCapHeight = this.readInt16(this.offset);\n            table.usDefaultChar = this.readUInt16(this.offset);\n            table.usBreakChar = this.readUInt16(this.offset);\n            table.usMaxContext = this.readUInt16(this.offset);\n        }\n        else {\n            table.sxHeight = 0;\n            table.sCapHeight = 0;\n            table.usDefaultChar = 0;\n            table.usBreakChar = 0;\n            table.usMaxContext = 0;\n        }\n        return table;\n    };\n    TtfReader.prototype.readPostTable = function () {\n        var tableInfo = this.getTable('post');\n        this.offset = tableInfo.offset;\n        var table = new TtfPostTable();\n        table.formatType = this.readFixed(this.offset);\n        table.italicAngle = this.readFixed(this.offset);\n        table.underlinePosition = this.readInt16(this.offset);\n        table.underlineThickness = this.readInt16(this.offset);\n        table.isFixedPitch = this.readUInt32(this.offset);\n        table.minType42 = this.readUInt32(this.offset);\n        table.maxType42 = this.readUInt32(this.offset);\n        table.minType1 = this.readUInt32(this.offset);\n        table.maxType1 = this.readUInt32(this.offset);\n        return table;\n    };\n    /**\n     * Reads Width of the glyphs.\n     */\n    TtfReader.prototype.readWidthTable = function (glyphCount, unitsPerEm) {\n        var tableInfo = this.getTable('hmtx');\n        this.offset = tableInfo.offset;\n        var width = [];\n        for (var i = 0; i < glyphCount; i++) {\n            var glyph = new TtfLongHorMetric();\n            glyph.advanceWidth = this.readUInt16(this.offset);\n            glyph.lsb = this.readInt16(this.offset);\n            var glyphWidth = glyph.advanceWidth * 1000 / unitsPerEm;\n            width.push(Math.floor(glyphWidth));\n        }\n        return width;\n    };\n    /**\n     * Reads the cmap table.\n     */\n    TtfReader.prototype.readCmapTable = function () {\n        var tableInfo = this.getTable('cmap');\n        this.offset = tableInfo.offset;\n        var table = new TtfCmapTable();\n        table.version = this.readUInt16(this.offset);\n        table.tablesCount = this.readUInt16(this.offset);\n        var position = this.offset;\n        var subTables = [];\n        for (var i = 0; i < table.tablesCount; i++) {\n            this.offset = position;\n            var subTable = new TtfCmapSubTable();\n            subTable.platformID = this.readUInt16(this.offset);\n            subTable.encodingID = this.readUInt16(this.offset);\n            subTable.offset = this.readUInt32(this.offset);\n            position = this.offset;\n            this.readCmapSubTable(subTable);\n            subTables[i] = subTable;\n        }\n        return subTables;\n    };\n    /**\n     * Reads the cmap sub table.\n     */\n    TtfReader.prototype.readCmapSubTable = function (subTable) {\n        var tableInfo = this.getTable('cmap');\n        this.offset = tableInfo.offset + subTable.offset;\n        var format = this.readUInt16(this.offset);\n        var encoding = this.getCmapEncoding(subTable.platformID, subTable.encodingID);\n        var platform = (encoding === TtfCmapEncoding.Macintosh) ? TtfPlatformID.Macintosh : TtfPlatformID.Microsoft;\n        if (encoding !== TtfCmapEncoding.Unknown) {\n            switch (format) {\n                case TtfCmapFormat.Apple:\n                    this.readAppleCmapTable(subTable, encoding);\n                    break;\n                case TtfCmapFormat.Microsoft:\n                    this.readMicrosoftCmapTable(subTable, encoding);\n                    break;\n                case TtfCmapFormat.Trimmed:\n                    this.readTrimmedCmapTable(subTable, encoding);\n                    break;\n            }\n        }\n    };\n    /**\n     * Reads Symbol cmap table.\n     */\n    TtfReader.prototype.readAppleCmapTable = function (subTable, encoding) {\n        var tableInfo = this.getTable('cmap');\n        this.offset = tableInfo.offset + subTable.offset;\n        var table = new TtfAppleCmapSubTable();\n        table.format = this.readUInt16(this.offset);\n        table.length = this.readUInt16(this.offset);\n        table.version = this.readUInt16(this.offset);\n        if (this.maxMacIndex === null || this.maxMacIndex === undefined) {\n            this.maxMacIndex = 0;\n        }\n        for (var i = 0; i < 256; ++i) {\n            var glyphInfo = new TtfGlyphInfo();\n            glyphInfo.index = this.readByte(this.offset);\n            glyphInfo.width = this.getWidth(glyphInfo.index);\n            glyphInfo.charCode = i;\n            this.macintosh.setValue(i, glyphInfo);\n            this.addGlyph(glyphInfo, encoding);\n            // NOTE: this code fixes char codes that extends 0x100. However, it might corrupt something.\n            this.maxMacIndex = Math.max(i, this.maxMacIndex);\n        }\n    };\n    /**\n     * Reads Symbol cmap table.\n     */\n    TtfReader.prototype.readMicrosoftCmapTable = function (subTable, encoding) {\n        var tableInfo = this.getTable('cmap');\n        this.offset = tableInfo.offset + subTable.offset;\n        var collection = (encoding === TtfCmapEncoding.Unicode) ? this.microsoft : this.macintosh;\n        var table = new TtfMicrosoftCmapSubTable();\n        table.format = this.readUInt16(this.offset);\n        table.length = this.readUInt16(this.offset);\n        table.version = this.readUInt16(this.offset);\n        table.segCountX2 = this.readUInt16(this.offset);\n        table.searchRange = this.readUInt16(this.offset);\n        table.entrySelector = this.readUInt16(this.offset);\n        table.rangeShift = this.readUInt16(this.offset);\n        var segCount = table.segCountX2 / 2;\n        table.endCount = this.readUshortArray(segCount);\n        table.reservedPad = this.readUInt16(this.offset);\n        table.startCount = this.readUshortArray(segCount);\n        table.idDelta = this.readUshortArray(segCount);\n        table.idRangeOffset = this.readUshortArray(segCount);\n        var length = (table.length / 2 - 8) - (segCount * 4);\n        table.glyphID = this.readUshortArray(length);\n        // Process glyphIdArray array.\n        var codeOffset = 0;\n        var index = 0;\n        for (var j = 0; j < segCount; j++) {\n            for (var k = table.startCount[j]; k <= table.endCount[j] && k !== 65535; k++) {\n                if (table.idRangeOffset[j] === 0) {\n                    codeOffset = (k + table.idDelta[j]) & 65535;\n                }\n                else {\n                    index = j + table.idRangeOffset[j] / 2 - segCount + k - table.startCount[j];\n                    if (index >= table.glyphID.length) {\n                        continue;\n                    }\n                    codeOffset = (table.glyphID[index] + table.idDelta[j]) & 65535;\n                }\n                var glyph = new TtfGlyphInfo();\n                glyph.index = codeOffset;\n                glyph.width = this.getWidth(glyph.index);\n                var id = (encoding === TtfCmapEncoding.Symbol) ? ((k & 0xff00) === 0xf000 ? k & 0xff : k) : k;\n                glyph.charCode = id;\n                collection.setValue(id, glyph);\n                this.addGlyph(glyph, encoding);\n            }\n        }\n    };\n    /**\n     * Reads Trimed cmap table.\n     */\n    TtfReader.prototype.readTrimmedCmapTable = function (subTable, encoding) {\n        var tableInfo = this.getTable('cmap');\n        this.offset = tableInfo.offset + subTable.offset;\n        var table = new TtfTrimmedCmapSubTable();\n        table.format = this.readUInt16(this.offset);\n        table.length = this.readUInt16(this.offset);\n        table.version = this.readUInt16(this.offset);\n        table.firstCode = this.readUInt16(this.offset);\n        table.entryCount = this.readUInt16(this.offset);\n        for (var i = 0; i < table.entryCount; ++i) {\n            var glyphInfo = new TtfGlyphInfo();\n            glyphInfo.index = this.readUInt16(this.offset);\n            glyphInfo.width = this.getWidth(glyphInfo.index);\n            glyphInfo.charCode = i + table.firstCode;\n            this.macintosh.setValue(i, glyphInfo);\n            this.addGlyph(glyphInfo, encoding);\n            // NOTE: this code fixes char codes that extends 0x100. However, it might corrupt something.\n            this.maxMacIndex = Math.max(i, this.maxMacIndex);\n        }\n    };\n    TtfReader.prototype.initializeFontName = function (nameTable) {\n        for (var i = 0; i < nameTable.recordsCount; i++) {\n            var record = nameTable.nameRecords[i];\n            if (record.nameID === 1) {\n                //font family\n                this.metrics.fontFamily = record.name;\n            }\n            else if (record.nameID === 6) {\n                //post script name\n                this.metrics.postScriptName = record.name;\n            }\n            /* tslint:disable */\n            if (this.metrics.fontFamily !== null && this.metrics.fontFamily !== undefined && this.metrics.postScriptName !== null && this.metrics.postScriptName !== undefined) {\n                break;\n            }\n            /* tslint:disable */\n        }\n    };\n    TtfReader.prototype.getTable = function (name) {\n        // if (name === null) {\n        //     throw new Error('Argument Null Exception : name');\n        // }\n        var table = new TtfTableInfo();\n        var obj;\n        if (this.tableDirectory.containsKey(name)) {\n            obj = this.tableDirectory.getValue(name);\n        }\n        if (obj !== null && obj !== undefined) {\n            table = obj;\n        }\n        return table;\n    };\n    /**\n     * Returns width of the glyph.\n     */\n    TtfReader.prototype.getWidth = function (glyphCode) {\n        glyphCode = (glyphCode < this.width.length) ? glyphCode : this.width.length - 1;\n        return this.width[glyphCode];\n    };\n    /**\n     * Gets CMAP encoding based on platform ID and encoding ID.\n     */\n    /* tslint:disable */\n    TtfReader.prototype.getCmapEncoding = function (platformID, encodingID) {\n        var format = TtfCmapEncoding.Unknown;\n        if (platformID == TtfPlatformID.Microsoft && encodingID == TtfMicrosoftEncodingID.Undefined) {\n            // When building a symbol font for Windows,\n            // the platform ID should be 3 and the encoding ID should be 0.\n            format = TtfCmapEncoding.Symbol;\n        }\n        else if (platformID == TtfPlatformID.Microsoft && encodingID == TtfMicrosoftEncodingID.Unicode) {\n            // When building a Unicode font for Windows,\n            // the platform ID should be 3 and the encoding ID should be 1.\n            format = TtfCmapEncoding.Unicode;\n        }\n        else if (platformID == TtfPlatformID.Macintosh && encodingID == TtfMacintoshEncodingID.Roman) {\n            // When building a font that will be used on the Macintosh,\n            // the platform ID should be 1 and the encoding ID should be 0.\n            format = TtfCmapEncoding.Macintosh;\n        }\n        return format;\n    };\n    /* tslint:enable */\n    /**\n     * Adds glyph to the collection.\n     */\n    TtfReader.prototype.addGlyph = function (glyph, encoding) {\n        var collection = null;\n        switch (encoding) {\n            case TtfCmapEncoding.Unicode:\n                collection = this.microsoftGlyphs;\n                break;\n            case TtfCmapEncoding.Macintosh:\n            case TtfCmapEncoding.Symbol:\n                collection = this.macintoshGlyphs;\n                break;\n        }\n        collection.setValue(glyph.index, glyph);\n    };\n    /**\n     * Initializes metrics.\n     */\n    /* tslint:disable */\n    TtfReader.prototype.initializeMetrics = function (nameTable, headTable, horizontalHeadTable, os2Table, postTable, cmapTables) {\n        /* tslint:enable */\n        // if (cmapTables === null) {\n        //     throw new Error('ArgumentNullException : cmapTables');\n        // }\n        this.initializeFontName(nameTable);\n        // Get font encoding.\n        var bSymbol = false;\n        for (var i = 0; i < cmapTables.length; i++) {\n            var subTable = cmapTables[i];\n            var encoding = this.getCmapEncoding(subTable.platformID, subTable.encodingID);\n            if (encoding === TtfCmapEncoding.Symbol) {\n                bSymbol = true;\n                break;\n            }\n        }\n        this.metrics.isSymbol = bSymbol;\n        this.metrics.macStyle = headTable.macStyle;\n        this.metrics.isFixedPitch = (postTable.isFixedPitch !== 0);\n        this.metrics.italicAngle = postTable.italicAngle;\n        var factor = 1000 / headTable.unitsPerEm;\n        this.metrics.winAscent = os2Table.sTypoAscender * factor;\n        this.metrics.macAscent = horizontalHeadTable.ascender * factor;\n        //m_metrics.MacAscent = os2Table.UsWinAscent * factor;\n        // NOTE: This is stange workaround. The value is good if os2Table.SCapHeight != 0, otherwise it should be properly computed.\n        this.metrics.capHeight = (os2Table.sCapHeight !== 0) ? os2Table.sCapHeight : 0.7 * headTable.unitsPerEm * factor;\n        this.metrics.winDescent = os2Table.sTypoDescender * factor;\n        this.metrics.macDescent = horizontalHeadTable.descender * factor;\n        //m_metrics.MacDescent = -os2Table.UsWinDescent * factor;\n        this.metrics.leading = (os2Table.sTypoAscender - os2Table.sTypoDescender + os2Table.sTypoLineGap) * factor;\n        this.metrics.lineGap = Math.ceil(horizontalHeadTable.lineGap * factor);\n        var left = headTable.xMin * factor;\n        var top = Math.ceil(this.metrics.macAscent + this.metrics.lineGap);\n        var right = headTable.xMax * factor;\n        var bottom = this.metrics.macDescent;\n        this.metrics.fontBox = new Rectangle(left, top, right, bottom);\n        // NOTE: Strange!\n        this.metrics.stemV = 80;\n        this.metrics.widthTable = this.updateWidth();\n        this.metrics.contains = this.tableDirectory.containsKey('CFF');\n        this.metrics.subScriptSizeFactor = headTable.unitsPerEm / os2Table.ySubscriptYSize;\n        this.metrics.superscriptSizeFactor = headTable.unitsPerEm / os2Table.ySuperscriptYSize;\n    };\n    /**\n     * Updates chars structure which is used in the case of ansi encoding (256 bytes).\n     */\n    TtfReader.prototype.updateWidth = function () {\n        var count = 256;\n        var bytes = [];\n        if (this.metrics.isSymbol) {\n            for (var i = 0; i < count; i++) {\n                var glyphInfo = this.getGlyph(String.fromCharCode(i));\n                bytes[i] = (glyphInfo.empty) ? 0 : glyphInfo.width;\n            }\n        }\n        else {\n            var byteToProcess = [];\n            var unknown = '?';\n            var space = String.fromCharCode(32);\n            for (var i = 0; i < count; i++) {\n                byteToProcess[0] = i;\n                var text = this.getString(byteToProcess, 0, byteToProcess.length);\n                var ch = (text.length > 0) ? text[0] : unknown;\n                var glyphInfo = this.getGlyph(ch);\n                if (!glyphInfo.empty) {\n                    bytes[i] = glyphInfo.width;\n                }\n                else {\n                    glyphInfo = this.getGlyph(space);\n                    bytes[i] = (glyphInfo.empty) ? 0 : glyphInfo.width;\n                }\n            }\n        }\n        return bytes;\n    };\n    /**\n     * Returns default glyph.\n     */\n    TtfReader.prototype.getDefaultGlyph = function () {\n        var glyph = this.getGlyph(StringTokenizer.whiteSpace);\n        return glyph;\n    };\n    /**\n     * Reads unicode string from byte array.\n     */\n    TtfReader.prototype.getString = function (byteToProcess, start, length) {\n        var result = '';\n        for (var index = 0; index < length; index++) {\n            result += String.fromCharCode(byteToProcess[index + start]);\n        }\n        return result;\n    };\n    /**\n     * Reads loca table.\n     */\n    TtfReader.prototype.readLocaTable = function (bShort) {\n        var tableInfo = this.getTable('loca');\n        this.offset = tableInfo.offset;\n        var table = new TtfLocaTable();\n        var buffer = null;\n        if (bShort) {\n            var len = tableInfo.length / 2;\n            buffer = [];\n            for (var i = 0; i < len; i++) {\n                buffer[i] = this.readUInt16(this.offset) * 2;\n            }\n        }\n        else {\n            var len = tableInfo.length / 4;\n            buffer = [];\n            for (var i = 0; i < len; i++) {\n                buffer[i] = this.readUInt32(this.offset);\n            }\n        }\n        table.offsets = buffer;\n        return table;\n    };\n    /**\n     * Updates hash table of used glyphs.\n     */\n    TtfReader.prototype.updateGlyphChars = function (glyphChars, locaTable) {\n        // if (glyphChars === null) {\n        //     throw new Error('Argument Null Exception : glyphChars');\n        // }\n        // Add zero key.\n        if (!glyphChars.containsKey(0)) {\n            glyphChars.setValue(0, 0);\n        }\n        var clone = new Dictionary();\n        var glyphCharKeys = glyphChars.keys();\n        for (var i = 0; i < glyphCharKeys.length; i++) {\n            clone.setValue(glyphCharKeys[i], glyphChars.getValue(glyphCharKeys[i]));\n        }\n        for (var i = 0; i < glyphCharKeys.length; i++) {\n            var nextKey = glyphCharKeys[i];\n            this.processCompositeGlyph(glyphChars, nextKey, locaTable);\n        }\n    };\n    /**\n     * Checks if glyph is composite or not.\n     */\n    TtfReader.prototype.processCompositeGlyph = function (glyphChars, glyph, locaTable) {\n        // if (glyphChars === null) {\n        //     throw new Error('Argument Null Exception : glyphChars');\n        // }\n        // Is in range.\n        if (glyph < locaTable.offsets.length - 1) {\n            var glyphOffset = locaTable.offsets[glyph];\n            if (glyphOffset !== locaTable.offsets[glyph + 1]) {\n                var tableInfo = this.getTable('glyf');\n                this.offset = tableInfo.offset + glyphOffset;\n                var glyphHeader = new TtfGlyphHeader();\n                glyphHeader.numberOfContours = this.readInt16(this.offset);\n                glyphHeader.xMin = this.readInt16(this.offset);\n                glyphHeader.yMin = this.readInt16(this.offset);\n                glyphHeader.xMax = this.readInt16(this.offset);\n                glyphHeader.yMax = this.readInt16(this.offset);\n                // Glyph is composite.\n                if (glyphHeader.numberOfContours < 0) {\n                    var skipBytes = 0;\n                    var entry = true;\n                    while (entry) {\n                        var flags = this.readUInt16(this.offset);\n                        var glyphIndex = this.readUInt16(this.offset);\n                        if (!glyphChars.containsKey(glyphIndex)) {\n                            glyphChars.setValue(glyphIndex, 0);\n                        }\n                        if ((flags & TtfCompositeGlyphFlags.MoreComponents) === 0) {\n                            break;\n                        }\n                        skipBytes = ((flags & TtfCompositeGlyphFlags.Arg1And2AreWords) !== 0) ? 4 : 2;\n                        if ((flags & TtfCompositeGlyphFlags.WeHaveScale) !== 0) {\n                            skipBytes += 2;\n                        }\n                        else if ((flags & TtfCompositeGlyphFlags.WeHaveAnXyScale) !== 0) {\n                            skipBytes += 4;\n                        }\n                        else if ((flags & TtfCompositeGlyphFlags.WeHaveTwoByTwo) !== 0) {\n                            skipBytes += 2 * 4;\n                        }\n                        this.offset += skipBytes;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Creates new glyph tables based on chars that are used for output.\n     */\n    /* tslint:disable */\n    TtfReader.prototype.generateGlyphTable = function (glyphChars, locaTable, newLocaTable, newGlyphTable) {\n        /* tslint:enable */\n        // if (glyphChars === null) {\n        //     throw new Error('Argument Null Exception : glyphChars');\n        // }\n        newLocaTable = [];\n        // Sorting used glyphs keys.\n        var activeGlyphs = glyphChars.keys();\n        activeGlyphs.sort(function (a, b) { return a - b; });\n        var glyphSize = 0;\n        for (var i = 0; i < activeGlyphs.length; i++) {\n            var glyphIndex = activeGlyphs[i];\n            if (locaTable.offsets.length > 0) {\n                glyphSize += locaTable.offsets[glyphIndex + 1] - locaTable.offsets[glyphIndex];\n            }\n        }\n        var glyphSizeAligned = this.align(glyphSize);\n        newGlyphTable = [];\n        for (var i = 0; i < glyphSizeAligned; i++) {\n            newGlyphTable.push(0);\n        }\n        var nextGlyphOffset = 0;\n        var nextGlyphIndex = 0;\n        var table = this.getTable('glyf');\n        // Creating NewLocaTable - that would hold offsets for filtered glyphs.\n        for (var i = 0; i < locaTable.offsets.length; i++) {\n            newLocaTable.push(nextGlyphOffset);\n            if (nextGlyphIndex < activeGlyphs.length && activeGlyphs[nextGlyphIndex] === i) {\n                ++nextGlyphIndex;\n                newLocaTable[i] = nextGlyphOffset;\n                var oldGlyphOffset = locaTable.offsets[i];\n                var oldNextGlyphOffset = locaTable.offsets[i + 1] - oldGlyphOffset;\n                if (oldNextGlyphOffset > 0) {\n                    this.offset = table.offset + oldGlyphOffset;\n                    var result = this.read(newGlyphTable, nextGlyphOffset, oldNextGlyphOffset);\n                    newGlyphTable = result.buffer;\n                    nextGlyphOffset += oldNextGlyphOffset;\n                }\n            }\n        }\n        return { glyphTableSize: glyphSize, newLocaTable: newLocaTable, newGlyphTable: newGlyphTable };\n    };\n    /**\n     * Updates new Loca table.\n     */\n    /* tslint:disable */\n    TtfReader.prototype.updateLocaTable = function (newLocaTable, bLocaIsShort, newLocaTableOut) {\n        /* tslint:enable */\n        if (newLocaTable === null) {\n            throw new Error('Argument Null Exception : newLocaTable');\n        }\n        var size = (bLocaIsShort) ? newLocaTable.length * 2 : newLocaTable.length * 4;\n        var count = this.align(size);\n        //BigEndianWiter\n        var writer = new BigEndianWriter(count);\n        for (var i = 0; i < newLocaTable.length; i++) {\n            var value = newLocaTable[i];\n            if (bLocaIsShort) {\n                value /= 2;\n                writer.writeShort(value);\n            }\n            else {\n                writer.writeInt(value);\n            }\n        }\n        return { newLocaUpdated: writer.data, newLocaSize: size };\n    };\n    /**\n     * Aligns number to be divisible on 4.\n     */\n    TtfReader.prototype.align = function (value) {\n        return (value + 3) & (~3);\n    };\n    /**\n     * Returns font program data.\n     */\n    /* tslint:disable */\n    TtfReader.prototype.getFontProgram = function (newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize) {\n        /* tslint:enable */\n        if (newLocaTableOut === null) {\n            throw new Error('Argument Null Exception : newLocaTableOut');\n        }\n        if (newGlyphTable === null) {\n            throw new Error('Argument Null Exception : newGlyphTable');\n        }\n        var tableNames = this.tableNames;\n        var result = this.getFontProgramLength(newLocaTableOut, newGlyphTable, 0);\n        var fontProgramLength = result.fontProgramLength;\n        var numTables = result.numTables;\n        var writer = new BigEndianWriter(fontProgramLength);\n        writer.writeInt(0x10000);\n        writer.writeShort(numTables);\n        var entrySelector = this.entrySelectors[numTables];\n        writer.writeShort((1 << (entrySelector & 31)) * 16);\n        writer.writeShort(entrySelector);\n        writer.writeShort((numTables - (1 << (entrySelector & 31))) * 16);\n        // Writing to destination buffer - checksums && sizes of used tables.\n        this.writeCheckSums(writer, numTables, newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize);\n        // // Writing to destination buffer - used glyphs.\n        this.writeGlyphs(writer, newLocaTableOut, newGlyphTable);\n        return writer.data;\n    };\n    /* tslint:disable */\n    TtfReader.prototype.getFontProgramLength = function (newLocaTableOut, newGlyphTable, numTables) {\n        /* tslint:enable */\n        if (newLocaTableOut === null) {\n            throw new Error('Argument Null Exception : newLocaTableOut');\n        }\n        if (newGlyphTable === null) {\n            throw new Error('Argument Null Exception : newGlyphTable');\n        }\n        // glyf and loca are used by default;\n        numTables = 2;\n        var tableNames = this.tableNames;\n        var fontProgramLength = 0;\n        for (var i = 0; i < tableNames.length; i++) {\n            var tableName = tableNames[i];\n            if (tableName !== 'glyf' && tableName !== 'loca') {\n                var table = this.getTable(tableName);\n                if (!table.empty) {\n                    ++numTables;\n                    fontProgramLength += this.align(table.length);\n                }\n            }\n        }\n        fontProgramLength += newLocaTableOut.length;\n        fontProgramLength += newGlyphTable.length;\n        var usedTablesSize = numTables * 16 + (3 * 4);\n        fontProgramLength += usedTablesSize;\n        return { fontProgramLength: fontProgramLength, numTables: numTables };\n    };\n    /**\n     * Writing to destination buffer - checksums and sizes of used tables.\n     */\n    /* tslint:disable */\n    TtfReader.prototype.writeCheckSums = function (writer, numTables, newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize) {\n        /* tslint:enable */\n        if (writer === null) {\n            throw new Error('Argument Null Exception : writer');\n        }\n        if (newLocaTableOut === null) {\n            throw new Error('Argument Null Exception : newLocaTableOut');\n        }\n        if (newGlyphTable === null) {\n            throw new Error('Argument Null Exception : newGlyphTable');\n        }\n        var tableNames = this.tableNames;\n        var usedTablesSize = numTables * 16 + (3 * 4);\n        var nextTableSize = 0;\n        for (var i = 0; i < tableNames.length; i++) {\n            var tableName = tableNames[i];\n            var tableInfo = this.getTable(tableName);\n            if (tableInfo.empty) {\n                continue;\n            }\n            writer.writeString(tableName);\n            if (tableName === 'glyf') {\n                var checksum = this.calculateCheckSum(newGlyphTable);\n                writer.writeInt(checksum);\n                nextTableSize = glyphTableSize;\n            }\n            else if (tableName === 'loca') {\n                var checksum = this.calculateCheckSum(newLocaTableOut);\n                writer.writeInt(checksum);\n                nextTableSize = locaTableSize;\n            }\n            else {\n                writer.writeInt(tableInfo.checksum);\n                nextTableSize = tableInfo.length;\n            }\n            writer.writeUInt(usedTablesSize);\n            writer.writeUInt(nextTableSize);\n            usedTablesSize += this.align(nextTableSize);\n        }\n    };\n    /**\n     * Gets checksum from source buffer.\n     */\n    TtfReader.prototype.calculateCheckSum = function (bytes) {\n        if (bytes === null) {\n            throw new Error('Argument Null Exception : bytes');\n        }\n        var pos = 0;\n        var byte1 = 0;\n        var byte2 = 0;\n        var byte3 = 0;\n        var byte4 = 0;\n        for (var i = 0; i < (bytes.length + 1) / 4; i++) {\n            byte4 += (bytes[pos++] & 255);\n            byte3 += (bytes[pos++] & 255);\n            byte2 += (bytes[pos++] & 255);\n            byte1 += (bytes[pos++] & 255);\n        }\n        var result = byte1;\n        result += (byte2 << 8);\n        result += (byte3 << 16);\n        result += (byte4 << 24);\n        return result;\n    };\n    /**\n     * Writing to destination buffer - used glyphs.\n     */\n    TtfReader.prototype.writeGlyphs = function (writer, newLocaTable, newGlyphTable) {\n        if (writer === null) {\n            throw new Error('Argument Null Exception : writer');\n        }\n        if (newLocaTable === null) {\n            throw new Error('Argument Null Exception : newLocaTableOut');\n        }\n        if (newGlyphTable === null) {\n            throw new Error('Argument Null Exception : newGlyphTable');\n        }\n        var tableNames = this.tableNames;\n        for (var i = 0; i < tableNames.length; i++) {\n            var tableName = tableNames[i];\n            var tableInfo = this.getTable(tableName);\n            if (tableInfo.empty) {\n                continue;\n            }\n            if (tableName === 'glyf') {\n                writer.writeBytes(newGlyphTable);\n            }\n            else if (tableName === 'loca') {\n                writer.writeBytes(newLocaTable);\n            }\n            else {\n                var count = this.align(tableInfo.length);\n                var buff = [];\n                for (var i_1 = 0; i_1 < count; i_1++) {\n                    buff.push(0);\n                }\n                this.offset = tableInfo.offset;\n                var result = this.read(buff, 0, tableInfo.length);\n                writer.writeBytes(result.buffer);\n            }\n        }\n    };\n    //public methods\n    /**\n     * Sets position value of font data.\n     */\n    TtfReader.prototype.setOffset = function (offset) {\n        this.offset = offset;\n    };\n    /**\n     * Creates font Internals\n     * @private\n     */\n    TtfReader.prototype.createInternals = function () {\n        this.metrics = new TtfMetrics();\n        var nameTable = this.readNameTable();\n        var headTable = this.readHeadTable();\n        this.bIsLocaShort = (headTable.indexToLocalFormat === 0);\n        var horizontalHeadTable = this.readHorizontalHeaderTable();\n        var os2Table = this.readOS2Table();\n        var postTable = this.readPostTable();\n        this.width = this.readWidthTable(horizontalHeadTable.numberOfHMetrics, headTable.unitsPerEm);\n        var subTables = this.readCmapTable();\n        this.initializeMetrics(nameTable, headTable, horizontalHeadTable, os2Table, postTable, subTables);\n    };\n    TtfReader.prototype.getGlyph = function (charCode) {\n        if (typeof charCode === 'number') {\n            var obj1 = null;\n            if (!this.metrics.isSymbol && this.microsoftGlyphs != null) {\n                if (this.microsoftGlyphs.containsKey(charCode)) {\n                    obj1 = this.microsoftGlyphs.getValue(charCode);\n                }\n            }\n            else if (this.metrics.isSymbol && this.macintoshGlyphs != null) {\n                if (this.macintoshGlyphs.containsKey(charCode)) {\n                    obj1 = this.macintoshGlyphs.getValue(charCode);\n                }\n            }\n            var glyph = (obj1 != null) ? obj1 : this.getDefaultGlyph();\n            return glyph;\n        }\n        else {\n            var obj = null;\n            var code = charCode.charCodeAt(0);\n            if (!this.metrics.isSymbol && this.microsoft !== null) {\n                if (this.microsoft.containsKey(code)) {\n                    obj = this.microsoft.getValue(code);\n                    if (code !== StringTokenizer.whiteSpace.charCodeAt(0)) {\n                        this.isFontPresent = true;\n                    }\n                }\n                else if (code !== StringTokenizer.whiteSpace.charCodeAt(0)) {\n                    this.isFontPresent = false;\n                }\n            }\n            else if (this.metrics.isSymbol && this.macintosh !== null || this.isMacTTF) {\n                // NOTE: this code fixes char codes that extends 0x100. However, it might corrupt something.\n                if (this.maxMacIndex !== 0) {\n                    code %= this.maxMacIndex + 1;\n                }\n                else {\n                    code = ((code & 0xff00) === 0xf000 ? code & 0xff : code);\n                }\n                if (this.macintosh.containsKey(code)) {\n                    obj = this.macintosh.getValue(code);\n                    this.isFontPresent = true;\n                }\n            }\n            // Fix for StackOverFlow exception in XPS to PDF converter\n            if (charCode === StringTokenizer.whiteSpace && obj === null) {\n                obj = new TtfGlyphInfo();\n            }\n            var glyph = (obj !== null) ? obj : this.getDefaultGlyph();\n            return glyph;\n        }\n    };\n    /**\n     * Gets hash table with chars indexed by glyph index.\n     */\n    TtfReader.prototype.getGlyphChars = function (chars) {\n        if (chars === null || chars === undefined) {\n            throw new Error('Argument Null Exception : chars');\n        }\n        var dictionary = new Dictionary();\n        var charKeys = chars.keys();\n        for (var i = 0; i < charKeys.length; i++) {\n            var ch = charKeys[i];\n            var glyph = this.getGlyph(ch);\n            if (!glyph.empty) {\n                dictionary.setValue(glyph.index, ch.charCodeAt(0));\n            }\n        }\n        return dictionary;\n    };\n    /**\n     * Gets all glyphs.\n     */\n    TtfReader.prototype.getAllGlyphs = function () {\n        var allGlyphInfo = [];\n        var info = new TtfGlyphInfo();\n        var index = 0;\n        for (var i = 0; i < this.width.length; i++) {\n            var width = this.width[i];\n            info.index = index;\n            info.width = width;\n            allGlyphInfo.push(info);\n            index++;\n        }\n        return allGlyphInfo;\n    };\n    /**\n     * Reads a font's program.\n     * @private\n     */\n    TtfReader.prototype.readFontProgram = function (chars) {\n        var glyphChars = this.getGlyphChars(chars);\n        var locaTable = this.readLocaTable(this.bIsLocaShort);\n        if (glyphChars.size() < chars.size()) {\n            this.missedGlyphs = chars.size() - glyphChars.size();\n        }\n        this.updateGlyphChars(glyphChars, locaTable);\n        /* tslint:disable */\n        var result1 = this.generateGlyphTable(glyphChars, locaTable, null, null);\n        /* tslint:enable */\n        var glyphTableSize = result1.glyphTableSize;\n        var newLocaTable = result1.newLocaTable;\n        var newGlyphTable = result1.newGlyphTable;\n        var result2 = this.updateLocaTable(newLocaTable, this.bIsLocaShort, null);\n        var newLocaSize = result2.newLocaSize;\n        var newLocaUpdated = result2.newLocaUpdated;\n        var fontProgram = this.getFontProgram(newLocaUpdated, newGlyphTable, glyphTableSize, newLocaSize);\n        return fontProgram;\n    };\n    /**\n     * Reconverts string to be in proper format saved into PDF file.\n     */\n    TtfReader.prototype.convertString = function (text) {\n        if (text === null) {\n            throw new Error('Argument Null Exception : text');\n        }\n        var glyph = '';\n        var i = 0;\n        for (var k = 0; k < text.length; k++) {\n            var ch = text[k];\n            var glyphInfo = this.getGlyph(ch);\n            if (!glyphInfo.empty) {\n                glyph += String.fromCharCode(glyphInfo.index);\n                i++;\n            }\n        }\n        return glyph;\n    };\n    /**\n     * Gets char width.\n     */\n    TtfReader.prototype.getCharWidth = function (code) {\n        var glyphInfo = this.getGlyph(code);\n        glyphInfo = (!glyphInfo.empty) ? glyphInfo : this.getDefaultGlyph();\n        var codeWidth = (!glyphInfo.empty) ? glyphInfo.width : 0;\n        return codeWidth;\n    };\n    TtfReader.prototype.readString = function (length, isUnicode) {\n        if (isUnicode === undefined) {\n            return this.readString(length, false);\n        }\n        else {\n            //let buffer : number[] = this.readBytes(length);\n            var result = '';\n            if (isUnicode) {\n                for (var i = 0; i < length; i++) {\n                    if (i % 2 !== 0) {\n                        result += String.fromCharCode(this.fontData[this.offset]);\n                    }\n                    this.offset += 1;\n                }\n            }\n            else {\n                for (var i = 0; i < length; i++) {\n                    result += String.fromCharCode(this.fontData[this.offset]);\n                    this.offset += 1;\n                }\n            }\n            return result;\n        }\n    };\n    TtfReader.prototype.readFixed = function (offset) {\n        var integer = this.readInt16(offset);\n        var sFraction = this.readInt16(offset + 2);\n        var fraction = sFraction / 16384;\n        return integer + fraction;\n    };\n    TtfReader.prototype.readInt32 = function (offset) {\n        var i1 = this.fontData[offset + 3];\n        var i2 = this.fontData[offset + 2];\n        var i3 = this.fontData[offset + 1];\n        var i4 = this.fontData[offset];\n        this.offset += 4;\n        return i1 + (i2 << 8) + (i3 << 16) + (i4 << 24);\n    };\n    TtfReader.prototype.readUInt32 = function (offset) {\n        var i1 = this.fontData[offset + 3];\n        var i2 = this.fontData[offset + 2];\n        var i3 = this.fontData[offset + 1];\n        var i4 = this.fontData[offset];\n        this.offset += 4;\n        return (i1 | i2 << 8 | i3 << 16 | i4 << 24);\n    };\n    // private readInt16(offset : number) : number {\n    //     let result : number = (this.fontData[offset] << 8) + this.fontData[offset + 1];\n    //     this.offset += 2;\n    //     return result;\n    // }\n    TtfReader.prototype.readInt16 = function (offset) {\n        var result = (this.fontData[offset] << 8) + this.fontData[offset + 1];\n        result = result & (1 << 15) ? result - 0x10000 : result;\n        this.offset += 2;\n        return result;\n    };\n    TtfReader.prototype.readInt64 = function (offset) {\n        var low = this.readInt32(offset + 4);\n        var n = this.readInt32(offset) * 4294967296.0 + low;\n        if (low < 0) {\n            n += 4294967296;\n        }\n        return n;\n    };\n    TtfReader.prototype.readUInt16 = function (offset) {\n        var result = (this.fontData[offset] << 8) | this.fontData[offset + 1];\n        this.offset += 2;\n        return result;\n    };\n    /**\n     * Reads ushort array.\n     */\n    TtfReader.prototype.readUshortArray = function (length) {\n        var buffer = [];\n        for (var i = 0; i < length; i++) {\n            buffer[i] = this.readUInt16(this.offset);\n        }\n        return buffer;\n    };\n    TtfReader.prototype.readBytes = function (length) {\n        var result = [];\n        for (var i = 0; i < length; i++) {\n            result.push(this.fontData[this.offset]);\n            this.offset += 1;\n        }\n        return result;\n    };\n    TtfReader.prototype.readByte = function (offset) {\n        var result = this.fontData[offset];\n        this.offset += 1;\n        return result;\n    };\n    /**\n     * Reads bytes to array in BigEndian order.\n     * @private\n     */\n    TtfReader.prototype.read = function (buffer, index, count) {\n        if (buffer === null) {\n            throw new Error('Argument Null Exception : buffer');\n        }\n        var written = 0;\n        var read = 0;\n        do {\n            for (var i = 0; (i < count - written) && (this.offset + i < this.fontData.length); i++) {\n                buffer[index + i] = this.fontData[this.offset + i];\n            }\n            read = count - written;\n            this.offset += read;\n            written += read;\n        } while (written < count);\n        return { buffer: buffer, written: written };\n    };\n    return TtfReader;\n}());\nexport { TtfReader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}