{"ast":null,"code":"import { PdfNumber } from './pdf-number';\nimport { Operators } from './../input-output/pdf-operators';\n/**\n * `PdfArray` class is used to perform array related primitive operations.\n * @private\n */\n\nvar PdfArray =\n/** @class */\nfunction () {\n  function PdfArray(array) {\n    //Fields\n\n    /**\n     * `startMark` - '['\n     * @private\n     */\n    this.startMark = '[';\n    /**\n     * `endMark` - ']'.\n     * @private\n     */\n\n    this.endMark = ']';\n    /**\n     * Internal variable to store the `position`.\n     * @default -1\n     * @private\n     */\n\n    this.position9 = -1;\n    /**\n     * Internal variable to hold `cloned object`.\n     * @default null\n     * @private\n     */\n\n    this.clonedObject9 = null;\n    /**\n     * Represents the Font dictionary.\n     * @hidden\n     * @private\n     */\n\n    this.isFont = false;\n\n    if (typeof array === 'undefined') {\n      this.internalElements = [];\n    } else {\n      if (typeof array !== 'undefined' && !(array instanceof PdfArray)) {\n        var tempNumberArray = array;\n\n        for (var index = 0; index < tempNumberArray.length; index++) {\n          var pdfNumber = new PdfNumber(tempNumberArray[index]);\n          this.add(pdfNumber);\n        } // } else if (typeof array !== 'undefined' && (array instanceof PdfArray)) {\n\n      } else {\n        var tempArray = array; // if (tempArray.Elements.length > 0) {\n\n        this.internalElements = [];\n\n        for (var index = 0; index < tempArray.elements.length; index++) {\n          this.internalElements.push(tempArray.elements[index]);\n        } // }\n\n      }\n    }\n  } //property\n\n  /**\n   * Gets the `IPdfSavable` at the specified index.\n   * @private\n   */\n\n\n  PdfArray.prototype.items = function (index) {\n    // if (index < 0 || index >= this.Count) {\n    //     throw new Error('ArgumentOutOfRangeException : index, The index can\"t be less then zero or greater then Count.');\n    // }\n    return this.internalElements[index];\n  };\n\n  Object.defineProperty(PdfArray.prototype, \"count\", {\n    /**\n     * Gets the `count`.\n     * @private\n     */\n    get: function () {\n      return this.internalElements.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfArray.prototype, \"status\", {\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.status9;\n    },\n    set: function (value) {\n      this.status9 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfArray.prototype, \"isSaving\", {\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get: function () {\n      return this.isSaving9;\n    },\n    set: function (value) {\n      this.isSaving9 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfArray.prototype, \"clonedObject\", {\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get: function () {\n      return this.clonedObject9;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfArray.prototype, \"position\", {\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get: function () {\n      return this.position9;\n    },\n    set: function (value) {\n      this.position9 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfArray.prototype, \"objectCollectionIndex\", {\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.index9;\n    },\n    set: function (value) {\n      this.index9 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfArray.prototype, \"CrossTable\", {\n    /**\n     * Returns `PdfCrossTable` associated with the object.\n     * @private\n     */\n    get: function () {\n      return this.pdfCrossTable;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfArray.prototype, \"elements\", {\n    /**\n     * Gets the `elements` of the Pdf Array.\n     * @private\n     */\n    get: function () {\n      return this.internalElements;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * `Adds` the specified element to the PDF array.\n   * @private\n   */\n\n  PdfArray.prototype.add = function (element) {\n    // if (element === null) {\n    //     throw new Error('ArgumentNullException : obj');\n    // }\n    if (typeof this.internalElements === 'undefined') {\n      this.internalElements = [];\n    }\n\n    this.internalElements.push(element);\n    this.markedChange();\n  };\n  /**\n   * `Marks` the object changed.\n   * @private\n   */\n\n\n  PdfArray.prototype.markedChange = function () {\n    this.bChanged = true;\n  };\n  /**\n   * `Determines` whether the specified element is within the array.\n   * @private\n   */\n\n\n  PdfArray.prototype.contains = function (element) {\n    var returnValue = false;\n\n    for (var index = 0; index < this.internalElements.length; index++) {\n      var tempElement = this.internalElements[index];\n      var inputElement = element;\n\n      if (tempElement != null && typeof tempElement !== 'undefined' && inputElement != null && typeof inputElement !== 'undefined') {\n        if (tempElement.value === inputElement.value) {\n          return true;\n        }\n      } // if (this.internalElements[index] === element) {\n      //     returnValue = true;\n      // }\n\n    }\n\n    return returnValue;\n  };\n  /**\n   * Returns the `primitive object` of input index.\n   * @private\n   */\n\n\n  PdfArray.prototype.getItems = function (index) {\n    // if (index < 0 || index >= this.Count) {\n    //     throw new Error('ArgumentOutOfRangeException : index , The index can\"t be less then zero or greater then Count.');\n    // }\n    return this.internalElements[index];\n  };\n  /**\n   * `Saves` the object using the specified writer.\n   * @private\n   */\n\n\n  PdfArray.prototype.save = function (writer) {\n    // if (writer === null) {\n    //     throw new Error('ArgumentNullException : writer');\n    // }\n    writer.write(this.startMark);\n\n    for (var i = 0, len = this.count; i < len; i++) {\n      this.getItems(i).save(writer);\n\n      if (i + 1 !== len) {\n        writer.write(Operators.whiteSpace);\n      }\n    }\n\n    writer.write(this.endMark);\n  };\n  /**\n   * Creates a `copy of PdfArray`.\n   * @private\n   */\n\n\n  PdfArray.prototype.clone = function (crossTable) {\n    // if (this.clonedObject9 !== null && this.clonedObject9.CrossTable === crossTable) {\n    //     return this.clonedObject9;\n    // } else {\n    this.clonedObject9 = null; // Else clone the object.\n\n    var newArray = new PdfArray();\n\n    for (var index = 0; index < this.internalElements.length; index++) {\n      var obj = this.internalElements[index];\n      newArray.add(obj.clone(crossTable));\n    }\n\n    newArray.pdfCrossTable = crossTable;\n    this.clonedObject9 = newArray;\n    return newArray;\n  };\n  /**\n   * Creates filled PDF array `from the rectangle`.\n   * @private\n   */\n\n\n  PdfArray.fromRectangle = function (bounds) {\n    var values = [bounds.x, bounds.y, bounds.width, bounds.height];\n    var array = new PdfArray(values);\n    return array;\n  }; // /**\n  //  * Creates the rectangle from filled PDF array.\n  //  * @private\n  //  */\n  // public ToRectangle() : RectangleF {\n  //     if (this.Count < 4) {\n  //         throw Error('InvalidOperationException-Can not convert to rectangle.');\n  //     }\n  //     let x1 : number;\n  //     let x2 : number;\n  //     let y1 : number;\n  //     let y2 : number;\n  //     let num : PdfNumber = this.getItems(0) as PdfNumber;\n  //     x1 = num.IntValue;\n  //     num = this.getItems(1) as PdfNumber;\n  //     y1 = num.IntValue;\n  //     num = this.getItems(2) as PdfNumber;\n  //     x2 = num.IntValue;\n  //     num = this.getItems(3) as PdfNumber;\n  //     y2 = num.IntValue;\n  //     let x : number = Math.min(x1, x2);\n  //     let y : number = Math.min(y1, y2);\n  //     let width : number = Math.abs(x1 - x2);\n  //     let height : number = Math.abs(y1 - y2);\n  //     let rect : RectangleF = new RectangleF(new PointF(x, y), new SizeF(width, height));\n  //     return rect;\n  // }\n\n  /**\n   * `Inserts` the element into the array.\n   * @private\n   */\n\n\n  PdfArray.prototype.insert = function (index, element) {\n    if (index < this.internalElements.length && index > 0) {\n      var tempElements = [];\n\n      for (var i = 0; i < index; i++) {\n        tempElements.push(this.internalElements[i]);\n      }\n\n      tempElements.push(element);\n\n      for (var i = index; i < this.internalElements.length; i++) {\n        tempElements.push(this.internalElements[i]);\n      }\n\n      this.internalElements = tempElements;\n    } else {\n      this.internalElements.push(element);\n    }\n\n    this.markChanged();\n  };\n  /**\n   * `Checks whether array contains the element`.\n   * @private\n   */\n\n\n  PdfArray.prototype.indexOf = function (element) {\n    return this.internalElements.indexOf(element);\n  };\n  /**\n   * `Removes` element from the array.\n   * @private\n   */\n\n\n  PdfArray.prototype.remove = function (element) {\n    // if (element === null) {\n    //     throw new Error('ArgumentNullException : element');\n    // }\n    var index = this.internalElements.indexOf(element); // if (index >= 0 && index < this.internalElements.length) {\n\n    this.internalElements[index] = null; // }\n\n    this.markChanged();\n  };\n  /**\n   * `Remove` the element from the array by its index.\n   * @private\n   */\n\n\n  PdfArray.prototype.removeAt = function (index) {\n    // this.internalElements.RemoveAt(index);\n    if (this.internalElements.length > index) {\n      var tempArray = [];\n\n      for (var i = 0; i < index; i++) {\n        tempArray.push(this.internalElements[i]);\n      }\n\n      for (var i = index + 1; i < this.internalElements.length; i++) {\n        tempArray.push(this.internalElements[i]);\n      }\n\n      this.internalElements = tempArray;\n    }\n\n    this.markChanged();\n  };\n  /**\n   * `Clear` the array.\n   * @private\n   */\n\n\n  PdfArray.prototype.clear = function () {\n    this.internalElements = [];\n    this.markChanged();\n  };\n  /**\n   * `Marks` the object changed.\n   * @private\n   */\n\n\n  PdfArray.prototype.markChanged = function () {\n    this.bChanged = true;\n  };\n\n  return PdfArray;\n}();\n\nexport { PdfArray };","map":{"version":3,"names":["PdfNumber","Operators","PdfArray","array","startMark","endMark","position9","clonedObject9","isFont","internalElements","tempNumberArray","index","length","pdfNumber","add","tempArray","elements","push","prototype","items","Object","defineProperty","get","enumerable","configurable","status9","set","value","isSaving9","index9","pdfCrossTable","element","markedChange","bChanged","contains","returnValue","tempElement","inputElement","getItems","save","writer","write","i","len","count","whiteSpace","clone","crossTable","newArray","obj","fromRectangle","bounds","values","x","y","width","height","insert","tempElements","markChanged","indexOf","remove","removeAt","clear"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-array.js"],"sourcesContent":["import { PdfNumber } from './pdf-number';\nimport { Operators } from './../input-output/pdf-operators';\n/**\n * `PdfArray` class is used to perform array related primitive operations.\n * @private\n */\nvar PdfArray = /** @class */ (function () {\n    function PdfArray(array) {\n        //Fields\n        /**\n         * `startMark` - '['\n         * @private\n         */\n        this.startMark = '[';\n        /**\n         * `endMark` - ']'.\n         * @private\n         */\n        this.endMark = ']';\n        /**\n         * Internal variable to store the `position`.\n         * @default -1\n         * @private\n         */\n        this.position9 = -1;\n        /**\n         * Internal variable to hold `cloned object`.\n         * @default null\n         * @private\n         */\n        this.clonedObject9 = null;\n        /**\n         * Represents the Font dictionary.\n         * @hidden\n         * @private\n         */\n        this.isFont = false;\n        if (typeof array === 'undefined') {\n            this.internalElements = [];\n        }\n        else {\n            if (typeof array !== 'undefined' && !(array instanceof PdfArray)) {\n                var tempNumberArray = array;\n                for (var index = 0; index < tempNumberArray.length; index++) {\n                    var pdfNumber = new PdfNumber(tempNumberArray[index]);\n                    this.add(pdfNumber);\n                }\n                // } else if (typeof array !== 'undefined' && (array instanceof PdfArray)) {\n            }\n            else {\n                var tempArray = array;\n                // if (tempArray.Elements.length > 0) {\n                this.internalElements = [];\n                for (var index = 0; index < tempArray.elements.length; index++) {\n                    this.internalElements.push(tempArray.elements[index]);\n                }\n                // }\n            }\n        }\n    }\n    //property\n    /**\n     * Gets the `IPdfSavable` at the specified index.\n     * @private\n     */\n    PdfArray.prototype.items = function (index) {\n        // if (index < 0 || index >= this.Count) {\n        //     throw new Error('ArgumentOutOfRangeException : index, The index can\"t be less then zero or greater then Count.');\n        // }\n        return this.internalElements[index];\n    };\n    Object.defineProperty(PdfArray.prototype, \"count\", {\n        /**\n         * Gets the `count`.\n         * @private\n         */\n        get: function () {\n            return this.internalElements.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfArray.prototype, \"status\", {\n        /**\n         * Gets or sets the `Status` of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.status9;\n        },\n        set: function (value) {\n            this.status9 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfArray.prototype, \"isSaving\", {\n        /**\n         * Gets or sets a value indicating whether this document `is saving` or not.\n         * @private\n         */\n        get: function () {\n            return this.isSaving9;\n        },\n        set: function (value) {\n            this.isSaving9 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfArray.prototype, \"clonedObject\", {\n        /**\n         * Returns `cloned object`.\n         * @private\n         */\n        get: function () {\n            return this.clonedObject9;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfArray.prototype, \"position\", {\n        /**\n         * Gets or sets the `position` of the object.\n         * @private\n         */\n        get: function () {\n            return this.position9;\n        },\n        set: function (value) {\n            this.position9 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfArray.prototype, \"objectCollectionIndex\", {\n        /**\n         * Gets or sets the `index` value of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.index9;\n        },\n        set: function (value) {\n            this.index9 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfArray.prototype, \"CrossTable\", {\n        /**\n         * Returns `PdfCrossTable` associated with the object.\n         * @private\n         */\n        get: function () {\n            return this.pdfCrossTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfArray.prototype, \"elements\", {\n        /**\n         * Gets the `elements` of the Pdf Array.\n         * @private\n         */\n        get: function () {\n            return this.internalElements;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * `Adds` the specified element to the PDF array.\n     * @private\n     */\n    PdfArray.prototype.add = function (element) {\n        // if (element === null) {\n        //     throw new Error('ArgumentNullException : obj');\n        // }\n        if (typeof this.internalElements === 'undefined') {\n            this.internalElements = [];\n        }\n        this.internalElements.push(element);\n        this.markedChange();\n    };\n    /**\n     * `Marks` the object changed.\n     * @private\n     */\n    PdfArray.prototype.markedChange = function () {\n        this.bChanged = true;\n    };\n    /**\n     * `Determines` whether the specified element is within the array.\n     * @private\n     */\n    PdfArray.prototype.contains = function (element) {\n        var returnValue = false;\n        for (var index = 0; index < this.internalElements.length; index++) {\n            var tempElement = this.internalElements[index];\n            var inputElement = element;\n            if (tempElement != null && typeof tempElement !== 'undefined' && inputElement != null && typeof inputElement !== 'undefined') {\n                if (tempElement.value === inputElement.value) {\n                    return true;\n                }\n            }\n            // if (this.internalElements[index] === element) {\n            //     returnValue = true;\n            // }\n        }\n        return returnValue;\n    };\n    /**\n     * Returns the `primitive object` of input index.\n     * @private\n     */\n    PdfArray.prototype.getItems = function (index) {\n        // if (index < 0 || index >= this.Count) {\n        //     throw new Error('ArgumentOutOfRangeException : index , The index can\"t be less then zero or greater then Count.');\n        // }\n        return this.internalElements[index];\n    };\n    /**\n     * `Saves` the object using the specified writer.\n     * @private\n     */\n    PdfArray.prototype.save = function (writer) {\n        // if (writer === null) {\n        //     throw new Error('ArgumentNullException : writer');\n        // }\n        writer.write(this.startMark);\n        for (var i = 0, len = this.count; i < len; i++) {\n            this.getItems(i).save(writer);\n            if (i + 1 !== len) {\n                writer.write(Operators.whiteSpace);\n            }\n        }\n        writer.write(this.endMark);\n    };\n    /**\n     * Creates a `copy of PdfArray`.\n     * @private\n     */\n    PdfArray.prototype.clone = function (crossTable) {\n        // if (this.clonedObject9 !== null && this.clonedObject9.CrossTable === crossTable) {\n        //     return this.clonedObject9;\n        // } else {\n        this.clonedObject9 = null;\n        // Else clone the object.\n        var newArray = new PdfArray();\n        for (var index = 0; index < this.internalElements.length; index++) {\n            var obj = this.internalElements[index];\n            newArray.add(obj.clone(crossTable));\n        }\n        newArray.pdfCrossTable = crossTable;\n        this.clonedObject9 = newArray;\n        return newArray;\n    };\n    /**\n     * Creates filled PDF array `from the rectangle`.\n     * @private\n     */\n    PdfArray.fromRectangle = function (bounds) {\n        var values = [bounds.x, bounds.y, bounds.width, bounds.height];\n        var array = new PdfArray(values);\n        return array;\n    };\n    // /**\n    //  * Creates the rectangle from filled PDF array.\n    //  * @private\n    //  */\n    // public ToRectangle() : RectangleF {\n    //     if (this.Count < 4) {\n    //         throw Error('InvalidOperationException-Can not convert to rectangle.');\n    //     }\n    //     let x1 : number;\n    //     let x2 : number;\n    //     let y1 : number;\n    //     let y2 : number;\n    //     let num : PdfNumber = this.getItems(0) as PdfNumber;\n    //     x1 = num.IntValue;\n    //     num = this.getItems(1) as PdfNumber;\n    //     y1 = num.IntValue;\n    //     num = this.getItems(2) as PdfNumber;\n    //     x2 = num.IntValue;\n    //     num = this.getItems(3) as PdfNumber;\n    //     y2 = num.IntValue;\n    //     let x : number = Math.min(x1, x2);\n    //     let y : number = Math.min(y1, y2);\n    //     let width : number = Math.abs(x1 - x2);\n    //     let height : number = Math.abs(y1 - y2);\n    //     let rect : RectangleF = new RectangleF(new PointF(x, y), new SizeF(width, height));\n    //     return rect;\n    // }\n    /**\n     * `Inserts` the element into the array.\n     * @private\n     */\n    PdfArray.prototype.insert = function (index, element) {\n        if (index < this.internalElements.length && index > 0) {\n            var tempElements = [];\n            for (var i = 0; i < index; i++) {\n                tempElements.push(this.internalElements[i]);\n            }\n            tempElements.push(element);\n            for (var i = index; i < this.internalElements.length; i++) {\n                tempElements.push(this.internalElements[i]);\n            }\n            this.internalElements = tempElements;\n        }\n        else {\n            this.internalElements.push(element);\n        }\n        this.markChanged();\n    };\n    /**\n     * `Checks whether array contains the element`.\n     * @private\n     */\n    PdfArray.prototype.indexOf = function (element) {\n        return this.internalElements.indexOf(element);\n    };\n    /**\n     * `Removes` element from the array.\n     * @private\n     */\n    PdfArray.prototype.remove = function (element) {\n        // if (element === null) {\n        //     throw new Error('ArgumentNullException : element');\n        // }\n        var index = this.internalElements.indexOf(element);\n        // if (index >= 0 && index < this.internalElements.length) {\n        this.internalElements[index] = null;\n        // }\n        this.markChanged();\n    };\n    /**\n     * `Remove` the element from the array by its index.\n     * @private\n     */\n    PdfArray.prototype.removeAt = function (index) {\n        // this.internalElements.RemoveAt(index);\n        if (this.internalElements.length > index) {\n            var tempArray = [];\n            for (var i = 0; i < index; i++) {\n                tempArray.push(this.internalElements[i]);\n            }\n            for (var i = index + 1; i < this.internalElements.length; i++) {\n                tempArray.push(this.internalElements[i]);\n            }\n            this.internalElements = tempArray;\n        }\n        this.markChanged();\n    };\n    /**\n     * `Clear` the array.\n     * @private\n     */\n    PdfArray.prototype.clear = function () {\n        this.internalElements = [];\n        this.markChanged();\n    };\n    /**\n     * `Marks` the object changed.\n     * @private\n     */\n    PdfArray.prototype.markChanged = function () {\n        this.bChanged = true;\n    };\n    return PdfArray;\n}());\nexport { PdfArray };\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,cAA1B;AACA,SAASC,SAAT,QAA0B,iCAA1B;AACA;AACA;AACA;AACA;;AACA,IAAIC,QAAQ;AAAG;AAAe,YAAY;EACtC,SAASA,QAAT,CAAkBC,KAAlB,EAAyB;IACrB;;IACA;AACR;AACA;AACA;IACQ,KAAKC,SAAL,GAAiB,GAAjB;IACA;AACR;AACA;AACA;;IACQ,KAAKC,OAAL,GAAe,GAAf;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,SAAL,GAAiB,CAAC,CAAlB;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,aAAL,GAAqB,IAArB;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,MAAL,GAAc,KAAd;;IACA,IAAI,OAAOL,KAAP,KAAiB,WAArB,EAAkC;MAC9B,KAAKM,gBAAL,GAAwB,EAAxB;IACH,CAFD,MAGK;MACD,IAAI,OAAON,KAAP,KAAiB,WAAjB,IAAgC,EAAEA,KAAK,YAAYD,QAAnB,CAApC,EAAkE;QAC9D,IAAIQ,eAAe,GAAGP,KAAtB;;QACA,KAAK,IAAIQ,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,eAAe,CAACE,MAA5C,EAAoDD,KAAK,EAAzD,EAA6D;UACzD,IAAIE,SAAS,GAAG,IAAIb,SAAJ,CAAcU,eAAe,CAACC,KAAD,CAA7B,CAAhB;UACA,KAAKG,GAAL,CAASD,SAAT;QACH,CAL6D,CAM9D;;MACH,CAPD,MAQK;QACD,IAAIE,SAAS,GAAGZ,KAAhB,CADC,CAED;;QACA,KAAKM,gBAAL,GAAwB,EAAxB;;QACA,KAAK,IAAIE,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGI,SAAS,CAACC,QAAV,CAAmBJ,MAA/C,EAAuDD,KAAK,EAA5D,EAAgE;UAC5D,KAAKF,gBAAL,CAAsBQ,IAAtB,CAA2BF,SAAS,CAACC,QAAV,CAAmBL,KAAnB,CAA3B;QACH,CANA,CAOD;;MACH;IACJ;EACJ,CArDqC,CAsDtC;;EACA;AACJ;AACA;AACA;;;EACIT,QAAQ,CAACgB,SAAT,CAAmBC,KAAnB,GAA2B,UAAUR,KAAV,EAAiB;IACxC;IACA;IACA;IACA,OAAO,KAAKF,gBAAL,CAAsBE,KAAtB,CAAP;EACH,CALD;;EAMAS,MAAM,CAACC,cAAP,CAAsBnB,QAAQ,CAACgB,SAA/B,EAA0C,OAA1C,EAAmD;IAC/C;AACR;AACA;AACA;IACQI,GAAG,EAAE,YAAY;MACb,OAAO,KAAKb,gBAAL,CAAsBG,MAA7B;IACH,CAP8C;IAQ/CW,UAAU,EAAE,IARmC;IAS/CC,YAAY,EAAE;EATiC,CAAnD;EAWAJ,MAAM,CAACC,cAAP,CAAsBnB,QAAQ,CAACgB,SAA/B,EAA0C,QAA1C,EAAoD;IAChD;AACR;AACA;AACA;IACQI,GAAG,EAAE,YAAY;MACb,OAAO,KAAKG,OAAZ;IACH,CAP+C;IAQhDC,GAAG,EAAE,UAAUC,KAAV,EAAiB;MAClB,KAAKF,OAAL,GAAeE,KAAf;IACH,CAV+C;IAWhDJ,UAAU,EAAE,IAXoC;IAYhDC,YAAY,EAAE;EAZkC,CAApD;EAcAJ,MAAM,CAACC,cAAP,CAAsBnB,QAAQ,CAACgB,SAA/B,EAA0C,UAA1C,EAAsD;IAClD;AACR;AACA;AACA;IACQI,GAAG,EAAE,YAAY;MACb,OAAO,KAAKM,SAAZ;IACH,CAPiD;IAQlDF,GAAG,EAAE,UAAUC,KAAV,EAAiB;MAClB,KAAKC,SAAL,GAAiBD,KAAjB;IACH,CAViD;IAWlDJ,UAAU,EAAE,IAXsC;IAYlDC,YAAY,EAAE;EAZoC,CAAtD;EAcAJ,MAAM,CAACC,cAAP,CAAsBnB,QAAQ,CAACgB,SAA/B,EAA0C,cAA1C,EAA0D;IACtD;AACR;AACA;AACA;IACQI,GAAG,EAAE,YAAY;MACb,OAAO,KAAKf,aAAZ;IACH,CAPqD;IAQtDgB,UAAU,EAAE,IAR0C;IAStDC,YAAY,EAAE;EATwC,CAA1D;EAWAJ,MAAM,CAACC,cAAP,CAAsBnB,QAAQ,CAACgB,SAA/B,EAA0C,UAA1C,EAAsD;IAClD;AACR;AACA;AACA;IACQI,GAAG,EAAE,YAAY;MACb,OAAO,KAAKhB,SAAZ;IACH,CAPiD;IAQlDoB,GAAG,EAAE,UAAUC,KAAV,EAAiB;MAClB,KAAKrB,SAAL,GAAiBqB,KAAjB;IACH,CAViD;IAWlDJ,UAAU,EAAE,IAXsC;IAYlDC,YAAY,EAAE;EAZoC,CAAtD;EAcAJ,MAAM,CAACC,cAAP,CAAsBnB,QAAQ,CAACgB,SAA/B,EAA0C,uBAA1C,EAAmE;IAC/D;AACR;AACA;AACA;IACQI,GAAG,EAAE,YAAY;MACb,OAAO,KAAKO,MAAZ;IACH,CAP8D;IAQ/DH,GAAG,EAAE,UAAUC,KAAV,EAAiB;MAClB,KAAKE,MAAL,GAAcF,KAAd;IACH,CAV8D;IAW/DJ,UAAU,EAAE,IAXmD;IAY/DC,YAAY,EAAE;EAZiD,CAAnE;EAcAJ,MAAM,CAACC,cAAP,CAAsBnB,QAAQ,CAACgB,SAA/B,EAA0C,YAA1C,EAAwD;IACpD;AACR;AACA;AACA;IACQI,GAAG,EAAE,YAAY;MACb,OAAO,KAAKQ,aAAZ;IACH,CAPmD;IAQpDP,UAAU,EAAE,IARwC;IASpDC,YAAY,EAAE;EATsC,CAAxD;EAWAJ,MAAM,CAACC,cAAP,CAAsBnB,QAAQ,CAACgB,SAA/B,EAA0C,UAA1C,EAAsD;IAClD;AACR;AACA;AACA;IACQI,GAAG,EAAE,YAAY;MACb,OAAO,KAAKb,gBAAZ;IACH,CAPiD;IAQlDc,UAAU,EAAE,IARsC;IASlDC,YAAY,EAAE;EAToC,CAAtD;EAWA;AACJ;AACA;AACA;;EACItB,QAAQ,CAACgB,SAAT,CAAmBJ,GAAnB,GAAyB,UAAUiB,OAAV,EAAmB;IACxC;IACA;IACA;IACA,IAAI,OAAO,KAAKtB,gBAAZ,KAAiC,WAArC,EAAkD;MAC9C,KAAKA,gBAAL,GAAwB,EAAxB;IACH;;IACD,KAAKA,gBAAL,CAAsBQ,IAAtB,CAA2Bc,OAA3B;IACA,KAAKC,YAAL;EACH,CATD;EAUA;AACJ;AACA;AACA;;;EACI9B,QAAQ,CAACgB,SAAT,CAAmBc,YAAnB,GAAkC,YAAY;IAC1C,KAAKC,QAAL,GAAgB,IAAhB;EACH,CAFD;EAGA;AACJ;AACA;AACA;;;EACI/B,QAAQ,CAACgB,SAAT,CAAmBgB,QAAnB,GAA8B,UAAUH,OAAV,EAAmB;IAC7C,IAAII,WAAW,GAAG,KAAlB;;IACA,KAAK,IAAIxB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKF,gBAAL,CAAsBG,MAAlD,EAA0DD,KAAK,EAA/D,EAAmE;MAC/D,IAAIyB,WAAW,GAAG,KAAK3B,gBAAL,CAAsBE,KAAtB,CAAlB;MACA,IAAI0B,YAAY,GAAGN,OAAnB;;MACA,IAAIK,WAAW,IAAI,IAAf,IAAuB,OAAOA,WAAP,KAAuB,WAA9C,IAA6DC,YAAY,IAAI,IAA7E,IAAqF,OAAOA,YAAP,KAAwB,WAAjH,EAA8H;QAC1H,IAAID,WAAW,CAACT,KAAZ,KAAsBU,YAAY,CAACV,KAAvC,EAA8C;UAC1C,OAAO,IAAP;QACH;MACJ,CAP8D,CAQ/D;MACA;MACA;;IACH;;IACD,OAAOQ,WAAP;EACH,CAfD;EAgBA;AACJ;AACA;AACA;;;EACIjC,QAAQ,CAACgB,SAAT,CAAmBoB,QAAnB,GAA8B,UAAU3B,KAAV,EAAiB;IAC3C;IACA;IACA;IACA,OAAO,KAAKF,gBAAL,CAAsBE,KAAtB,CAAP;EACH,CALD;EAMA;AACJ;AACA;AACA;;;EACIT,QAAQ,CAACgB,SAAT,CAAmBqB,IAAnB,GAA0B,UAAUC,MAAV,EAAkB;IACxC;IACA;IACA;IACAA,MAAM,CAACC,KAAP,CAAa,KAAKrC,SAAlB;;IACA,KAAK,IAAIsC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAG,KAAKC,KAA3B,EAAkCF,CAAC,GAAGC,GAAtC,EAA2CD,CAAC,EAA5C,EAAgD;MAC5C,KAAKJ,QAAL,CAAcI,CAAd,EAAiBH,IAAjB,CAAsBC,MAAtB;;MACA,IAAIE,CAAC,GAAG,CAAJ,KAAUC,GAAd,EAAmB;QACfH,MAAM,CAACC,KAAP,CAAaxC,SAAS,CAAC4C,UAAvB;MACH;IACJ;;IACDL,MAAM,CAACC,KAAP,CAAa,KAAKpC,OAAlB;EACH,CAZD;EAaA;AACJ;AACA;AACA;;;EACIH,QAAQ,CAACgB,SAAT,CAAmB4B,KAAnB,GAA2B,UAAUC,UAAV,EAAsB;IAC7C;IACA;IACA;IACA,KAAKxC,aAAL,GAAqB,IAArB,CAJ6C,CAK7C;;IACA,IAAIyC,QAAQ,GAAG,IAAI9C,QAAJ,EAAf;;IACA,KAAK,IAAIS,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKF,gBAAL,CAAsBG,MAAlD,EAA0DD,KAAK,EAA/D,EAAmE;MAC/D,IAAIsC,GAAG,GAAG,KAAKxC,gBAAL,CAAsBE,KAAtB,CAAV;MACAqC,QAAQ,CAAClC,GAAT,CAAamC,GAAG,CAACH,KAAJ,CAAUC,UAAV,CAAb;IACH;;IACDC,QAAQ,CAAClB,aAAT,GAAyBiB,UAAzB;IACA,KAAKxC,aAAL,GAAqByC,QAArB;IACA,OAAOA,QAAP;EACH,CAdD;EAeA;AACJ;AACA;AACA;;;EACI9C,QAAQ,CAACgD,aAAT,GAAyB,UAAUC,MAAV,EAAkB;IACvC,IAAIC,MAAM,GAAG,CAACD,MAAM,CAACE,CAAR,EAAWF,MAAM,CAACG,CAAlB,EAAqBH,MAAM,CAACI,KAA5B,EAAmCJ,MAAM,CAACK,MAA1C,CAAb;IACA,IAAIrD,KAAK,GAAG,IAAID,QAAJ,CAAakD,MAAb,CAAZ;IACA,OAAOjD,KAAP;EACH,CAJD,CAhQsC,CAqQtC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA;AACJ;AACA;AACA;;;EACID,QAAQ,CAACgB,SAAT,CAAmBuC,MAAnB,GAA4B,UAAU9C,KAAV,EAAiBoB,OAAjB,EAA0B;IAClD,IAAIpB,KAAK,GAAG,KAAKF,gBAAL,CAAsBG,MAA9B,IAAwCD,KAAK,GAAG,CAApD,EAAuD;MACnD,IAAI+C,YAAY,GAAG,EAAnB;;MACA,KAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG/B,KAApB,EAA2B+B,CAAC,EAA5B,EAAgC;QAC5BgB,YAAY,CAACzC,IAAb,CAAkB,KAAKR,gBAAL,CAAsBiC,CAAtB,CAAlB;MACH;;MACDgB,YAAY,CAACzC,IAAb,CAAkBc,OAAlB;;MACA,KAAK,IAAIW,CAAC,GAAG/B,KAAb,EAAoB+B,CAAC,GAAG,KAAKjC,gBAAL,CAAsBG,MAA9C,EAAsD8B,CAAC,EAAvD,EAA2D;QACvDgB,YAAY,CAACzC,IAAb,CAAkB,KAAKR,gBAAL,CAAsBiC,CAAtB,CAAlB;MACH;;MACD,KAAKjC,gBAAL,GAAwBiD,YAAxB;IACH,CAVD,MAWK;MACD,KAAKjD,gBAAL,CAAsBQ,IAAtB,CAA2Bc,OAA3B;IACH;;IACD,KAAK4B,WAAL;EACH,CAhBD;EAiBA;AACJ;AACA;AACA;;;EACIzD,QAAQ,CAACgB,SAAT,CAAmB0C,OAAnB,GAA6B,UAAU7B,OAAV,EAAmB;IAC5C,OAAO,KAAKtB,gBAAL,CAAsBmD,OAAtB,CAA8B7B,OAA9B,CAAP;EACH,CAFD;EAGA;AACJ;AACA;AACA;;;EACI7B,QAAQ,CAACgB,SAAT,CAAmB2C,MAAnB,GAA4B,UAAU9B,OAAV,EAAmB;IAC3C;IACA;IACA;IACA,IAAIpB,KAAK,GAAG,KAAKF,gBAAL,CAAsBmD,OAAtB,CAA8B7B,OAA9B,CAAZ,CAJ2C,CAK3C;;IACA,KAAKtB,gBAAL,CAAsBE,KAAtB,IAA+B,IAA/B,CAN2C,CAO3C;;IACA,KAAKgD,WAAL;EACH,CATD;EAUA;AACJ;AACA;AACA;;;EACIzD,QAAQ,CAACgB,SAAT,CAAmB4C,QAAnB,GAA8B,UAAUnD,KAAV,EAAiB;IAC3C;IACA,IAAI,KAAKF,gBAAL,CAAsBG,MAAtB,GAA+BD,KAAnC,EAA0C;MACtC,IAAII,SAAS,GAAG,EAAhB;;MACA,KAAK,IAAI2B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG/B,KAApB,EAA2B+B,CAAC,EAA5B,EAAgC;QAC5B3B,SAAS,CAACE,IAAV,CAAe,KAAKR,gBAAL,CAAsBiC,CAAtB,CAAf;MACH;;MACD,KAAK,IAAIA,CAAC,GAAG/B,KAAK,GAAG,CAArB,EAAwB+B,CAAC,GAAG,KAAKjC,gBAAL,CAAsBG,MAAlD,EAA0D8B,CAAC,EAA3D,EAA+D;QAC3D3B,SAAS,CAACE,IAAV,CAAe,KAAKR,gBAAL,CAAsBiC,CAAtB,CAAf;MACH;;MACD,KAAKjC,gBAAL,GAAwBM,SAAxB;IACH;;IACD,KAAK4C,WAAL;EACH,CAbD;EAcA;AACJ;AACA;AACA;;;EACIzD,QAAQ,CAACgB,SAAT,CAAmB6C,KAAnB,GAA2B,YAAY;IACnC,KAAKtD,gBAAL,GAAwB,EAAxB;IACA,KAAKkD,WAAL;EACH,CAHD;EAIA;AACJ;AACA;AACA;;;EACIzD,QAAQ,CAACgB,SAAT,CAAmByC,WAAnB,GAAiC,YAAY;IACzC,KAAK1B,QAAL,GAAgB,IAAhB;EACH,CAFD;;EAGA,OAAO/B,QAAP;AACH,CA5W6B,EAA9B;;AA6WA,SAASA,QAAT"},"metadata":{},"sourceType":"module"}