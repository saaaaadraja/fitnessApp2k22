{"ast":null,"code":"/**\n * PdfPageSettings.ts class for EJ2-PDF\n */\nimport { SizeF, PointF } from './../drawing/pdf-drawing';\nimport { PdfPageSize } from './pdf-page-size';\nimport { PdfPageRotateAngle, PdfPageOrientation } from './enum';\nimport { PdfMargins } from './../graphics/pdf-margins';\n/**\n * The class provides various `setting` related with PDF pages.\n */\n\nvar PdfPageSettings =\n/** @class */\nfunction () {\n  function PdfPageSettings(margins) {\n    //Fields\n\n    /**\n     * The page `margins`.\n     * @private\n     */\n    this.pageMargins = new PdfMargins();\n    /**\n     * The page `size`.\n     * @default a4\n     * @private\n     */\n\n    this.pageSize = PdfPageSize.a4;\n    /**\n     * The page `rotation angle`.\n     * @default PdfPageRotateAngle.RotateAngle0\n     * @private\n     */\n\n    this.rotateAngle = PdfPageRotateAngle.RotateAngle0;\n    /**\n     * The page `orientation`.\n     * @default PdfPageOrientation.Portrait\n     * @private\n     */\n\n    this.pageOrientation = PdfPageOrientation.Portrait;\n    /**\n     * The page `origin`.\n     * @default 0,0\n     * @private\n     */\n\n    this.pageOrigin = new PointF(0, 0);\n    /**\n     * Checks the Whether the `rotation` is applied or not.\n     * @default false\n     * @private\n     */\n\n    this.isRotation = false;\n\n    if (typeof margins === 'number') {\n      this.pageMargins.setMargins(margins);\n    }\n  }\n\n  Object.defineProperty(PdfPageSettings.prototype, \"size\", {\n    //Properties\n\n    /**\n     * Gets or sets the `size` of the page.\n     * @private\n     */\n    get: function () {\n      return this.pageSize;\n    },\n    set: function (value) {\n      this.setSize(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageSettings.prototype, \"orientation\", {\n    /**\n     * Gets or sets the page `orientation`.\n     * @private\n     */\n    get: function () {\n      return this.pageOrientation;\n    },\n    set: function (orientation) {\n      if (this.pageOrientation !== orientation) {\n        this.pageOrientation = orientation;\n        this.updateSize(orientation);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageSettings.prototype, \"margins\", {\n    /**\n     * Gets or sets the `margins` of the page.\n     * @private\n     */\n    get: function () {\n      return this.pageMargins;\n    },\n    set: function (value) {\n      this.pageMargins = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageSettings.prototype, \"width\", {\n    /**\n     * Gets or sets the `width` of the page.\n     * @private\n     */\n    get: function () {\n      return this.pageSize.width;\n    },\n    set: function (value) {\n      this.pageSize.width = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageSettings.prototype, \"height\", {\n    /**\n     * Gets or sets the `height` of the page.\n     * @private\n     */\n    get: function () {\n      return this.pageSize.height;\n    },\n    set: function (value) {\n      this.pageSize.height = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageSettings.prototype, \"origin\", {\n    /**\n     * Gets or sets the `origin` of the page.\n     * @private\n     */\n    get: function () {\n      return this.pageOrigin;\n    },\n    set: function (value) {\n      this.pageOrigin = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageSettings.prototype, \"rotate\", {\n    /**\n     * Gets or sets the number of degrees by which the page should be `rotated` clockwise when displayed or printed.\n     * @private\n     */\n    get: function () {\n      return this.rotateAngle;\n    },\n    set: function (value) {\n      this.rotateAngle = value;\n      this.isRotation = true;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Methods\n\n  /**\n   * `Update page size` depending on orientation.\n   * @private\n   */\n\n  PdfPageSettings.prototype.updateSize = function (orientation) {\n    var min = Math.min(this.pageSize.width, this.pageSize.height);\n    var max = Math.max(this.pageSize.width, this.pageSize.height);\n\n    switch (orientation) {\n      case PdfPageOrientation.Portrait:\n        this.pageSize = new SizeF(min, max);\n        break;\n\n      case PdfPageOrientation.Landscape:\n        this.pageSize = new SizeF(max, min);\n        break;\n    }\n  };\n  /**\n   * Creates a `clone` of the object.\n   * @private\n   */\n\n\n  PdfPageSettings.prototype.clone = function () {\n    var settings = this;\n    settings.pageMargins = this.pageMargins.clone(); // if (GetTransition() != null)\n    // {\n    //     settings.Transition = (PdfPageTransition)Transition.clone();\n    // }\n\n    return settings;\n  };\n  /**\n   * Returns `size`, shrinked by the margins.\n   * @private\n   */\n\n\n  PdfPageSettings.prototype.getActualSize = function () {\n    var width = this.width - (this.margins.left + this.margins.right);\n    var height = this.height - (this.margins.top + this.margins.bottom);\n    var size = new SizeF(width, height);\n    return size;\n  };\n  /**\n   * Sets `size` to the page aaccording to the orientation.\n   * @private\n   */\n\n\n  PdfPageSettings.prototype.setSize = function (size) {\n    var min = Math.min(size.width, size.height);\n    var max = Math.max(size.width, size.height);\n\n    if (this.orientation === PdfPageOrientation.Portrait) {\n      this.pageSize = new SizeF(min, max);\n    } else {\n      this.pageSize = new SizeF(max, min);\n    }\n  };\n\n  return PdfPageSettings;\n}();\n\nexport { PdfPageSettings };","map":{"version":3,"names":["SizeF","PointF","PdfPageSize","PdfPageRotateAngle","PdfPageOrientation","PdfMargins","PdfPageSettings","margins","pageMargins","pageSize","a4","rotateAngle","RotateAngle0","pageOrientation","Portrait","pageOrigin","isRotation","setMargins","Object","defineProperty","prototype","get","set","value","setSize","enumerable","configurable","orientation","updateSize","width","height","min","Math","max","Landscape","clone","settings","getActualSize","left","right","top","bottom","size"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page-settings.js"],"sourcesContent":["/**\n * PdfPageSettings.ts class for EJ2-PDF\n */\nimport { SizeF, PointF } from './../drawing/pdf-drawing';\nimport { PdfPageSize } from './pdf-page-size';\nimport { PdfPageRotateAngle, PdfPageOrientation } from './enum';\nimport { PdfMargins } from './../graphics/pdf-margins';\n/**\n * The class provides various `setting` related with PDF pages.\n */\nvar PdfPageSettings = /** @class */ (function () {\n    function PdfPageSettings(margins) {\n        //Fields\n        /**\n         * The page `margins`.\n         * @private\n         */\n        this.pageMargins = new PdfMargins();\n        /**\n         * The page `size`.\n         * @default a4\n         * @private\n         */\n        this.pageSize = PdfPageSize.a4;\n        /**\n         * The page `rotation angle`.\n         * @default PdfPageRotateAngle.RotateAngle0\n         * @private\n         */\n        this.rotateAngle = PdfPageRotateAngle.RotateAngle0;\n        /**\n         * The page `orientation`.\n         * @default PdfPageOrientation.Portrait\n         * @private\n         */\n        this.pageOrientation = PdfPageOrientation.Portrait;\n        /**\n         * The page `origin`.\n         * @default 0,0\n         * @private\n         */\n        this.pageOrigin = new PointF(0, 0);\n        /**\n         * Checks the Whether the `rotation` is applied or not.\n         * @default false\n         * @private\n         */\n        this.isRotation = false;\n        if (typeof margins === 'number') {\n            this.pageMargins.setMargins(margins);\n        }\n    }\n    Object.defineProperty(PdfPageSettings.prototype, \"size\", {\n        //Properties\n        /**\n         * Gets or sets the `size` of the page.\n         * @private\n         */\n        get: function () {\n            return this.pageSize;\n        },\n        set: function (value) {\n            this.setSize(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageSettings.prototype, \"orientation\", {\n        /**\n         * Gets or sets the page `orientation`.\n         * @private\n         */\n        get: function () {\n            return this.pageOrientation;\n        },\n        set: function (orientation) {\n            if (this.pageOrientation !== orientation) {\n                this.pageOrientation = orientation;\n                this.updateSize(orientation);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageSettings.prototype, \"margins\", {\n        /**\n         * Gets or sets the `margins` of the page.\n         * @private\n         */\n        get: function () {\n            return this.pageMargins;\n        },\n        set: function (value) {\n            this.pageMargins = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageSettings.prototype, \"width\", {\n        /**\n         * Gets or sets the `width` of the page.\n         * @private\n         */\n        get: function () {\n            return this.pageSize.width;\n        },\n        set: function (value) {\n            this.pageSize.width = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageSettings.prototype, \"height\", {\n        /**\n         * Gets or sets the `height` of the page.\n         * @private\n         */\n        get: function () {\n            return this.pageSize.height;\n        },\n        set: function (value) {\n            this.pageSize.height = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageSettings.prototype, \"origin\", {\n        /**\n         * Gets or sets the `origin` of the page.\n         * @private\n         */\n        get: function () {\n            return this.pageOrigin;\n        },\n        set: function (value) {\n            this.pageOrigin = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageSettings.prototype, \"rotate\", {\n        /**\n         * Gets or sets the number of degrees by which the page should be `rotated` clockwise when displayed or printed.\n         * @private\n         */\n        get: function () {\n            return this.rotateAngle;\n        },\n        set: function (value) {\n            this.rotateAngle = value;\n            this.isRotation = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Methods\n    /**\n     * `Update page size` depending on orientation.\n     * @private\n     */\n    PdfPageSettings.prototype.updateSize = function (orientation) {\n        var min = Math.min(this.pageSize.width, this.pageSize.height);\n        var max = Math.max(this.pageSize.width, this.pageSize.height);\n        switch (orientation) {\n            case PdfPageOrientation.Portrait:\n                this.pageSize = new SizeF(min, max);\n                break;\n            case PdfPageOrientation.Landscape:\n                this.pageSize = new SizeF(max, min);\n                break;\n        }\n    };\n    /**\n     * Creates a `clone` of the object.\n     * @private\n     */\n    PdfPageSettings.prototype.clone = function () {\n        var settings = this;\n        settings.pageMargins = this.pageMargins.clone();\n        // if (GetTransition() != null)\n        // {\n        //     settings.Transition = (PdfPageTransition)Transition.clone();\n        // }\n        return settings;\n    };\n    /**\n     * Returns `size`, shrinked by the margins.\n     * @private\n     */\n    PdfPageSettings.prototype.getActualSize = function () {\n        var width = this.width - (this.margins.left + this.margins.right);\n        var height = this.height - (this.margins.top + this.margins.bottom);\n        var size = new SizeF(width, height);\n        return size;\n    };\n    /**\n     * Sets `size` to the page aaccording to the orientation.\n     * @private\n     */\n    PdfPageSettings.prototype.setSize = function (size) {\n        var min = Math.min(size.width, size.height);\n        var max = Math.max(size.width, size.height);\n        if (this.orientation === PdfPageOrientation.Portrait) {\n            this.pageSize = new SizeF(min, max);\n        }\n        else {\n            this.pageSize = new SizeF(max, min);\n        }\n    };\n    return PdfPageSettings;\n}());\nexport { PdfPageSettings };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}