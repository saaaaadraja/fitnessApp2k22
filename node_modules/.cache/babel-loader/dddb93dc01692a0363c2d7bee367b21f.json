{"ast":null,"code":"/**\n * `PdfName` class is used to perform name (element names) related primitive operations.\n * @private\n */\nvar PdfName =\n/** @class */\nfunction () {\n  function PdfName(value) {\n    /**\n     * `Start symbol` of the name object.\n     * @default /\n     * @private\n     */\n    this.stringStartMark = '/';\n    /**\n     * `Value` of the element.\n     * @private\n     */\n\n    this.internalValue = '';\n    /**\n     * Indicates if the object is currently in `saving state or not`.\n     * @default false\n     * @private\n     */\n\n    this.isSaving6 = false;\n    /**\n     * Internal variable to store the `position`.\n     * @default -1\n     * @private\n     */\n\n    this.position6 = -1;\n    this.internalValue = this.normalizeValue(value);\n  }\n\n  Object.defineProperty(PdfName.prototype, \"status\", {\n    //property\n\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get: function get() {\n      return this.status6;\n    },\n    set: function set(value) {\n      this.status6 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfName.prototype, \"isSaving\", {\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get: function get() {\n      return this.isSaving6;\n    },\n    set: function set(value) {\n      this.isSaving6 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfName.prototype, \"objectCollectionIndex\", {\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get: function get() {\n      return this.index6;\n    },\n    set: function set(value) {\n      this.index6 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfName.prototype, \"position\", {\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get: function get() {\n      return this.position6;\n    },\n    set: function set(value) {\n      this.position6 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfName.prototype, \"clonedObject\", {\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get: function get() {\n      return null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfName.prototype, \"value\", {\n    /**\n     * Gets or sets the `value` of the object.\n     * @private\n     */\n    get: function get() {\n      return this.internalValue;\n    },\n    set: function set(value) {\n      // if (value !== this.value) {\n      var val = value;\n\n      if (value !== null && value.length > 0) {\n        // val = (value.substring(0, 1) === this.stringStartMark) ? value.substring(1) : value;\n        val = value;\n        this.internalValue = this.normalizeValue(val);\n      } else {\n        this.internalValue = val;\n      } // }\n\n    },\n    enumerable: true,\n    configurable: true\n  }); //public methods\n\n  /**\n   * `Saves` the name using the specified writer.\n   * @private\n   */\n\n  PdfName.prototype.save = function (writer) {\n    // if (writer === null) {\n    //     throw new Error('ArgumentNullException : writer');\n    // }\n    writer.write(this.toString());\n  };\n  /**\n   * Gets `string` representation of the primitive.\n   * @private\n   */\n\n\n  PdfName.prototype.toString = function () {\n    return this.stringStartMark + this.escapeString(this.value);\n  };\n  /**\n   * Creates a `copy of PdfName`.\n   * @private\n   */\n\n\n  PdfName.prototype.clone = function (crossTable) {\n    var newName = new PdfName();\n    newName.value = this.internalValue;\n    return newName;\n  };\n  /**\n   * Replace some characters with its `escape sequences`.\n   * @private\n   */\n\n\n  PdfName.prototype.escapeString = function (stringValue) {\n    // if (str === null) {\n    //     throw new Error('ArgumentNullException : str');\n    // }\n    // if (str === '') {\n    //     return str;\n    // }\n    var result = '';\n    var len = 0;\n\n    for (var i = 0, len_1 = stringValue.length; i < len_1; i++) {\n      var ch = stringValue[i];\n      var index = PdfName.delimiters.indexOf(ch); // switch (ch) {\n      //     case '\\r' :\n      //         result = result + '\\\\r';\n      //         break;\n      //     case '\\n' :\n      //         result = result + '\\n';\n      //         break;\n      //     case '(' :\n      //     case ')' :\n      //     case '\\\\' :\n      //         //result.Append( '\\\\' ).Append( ch );\n      //         result = result + ch;\n      //         break;\n      //     default :\n      //         result = result + ch;\n      //         break;\n      // }\n\n      result = result + ch;\n    }\n\n    return result;\n  }; //methiods\n\n  /**\n   * Replace a symbol with its code with the precedence of the `sharp sign`.\n   * @private\n   */\n\n\n  PdfName.prototype.normalizeValue = function (value, c) {\n    // if (typeof c === undefined) {\n    //     let str : string = value;\n    //     for (let i : number = 0; i < PdfName.replacements.length; i++) {\n    //         str = this.normalizeValue(str, c);\n    //     }\n    //     return str;\n    // } else {\n    var strFormat = '#{0:X}'; //return value.replace(c.toString(),String.format(strFormat,c));\n\n    return value; // }\n  };\n  /**\n   * PDF `special characters`.\n   * @private\n   */\n\n\n  PdfName.delimiters = '()<>[]{}/%}';\n  /**\n   * The symbols that are not allowed in PDF names and `should be replaced`.\n   * @private\n   */\n\n  PdfName.replacements = [' ', '\\t', '\\n', '\\r'];\n  return PdfName;\n}();\n\nexport { PdfName };","map":{"version":3,"names":["PdfName","value","stringStartMark","internalValue","isSaving6","position6","normalizeValue","Object","defineProperty","prototype","get","status6","set","enumerable","configurable","index6","val","length","save","writer","write","toString","escapeString","clone","crossTable","newName","stringValue","result","len","i","len_1","ch","index","delimiters","indexOf","c","strFormat","replacements"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-name.js"],"sourcesContent":["/**\n * `PdfName` class is used to perform name (element names) related primitive operations.\n * @private\n */\nvar PdfName = /** @class */ (function () {\n    function PdfName(value) {\n        /**\n         * `Start symbol` of the name object.\n         * @default /\n         * @private\n         */\n        this.stringStartMark = '/';\n        /**\n         * `Value` of the element.\n         * @private\n         */\n        this.internalValue = '';\n        /**\n         * Indicates if the object is currently in `saving state or not`.\n         * @default false\n         * @private\n         */\n        this.isSaving6 = false;\n        /**\n         * Internal variable to store the `position`.\n         * @default -1\n         * @private\n         */\n        this.position6 = -1;\n        this.internalValue = this.normalizeValue(value);\n    }\n    Object.defineProperty(PdfName.prototype, \"status\", {\n        //property\n        /**\n         * Gets or sets the `Status` of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.status6;\n        },\n        set: function (value) {\n            this.status6 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfName.prototype, \"isSaving\", {\n        /**\n         * Gets or sets a value indicating whether this document `is saving` or not.\n         * @private\n         */\n        get: function () {\n            return this.isSaving6;\n        },\n        set: function (value) {\n            this.isSaving6 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfName.prototype, \"objectCollectionIndex\", {\n        /**\n         * Gets or sets the `index` value of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.index6;\n        },\n        set: function (value) {\n            this.index6 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfName.prototype, \"position\", {\n        /**\n         * Gets or sets the `position` of the object.\n         * @private\n         */\n        get: function () {\n            return this.position6;\n        },\n        set: function (value) {\n            this.position6 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfName.prototype, \"clonedObject\", {\n        /**\n         * Returns `cloned object`.\n         * @private\n         */\n        get: function () {\n            return null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfName.prototype, \"value\", {\n        /**\n         * Gets or sets the `value` of the object.\n         * @private\n         */\n        get: function () {\n            return this.internalValue;\n        },\n        set: function (value) {\n            // if (value !== this.value) {\n            var val = value;\n            if (value !== null && value.length > 0) {\n                // val = (value.substring(0, 1) === this.stringStartMark) ? value.substring(1) : value;\n                val = value;\n                this.internalValue = this.normalizeValue(val);\n            }\n            else {\n                this.internalValue = val;\n            }\n            // }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //public methods\n    /**\n     * `Saves` the name using the specified writer.\n     * @private\n     */\n    PdfName.prototype.save = function (writer) {\n        // if (writer === null) {\n        //     throw new Error('ArgumentNullException : writer');\n        // }\n        writer.write(this.toString());\n    };\n    /**\n     * Gets `string` representation of the primitive.\n     * @private\n     */\n    PdfName.prototype.toString = function () {\n        return (this.stringStartMark + this.escapeString(this.value));\n    };\n    /**\n     * Creates a `copy of PdfName`.\n     * @private\n     */\n    PdfName.prototype.clone = function (crossTable) {\n        var newName = new PdfName();\n        newName.value = this.internalValue;\n        return newName;\n    };\n    /**\n     * Replace some characters with its `escape sequences`.\n     * @private\n     */\n    PdfName.prototype.escapeString = function (stringValue) {\n        // if (str === null) {\n        //     throw new Error('ArgumentNullException : str');\n        // }\n        // if (str === '') {\n        //     return str;\n        // }\n        var result = '';\n        var len = 0;\n        for (var i = 0, len_1 = stringValue.length; i < len_1; i++) {\n            var ch = stringValue[i];\n            var index = PdfName.delimiters.indexOf(ch);\n            // switch (ch) {\n            //     case '\\r' :\n            //         result = result + '\\\\r';\n            //         break;\n            //     case '\\n' :\n            //         result = result + '\\n';\n            //         break;\n            //     case '(' :\n            //     case ')' :\n            //     case '\\\\' :\n            //         //result.Append( '\\\\' ).Append( ch );\n            //         result = result + ch;\n            //         break;\n            //     default :\n            //         result = result + ch;\n            //         break;\n            // }\n            result = result + ch;\n        }\n        return result;\n    };\n    //methiods\n    /**\n     * Replace a symbol with its code with the precedence of the `sharp sign`.\n     * @private\n     */\n    PdfName.prototype.normalizeValue = function (value, c) {\n        // if (typeof c === undefined) {\n        //     let str : string = value;\n        //     for (let i : number = 0; i < PdfName.replacements.length; i++) {\n        //         str = this.normalizeValue(str, c);\n        //     }\n        //     return str;\n        // } else {\n        var strFormat = '#{0:X}';\n        //return value.replace(c.toString(),String.format(strFormat,c));\n        return value;\n        // }\n    };\n    /**\n     * PDF `special characters`.\n     * @private\n     */\n    PdfName.delimiters = '()<>[]{}/%}';\n    /**\n     * The symbols that are not allowed in PDF names and `should be replaced`.\n     * @private\n     */\n    PdfName.replacements = [' ', '\\t', '\\n', '\\r'];\n    return PdfName;\n}());\nexport { PdfName };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}