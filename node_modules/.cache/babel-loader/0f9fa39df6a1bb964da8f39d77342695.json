{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { firstToLowerCase } from '../../common/utils/helper';\nimport { TechnicalAnalysis } from './indicator-base';\n/**\n * `TmaIndicator` module is used to render TMA indicator.\n */\n\nvar TmaIndicator =\n/** @class */\nfunction (_super) {\n  __extends(TmaIndicator, _super);\n\n  function TmaIndicator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Defines the predictions based on TMA approach\n   * @private\n   */\n\n\n  TmaIndicator.prototype.initDataSource = function (indicator, chart) {\n    var tmaPoints = [];\n    var field = firstToLowerCase(indicator.field);\n    var xField = 'x';\n    var signalSeries = indicator.targetSeries[0]; //prepare data\n\n    var validData = indicator.points;\n\n    if (validData && validData.length && validData.length >= indicator.period) {\n      var signalSeries_1 = indicator.targetSeries[0]; //prepare data\n\n      var validData_1 = indicator.points;\n\n      if (validData_1.length && validData_1.length >= indicator.period) {\n        //smoothing factor\n        var k = 2 / (indicator.period + 1); //find initial average\n\n        var average = 0;\n        var sum = 0;\n        var sumOfSMA = 0;\n        var averageSMA = 0;\n        var smaValues = []; //sma values\n\n        var index = 0;\n        var length_1 = validData_1.length;\n        var period = indicator.period;\n\n        while (length_1 >= period) {\n          sum = 0;\n          index = validData_1.length - length_1;\n\n          for (var j = index; j < index + period; j++) {\n            sum = sum + validData_1[j][field];\n          }\n\n          sum = sum / period;\n          smaValues.push(sum);\n          length_1--;\n        } //initial values\n\n\n        for (var k_1 = 0; k_1 < period - 1; k_1++) {\n          sum = 0;\n\n          for (var j = 0; j < k_1 + 1; j++) {\n            sum = sum + validData_1[j][field];\n          }\n\n          sum = sum / (k_1 + 1);\n          smaValues.splice(k_1, 0, sum);\n        }\n\n        index = indicator.period;\n\n        while (index <= smaValues.length) {\n          sum = 0;\n\n          for (var j = index - indicator.period; j < index; j++) {\n            sum = sum + smaValues[j];\n          }\n\n          sum = sum / indicator.period;\n          tmaPoints.push(this.getDataPoint(validData_1[index - 1][xField], sum, validData_1[index - 1], signalSeries_1, tmaPoints.length));\n          index++;\n        }\n      }\n    }\n\n    this.setSeriesRange(tmaPoints, indicator);\n  };\n  /**\n   * To destroy the TMA indicator.\n   * @return {void}\n   * @private\n   */\n\n\n  TmaIndicator.prototype.destroy = function (chart) {\n    /**\n     * Destroys the TMA Indicator\n     */\n  };\n  /**\n   * Get module name.\n   */\n\n\n  TmaIndicator.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the series\n     */\n    return 'TmaIndicator';\n  };\n\n  return TmaIndicator;\n}(TechnicalAnalysis);\n\nexport { TmaIndicator };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","firstToLowerCase","TechnicalAnalysis","TmaIndicator","_super","apply","arguments","initDataSource","indicator","chart","tmaPoints","field","xField","signalSeries","targetSeries","validData","points","length","period","signalSeries_1","validData_1","k","average","sum","sumOfSMA","averageSMA","smaValues","index","length_1","j","push","k_1","splice","getDataPoint","setSeriesRange","destroy","getModuleName"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/tma-indicator.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { firstToLowerCase } from '../../common/utils/helper';\nimport { TechnicalAnalysis } from './indicator-base';\n/**\n * `TmaIndicator` module is used to render TMA indicator.\n */\nvar TmaIndicator = /** @class */ (function (_super) {\n    __extends(TmaIndicator, _super);\n    function TmaIndicator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Defines the predictions based on TMA approach\n     * @private\n     */\n    TmaIndicator.prototype.initDataSource = function (indicator, chart) {\n        var tmaPoints = [];\n        var field = firstToLowerCase(indicator.field);\n        var xField = 'x';\n        var signalSeries = indicator.targetSeries[0];\n        //prepare data\n        var validData = indicator.points;\n        if (validData && validData.length && validData.length >= indicator.period) {\n            var signalSeries_1 = indicator.targetSeries[0];\n            //prepare data\n            var validData_1 = indicator.points;\n            if (validData_1.length && validData_1.length >= indicator.period) {\n                //smoothing factor\n                var k = (2 / (indicator.period + 1));\n                //find initial average\n                var average = 0;\n                var sum = 0;\n                var sumOfSMA = 0;\n                var averageSMA = 0;\n                var smaValues = [];\n                //sma values\n                var index = 0;\n                var length_1 = validData_1.length;\n                var period = indicator.period;\n                while (length_1 >= period) {\n                    sum = 0;\n                    index = validData_1.length - length_1;\n                    for (var j = index; j < index + period; j++) {\n                        sum = sum + validData_1[j][field];\n                    }\n                    sum = sum / period;\n                    smaValues.push(sum);\n                    length_1--;\n                }\n                //initial values\n                for (var k_1 = 0; k_1 < period - 1; k_1++) {\n                    sum = 0;\n                    for (var j = 0; j < k_1 + 1; j++) {\n                        sum = sum + validData_1[j][field];\n                    }\n                    sum = sum / (k_1 + 1);\n                    smaValues.splice(k_1, 0, sum);\n                }\n                index = indicator.period;\n                while (index <= smaValues.length) {\n                    sum = 0;\n                    for (var j = index - indicator.period; j < index; j++) {\n                        sum = sum + smaValues[j];\n                    }\n                    sum = sum / indicator.period;\n                    tmaPoints.push(this.getDataPoint(validData_1[index - 1][xField], sum, validData_1[index - 1], signalSeries_1, tmaPoints.length));\n                    index++;\n                }\n            }\n        }\n        this.setSeriesRange(tmaPoints, indicator);\n    };\n    /**\n     * To destroy the TMA indicator.\n     * @return {void}\n     * @private\n     */\n    TmaIndicator.prototype.destroy = function (chart) {\n        /**\n         * Destroys the TMA Indicator\n         */\n    };\n    /**\n     * Get module name.\n     */\n    TmaIndicator.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the series\n         */\n        return 'TmaIndicator';\n    };\n    return TmaIndicator;\n}(TechnicalAnalysis));\nexport { TmaIndicator };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}