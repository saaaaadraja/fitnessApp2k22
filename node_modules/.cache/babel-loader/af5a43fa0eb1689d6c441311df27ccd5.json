{"ast":null,"code":"import { Encoding, validateNullOrUndefined } from './encoding';\nimport { Save } from './save';\n/**\n * StreamWriter class contains the implementation for writing characters to a file in a particular encoding\n * ```typescript\n * let writer = new StreamWriter();\n * writer.write('Hello World');\n * writer.save('Sample.txt');\n * writer.dispose();\n * ```\n */\n\nvar StreamWriter =\n/** @class */\nfunction () {\n  /**\n   * Initializes a new instance of the StreamWriter class by using the specified encoding.\n   * @param  {Encoding} encoding?- The character encoding to use.\n   */\n  function StreamWriter(encoding) {\n    this.bufferBlob = new Blob(['']);\n    this.bufferText = '';\n    this.init(encoding);\n    Save.isMicrosoftBrowser = !!navigator.msSaveBlob;\n  }\n\n  Object.defineProperty(StreamWriter.prototype, \"buffer\", {\n    /**\n     * Gets the content written to the StreamWriter as Blob.\n     * @returns Blob\n     */\n    get: function () {\n      this.flush();\n      return this.bufferBlob;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StreamWriter.prototype, \"encoding\", {\n    /**\n     * Gets the encoding.\n     * @returns Encoding\n     */\n    get: function () {\n      return this.enc;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  StreamWriter.prototype.init = function (encoding) {\n    if (encoding === null || encoding === undefined) {\n      this.enc = new Encoding(false);\n      this.enc.type = 'Utf8';\n    } else {\n      this.enc = encoding;\n      this.setBomByte();\n    }\n  };\n  /**\n   * Private method to set Byte Order Mark(BOM) value based on EncodingType\n   */\n\n\n  StreamWriter.prototype.setBomByte = function () {\n    if (this.encoding.includeBom) {\n      switch (this.encoding.type) {\n        case 'Unicode':\n          var arrayUnicode = new ArrayBuffer(2);\n          var uint8 = new Uint8Array(arrayUnicode);\n          uint8[0] = 255;\n          uint8[1] = 254;\n          this.bufferBlob = new Blob([arrayUnicode]);\n          break;\n\n        case 'Utf8':\n          var arrayUtf8 = new ArrayBuffer(3);\n          var utf8 = new Uint8Array(arrayUtf8);\n          utf8[0] = 239;\n          utf8[1] = 187;\n          utf8[2] = 191;\n          this.bufferBlob = new Blob([arrayUtf8]);\n          break;\n\n        default:\n          this.bufferBlob = new Blob(['']);\n          break;\n      }\n    }\n  };\n  /**\n   * Saves the file with specified name and sends the file to client browser\n   * @param  {string} fileName - The file name to save\n   * @returns {void}\n   */\n\n\n  StreamWriter.prototype.save = function (fileName) {\n    if (this.bufferText !== '') {\n      this.flush();\n    }\n\n    Save.save(fileName, this.buffer);\n  };\n  /**\n   * Writes the specified string.\n   * @param  {string} value - The string to write. If value is null or undefined, nothing is written.\n   * @returns {void}\n   */\n\n\n  StreamWriter.prototype.write = function (value) {\n    if (this.encoding === undefined) {\n      throw new Error('Object Disposed Exception: current writer is disposed');\n    }\n\n    validateNullOrUndefined(value, 'string');\n    this.bufferText += value;\n\n    if (this.bufferText.length >= 10240) {\n      this.flush();\n    }\n  };\n\n  StreamWriter.prototype.flush = function () {\n    if (this.bufferText === undefined || this.bufferText === null || this.bufferText.length === 0) {\n      return;\n    }\n\n    var bufferArray = this.encoding.getBytes(this.bufferText, 0, this.bufferText.length);\n    this.bufferText = '';\n    this.bufferBlob = new Blob([this.bufferBlob, bufferArray]);\n  };\n  /**\n   * Writes the specified string followed by a line terminator\n   * @param  {string} value - The string to write. If value is null or undefined, nothing is written\n   * @returns {void}\n   */\n\n\n  StreamWriter.prototype.writeLine = function (value) {\n    if (this.encoding === undefined) {\n      throw new Error('Object Disposed Exception: current writer is disposed');\n    }\n\n    validateNullOrUndefined(value, 'string');\n    this.bufferText = this.bufferText + value + '\\r\\n';\n\n    if (this.bufferText.length >= 10240) {\n      this.flush();\n    }\n  };\n  /**\n   * Releases the resources used by the StreamWriter\n   * @returns {void}\n   */\n\n\n  StreamWriter.prototype.destroy = function () {\n    this.bufferBlob = undefined;\n    this.bufferText = undefined;\n\n    if (this.enc instanceof Encoding) {\n      this.enc.destroy();\n    }\n\n    this.enc = undefined;\n  };\n\n  return StreamWriter;\n}();\n\nexport { StreamWriter };","map":{"version":3,"names":["Encoding","validateNullOrUndefined","Save","StreamWriter","encoding","bufferBlob","Blob","bufferText","init","isMicrosoftBrowser","navigator","msSaveBlob","Object","defineProperty","prototype","get","flush","enumerable","configurable","enc","undefined","type","setBomByte","includeBom","arrayUnicode","ArrayBuffer","uint8","Uint8Array","arrayUtf8","utf8","save","fileName","buffer","write","value","Error","length","bufferArray","getBytes","writeLine","destroy"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-file-utils/src/stream-writer.js"],"sourcesContent":["import { Encoding, validateNullOrUndefined } from './encoding';\nimport { Save } from './save';\n/**\n * StreamWriter class contains the implementation for writing characters to a file in a particular encoding\n * ```typescript\n * let writer = new StreamWriter();\n * writer.write('Hello World');\n * writer.save('Sample.txt');\n * writer.dispose();\n * ```\n */\nvar StreamWriter = /** @class */ (function () {\n    /**\n     * Initializes a new instance of the StreamWriter class by using the specified encoding.\n     * @param  {Encoding} encoding?- The character encoding to use.\n     */\n    function StreamWriter(encoding) {\n        this.bufferBlob = new Blob(['']);\n        this.bufferText = '';\n        this.init(encoding);\n        Save.isMicrosoftBrowser = !(!navigator.msSaveBlob);\n    }\n    Object.defineProperty(StreamWriter.prototype, \"buffer\", {\n        /**\n         * Gets the content written to the StreamWriter as Blob.\n         * @returns Blob\n         */\n        get: function () {\n            this.flush();\n            return this.bufferBlob;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StreamWriter.prototype, \"encoding\", {\n        /**\n         * Gets the encoding.\n         * @returns Encoding\n         */\n        get: function () {\n            return this.enc;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StreamWriter.prototype.init = function (encoding) {\n        if (encoding === null || encoding === undefined) {\n            this.enc = new Encoding(false);\n            this.enc.type = 'Utf8';\n        }\n        else {\n            this.enc = encoding;\n            this.setBomByte();\n        }\n    };\n    /**\n     * Private method to set Byte Order Mark(BOM) value based on EncodingType\n     */\n    StreamWriter.prototype.setBomByte = function () {\n        if (this.encoding.includeBom) {\n            switch (this.encoding.type) {\n                case 'Unicode':\n                    var arrayUnicode = new ArrayBuffer(2);\n                    var uint8 = new Uint8Array(arrayUnicode);\n                    uint8[0] = 255;\n                    uint8[1] = 254;\n                    this.bufferBlob = new Blob([arrayUnicode]);\n                    break;\n                case 'Utf8':\n                    var arrayUtf8 = new ArrayBuffer(3);\n                    var utf8 = new Uint8Array(arrayUtf8);\n                    utf8[0] = 239;\n                    utf8[1] = 187;\n                    utf8[2] = 191;\n                    this.bufferBlob = new Blob([arrayUtf8]);\n                    break;\n                default:\n                    this.bufferBlob = new Blob(['']);\n                    break;\n            }\n        }\n    };\n    /**\n     * Saves the file with specified name and sends the file to client browser\n     * @param  {string} fileName - The file name to save\n     * @returns {void}\n     */\n    StreamWriter.prototype.save = function (fileName) {\n        if (this.bufferText !== '') {\n            this.flush();\n        }\n        Save.save(fileName, this.buffer);\n    };\n    /**\n     * Writes the specified string.\n     * @param  {string} value - The string to write. If value is null or undefined, nothing is written.\n     * @returns {void}\n     */\n    StreamWriter.prototype.write = function (value) {\n        if (this.encoding === undefined) {\n            throw new Error('Object Disposed Exception: current writer is disposed');\n        }\n        validateNullOrUndefined(value, 'string');\n        this.bufferText += value;\n        if (this.bufferText.length >= 10240) {\n            this.flush();\n        }\n    };\n    StreamWriter.prototype.flush = function () {\n        if (this.bufferText === undefined || this.bufferText === null || this.bufferText.length === 0) {\n            return;\n        }\n        var bufferArray = this.encoding.getBytes(this.bufferText, 0, this.bufferText.length);\n        this.bufferText = '';\n        this.bufferBlob = new Blob([this.bufferBlob, bufferArray]);\n    };\n    /**\n     * Writes the specified string followed by a line terminator\n     * @param  {string} value - The string to write. If value is null or undefined, nothing is written\n     * @returns {void}\n     */\n    StreamWriter.prototype.writeLine = function (value) {\n        if (this.encoding === undefined) {\n            throw new Error('Object Disposed Exception: current writer is disposed');\n        }\n        validateNullOrUndefined(value, 'string');\n        this.bufferText = this.bufferText + value + '\\r\\n';\n        if (this.bufferText.length >= 10240) {\n            this.flush();\n        }\n    };\n    /**\n     * Releases the resources used by the StreamWriter\n     * @returns {void}\n     */\n    StreamWriter.prototype.destroy = function () {\n        this.bufferBlob = undefined;\n        this.bufferText = undefined;\n        if (this.enc instanceof Encoding) {\n            this.enc.destroy();\n        }\n        this.enc = undefined;\n    };\n    return StreamWriter;\n}());\nexport { StreamWriter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}