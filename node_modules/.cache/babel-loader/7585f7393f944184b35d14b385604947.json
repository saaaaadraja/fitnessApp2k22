{"ast":null,"code":"/**\n * PdfFont.ts class for EJ2-PDF\n */\nimport { PdfFontStyle } from './enum';\nimport { SizeF } from './../../drawing/pdf-drawing';\nimport { PdfStringFormat } from './pdf-string-format';\nimport { PdfStringLayouter } from './string-layouter';\nimport { StringTokenizer } from './string-tokenizer';\n/**\n * Defines a particular format for text, including font face, size, and style attributes.\n * @private\n */\n\nvar PdfFont =\n/** @class */\nfunction () {\n  function PdfFont(size, style) {\n    /**\n     * `Style` of the font.\n     * @private\n     */\n    this.fontStyle = PdfFontStyle.Regular;\n\n    if (typeof size === 'number' && typeof style === 'undefined') {\n      this.fontSize = size;\n    } else {\n      this.fontSize = size;\n      this.setStyle(style);\n    }\n  }\n\n  Object.defineProperty(PdfFont.prototype, \"name\", {\n    //Properties\n\n    /**\n     * Gets the face name of this Font.\n     * @private\n     */\n    get: function get() {\n      return this.metrics.name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"size\", {\n    /**\n     * Gets the size of this font.\n     * @private\n     */\n    get: function get() {\n      return this.fontSize;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"height\", {\n    /**\n     * Gets the height of the font in points.\n     * @private\n     */\n    get: function get() {\n      return this.metrics.getHeight(null);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"style\", {\n    /**\n     * Gets the style information for this font.\n     * @private\n     */\n    get: function get() {\n      return this.fontStyle;\n    },\n    set: function set(value) {\n      this.fontStyle = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"bold\", {\n    /**\n     * Gets a value indicating whether this `PdfFont` is `bold`.\n     * @private\n     */\n    get: function get() {\n      return (this.style & PdfFontStyle.Bold) > 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"italic\", {\n    /**\n     * Gets a value indicating whether this `PdfFont` has the `italic` style applied.\n     * @private\n     */\n    get: function get() {\n      return (this.style & PdfFontStyle.Italic) > 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"strikeout\", {\n    /**\n     * Gets a value indicating whether this `PdfFont` is `strikeout`.\n     * @private\n     */\n    get: function get() {\n      return (this.style & PdfFontStyle.Strikeout) > 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"underline\", {\n    /**\n     * Gets a value indicating whether this `PdfFont` is `underline`.\n     * @private\n     */\n    get: function get() {\n      return (this.style & PdfFontStyle.Underline) > 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"metrics\", {\n    /**\n     * Gets or sets the `metrics` for this font.\n     * @private\n     */\n    get: function get() {\n      return this.fontMetrics;\n    },\n    set: function set(value) {\n      this.fontMetrics = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"element\", {\n    // /**\n    //  * Gets and Sets the font `internals`.\n    //  * @private\n    //  */\n    // public get fontInternal() : IPdfPrimitive {\n    //     return this.pdfFontInternals;\n    // }\n    // public set fontInternal(value : IPdfPrimitive) {\n    //     this.pdfFontInternals = value;\n    // }\n    //IPdfWrapper Members\n\n    /**\n     * Gets the `element` representing the font.\n     * @private\n     */\n    get: function get() {\n      return this.pdfFontInternals;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfFont.prototype.measureString = function (text, arg2, arg3, arg4, arg5) {\n    if (typeof text === 'string' && typeof arg2 === 'undefined') {\n      return this.measureString(text, null);\n    } else if (typeof text === 'string' && (arg2 instanceof PdfStringFormat || arg2 == null) && typeof arg3 === 'undefined' && typeof arg4 === 'undefined') {\n      var temparg2 = arg2;\n      var charactersFitted = 0;\n      var linesFilled = 0;\n      return this.measureString(text, temparg2, charactersFitted, linesFilled);\n    } else if (typeof text === 'string' && (arg2 instanceof PdfStringFormat || arg2 == null) && typeof arg3 === 'number' && typeof arg4 === 'number') {\n      var temparg2 = arg2;\n      return this.measureString(text, 0, temparg2, arg3, arg4); // } else if (typeof text === 'string' && typeof arg2 === 'number' && typeof arg3 === 'undefined') {\n      //     return this.measureString(text, arg2, null);\n      // } else if (typeof text === 'string' && typeof arg2 === 'number' && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'undefined' && typeof arg5 === 'undefined') {\n      //     let temparg3 : PdfStringFormat = arg3 as PdfStringFormat;\n      //     let charactersFitted : number = 0;\n      //     let linesFilled : number = 0;\n      //     return this.measureString(text, arg2, temparg3, charactersFitted, linesFilled);\n    } else if (typeof text === 'string' && typeof arg2 === 'number' && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'number' && typeof arg5 === 'number') {\n      var layoutArea = new SizeF(arg2, 0);\n      var temparg3 = arg3;\n      return this.measureString(text, layoutArea, temparg3, arg4, arg5); // } else if (typeof text === 'string' && arg2 instanceof SizeF && typeof arg3 === 'undefined') {\n      //     return this.measureString(text, arg2, null);\n      // } else if (typeof text === 'string' && arg2 instanceof SizeF && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'undefined' && typeof arg5 === 'undefined') {\n      //     let temparg3 : PdfStringFormat = arg3 as PdfStringFormat;\n      //     let charactersFitted : number = 0;\n      //     let linesFilled : number = 0;\n      //     return this.measureString(text, arg2, temparg3, charactersFitted, linesFilled);\n    } else {\n      if (text == null) {\n        throw Error(\"ArgumentNullException(\\\"text\\\")\");\n      }\n\n      var temparg2 = arg2;\n      var temparg3 = arg3;\n      var layouter = new PdfStringLayouter();\n      var result = layouter.layout(text, this, temparg3, temparg2, false, new SizeF(0, 0)); // arg4 = (result.Remainder == null) ? text.length : text.length - result.Remainder.length;\n\n      arg4 = text.length;\n      arg5 = result.empty ? 0 : result.lines.length;\n      return result.actualSize;\n    }\n  };\n  /* tslint:enable */\n  //IPdfCache Members\n\n  /**\n   * `Checks` whether the object is similar to another object.\n   * @private\n   */\n\n\n  PdfFont.prototype.equalsTo = function (obj) {\n    var result = this.equalsToFont(obj);\n    return result;\n  };\n  /**\n   * Returns `internals` of the object.\n   * @private\n   */\n\n\n  PdfFont.prototype.getInternals = function () {\n    return this.pdfFontInternals;\n  };\n  /**\n   * Sets `internals` to the object.\n   * @private\n   */\n\n\n  PdfFont.prototype.setInternals = function (internals) {\n    if (internals == null) {\n      throw new Error('ArgumentNullException:internals');\n    }\n\n    this.pdfFontInternals = internals;\n  };\n  /**\n   * Sets the `style` of the font.\n   * @private\n   */\n\n\n  PdfFont.prototype.setStyle = function (style) {\n    this.fontStyle = style;\n  };\n  /**\n   * Applies `settings` to the default line width.\n   * @private\n   */\n\n\n  PdfFont.prototype.applyFormatSettings = function (line, format, width) {\n    // if (line == null) {\n    //     throw new Error(`ArgumentNullException:line`);\n    // }\n    var realWidth = width;\n\n    if (format != null && width > 0) {\n      // Space among characters is not default.\n      if (format.characterSpacing !== 0) {\n        realWidth += (line.length - 1) * format.characterSpacing;\n      } // Space among words is not default.\n\n\n      if (format.wordSpacing !== 0) {\n        var symbols = StringTokenizer.spaces;\n        var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\n        realWidth += whitespacesCount * format.wordSpacing;\n      }\n    }\n\n    return realWidth;\n  }; //Constants\n\n  /**\n   * `Multiplier` of the symbol width.\n   * @default 0.001\n   * @private\n   */\n\n\n  PdfFont.charSizeMultiplier = 0.001;\n  /**\n   * `Synchronization` object.\n   * @private\n   */\n\n  PdfFont.syncObject = new Object();\n  return PdfFont;\n}();\n\nexport { PdfFont };","map":{"version":3,"names":["PdfFontStyle","SizeF","PdfStringFormat","PdfStringLayouter","StringTokenizer","PdfFont","size","style","fontStyle","Regular","fontSize","setStyle","Object","defineProperty","prototype","get","metrics","name","enumerable","configurable","getHeight","set","value","Bold","Italic","Strikeout","Underline","fontMetrics","pdfFontInternals","measureString","text","arg2","arg3","arg4","arg5","temparg2","charactersFitted","linesFilled","layoutArea","temparg3","Error","layouter","result","layout","length","empty","lines","actualSize","equalsTo","obj","equalsToFont","getInternals","setInternals","internals","applyFormatSettings","line","format","width","realWidth","characterSpacing","wordSpacing","symbols","spaces","whitespacesCount","getCharsCount","charSizeMultiplier","syncObject"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-font.js"],"sourcesContent":["/**\n * PdfFont.ts class for EJ2-PDF\n */\nimport { PdfFontStyle } from './enum';\nimport { SizeF } from './../../drawing/pdf-drawing';\nimport { PdfStringFormat } from './pdf-string-format';\nimport { PdfStringLayouter } from './string-layouter';\nimport { StringTokenizer } from './string-tokenizer';\n/**\n * Defines a particular format for text, including font face, size, and style attributes.\n * @private\n */\nvar PdfFont = /** @class */ (function () {\n    function PdfFont(size, style) {\n        /**\n         * `Style` of the font.\n         * @private\n         */\n        this.fontStyle = PdfFontStyle.Regular;\n        if (typeof size === 'number' && typeof style === 'undefined') {\n            this.fontSize = size;\n        }\n        else {\n            this.fontSize = size;\n            this.setStyle(style);\n        }\n    }\n    Object.defineProperty(PdfFont.prototype, \"name\", {\n        //Properties\n        /**\n         * Gets the face name of this Font.\n         * @private\n         */\n        get: function () {\n            return this.metrics.name;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfFont.prototype, \"size\", {\n        /**\n         * Gets the size of this font.\n         * @private\n         */\n        get: function () {\n            return this.fontSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfFont.prototype, \"height\", {\n        /**\n         * Gets the height of the font in points.\n         * @private\n         */\n        get: function () {\n            return this.metrics.getHeight(null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfFont.prototype, \"style\", {\n        /**\n         * Gets the style information for this font.\n         * @private\n         */\n        get: function () {\n            return this.fontStyle;\n        },\n        set: function (value) {\n            this.fontStyle = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfFont.prototype, \"bold\", {\n        /**\n         * Gets a value indicating whether this `PdfFont` is `bold`.\n         * @private\n         */\n        get: function () {\n            return ((this.style & PdfFontStyle.Bold) > 0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfFont.prototype, \"italic\", {\n        /**\n         * Gets a value indicating whether this `PdfFont` has the `italic` style applied.\n         * @private\n         */\n        get: function () {\n            return ((this.style & PdfFontStyle.Italic) > 0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfFont.prototype, \"strikeout\", {\n        /**\n         * Gets a value indicating whether this `PdfFont` is `strikeout`.\n         * @private\n         */\n        get: function () {\n            return ((this.style & PdfFontStyle.Strikeout) > 0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfFont.prototype, \"underline\", {\n        /**\n         * Gets a value indicating whether this `PdfFont` is `underline`.\n         * @private\n         */\n        get: function () {\n            return ((this.style & PdfFontStyle.Underline) > 0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfFont.prototype, \"metrics\", {\n        /**\n         * Gets or sets the `metrics` for this font.\n         * @private\n         */\n        get: function () {\n            return this.fontMetrics;\n        },\n        set: function (value) {\n            this.fontMetrics = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfFont.prototype, \"element\", {\n        // /**\n        //  * Gets and Sets the font `internals`.\n        //  * @private\n        //  */\n        // public get fontInternal() : IPdfPrimitive {\n        //     return this.pdfFontInternals;\n        // }\n        // public set fontInternal(value : IPdfPrimitive) {\n        //     this.pdfFontInternals = value;\n        // }\n        //IPdfWrapper Members\n        /**\n         * Gets the `element` representing the font.\n         * @private\n         */\n        get: function () {\n            return this.pdfFontInternals;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfFont.prototype.measureString = function (text, arg2, arg3, arg4, arg5) {\n        if (typeof text === 'string' && typeof arg2 === 'undefined') {\n            return this.measureString(text, null);\n        }\n        else if (typeof text === 'string' && (arg2 instanceof PdfStringFormat || arg2 == null) && typeof arg3 === 'undefined' && typeof arg4 === 'undefined') {\n            var temparg2 = arg2;\n            var charactersFitted = 0;\n            var linesFilled = 0;\n            return this.measureString(text, temparg2, charactersFitted, linesFilled);\n        }\n        else if (typeof text === 'string' && (arg2 instanceof PdfStringFormat || arg2 == null) && typeof arg3 === 'number' && typeof arg4 === 'number') {\n            var temparg2 = arg2;\n            return this.measureString(text, 0, temparg2, arg3, arg4);\n            // } else if (typeof text === 'string' && typeof arg2 === 'number' && typeof arg3 === 'undefined') {\n            //     return this.measureString(text, arg2, null);\n            // } else if (typeof text === 'string' && typeof arg2 === 'number' && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'undefined' && typeof arg5 === 'undefined') {\n            //     let temparg3 : PdfStringFormat = arg3 as PdfStringFormat;\n            //     let charactersFitted : number = 0;\n            //     let linesFilled : number = 0;\n            //     return this.measureString(text, arg2, temparg3, charactersFitted, linesFilled);\n        }\n        else if (typeof text === 'string' && typeof arg2 === 'number' && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'number' && typeof arg5 === 'number') {\n            var layoutArea = new SizeF(arg2, 0);\n            var temparg3 = arg3;\n            return this.measureString(text, layoutArea, temparg3, arg4, arg5);\n            // } else if (typeof text === 'string' && arg2 instanceof SizeF && typeof arg3 === 'undefined') {\n            //     return this.measureString(text, arg2, null);\n            // } else if (typeof text === 'string' && arg2 instanceof SizeF && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'undefined' && typeof arg5 === 'undefined') {\n            //     let temparg3 : PdfStringFormat = arg3 as PdfStringFormat;\n            //     let charactersFitted : number = 0;\n            //     let linesFilled : number = 0;\n            //     return this.measureString(text, arg2, temparg3, charactersFitted, linesFilled);\n        }\n        else {\n            if (text == null) {\n                throw Error(\"ArgumentNullException(\\\"text\\\")\");\n            }\n            var temparg2 = arg2;\n            var temparg3 = arg3;\n            var layouter = new PdfStringLayouter();\n            var result = layouter.layout(text, this, temparg3, temparg2, false, new SizeF(0, 0));\n            // arg4 = (result.Remainder == null) ? text.length : text.length - result.Remainder.length;\n            arg4 = text.length;\n            arg5 = (result.empty) ? 0 : result.lines.length;\n            return result.actualSize;\n        }\n    };\n    /* tslint:enable */\n    //IPdfCache Members\n    /**\n     * `Checks` whether the object is similar to another object.\n     * @private\n     */\n    PdfFont.prototype.equalsTo = function (obj) {\n        var result = this.equalsToFont(obj);\n        return result;\n    };\n    /**\n     * Returns `internals` of the object.\n     * @private\n     */\n    PdfFont.prototype.getInternals = function () {\n        return this.pdfFontInternals;\n    };\n    /**\n     * Sets `internals` to the object.\n     * @private\n     */\n    PdfFont.prototype.setInternals = function (internals) {\n        if (internals == null) {\n            throw new Error('ArgumentNullException:internals');\n        }\n        this.pdfFontInternals = internals;\n    };\n    /**\n     * Sets the `style` of the font.\n     * @private\n     */\n    PdfFont.prototype.setStyle = function (style) {\n        this.fontStyle = style;\n    };\n    /**\n     * Applies `settings` to the default line width.\n     * @private\n     */\n    PdfFont.prototype.applyFormatSettings = function (line, format, width) {\n        // if (line == null) {\n        //     throw new Error(`ArgumentNullException:line`);\n        // }\n        var realWidth = width;\n        if (format != null && width > 0) {\n            // Space among characters is not default.\n            if (format.characterSpacing !== 0) {\n                realWidth += (line.length - 1) * format.characterSpacing;\n            }\n            // Space among words is not default.\n            if (format.wordSpacing !== 0) {\n                var symbols = StringTokenizer.spaces;\n                var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\n                realWidth += whitespacesCount * format.wordSpacing;\n            }\n        }\n        return realWidth;\n    };\n    //Constants\n    /**\n     * `Multiplier` of the symbol width.\n     * @default 0.001\n     * @private\n     */\n    PdfFont.charSizeMultiplier = 0.001;\n    /**\n     * `Synchronization` object.\n     * @private\n     */\n    PdfFont.syncObject = new Object();\n    return PdfFont;\n}());\nexport { PdfFont };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}