{"ast":null,"code":"/**\n * `PdfString` class is used to perform string related primitive operations.\n * @private\n */\nexport var InternalEnum;\n\n(function (InternalEnum) {\n  //Internals\n\n  /**\n   * public Enum for `ForceEncoding`.\n   * @private\n   */\n  var ForceEncoding;\n\n  (function (ForceEncoding) {\n    /**\n     * Specifies the type of `None`.\n     * @private\n     */\n    ForceEncoding[ForceEncoding[\"None\"] = 0] = \"None\";\n    /**\n     * Specifies the type of `Ascii`.\n     * @private\n     */\n\n    ForceEncoding[ForceEncoding[\"Ascii\"] = 1] = \"Ascii\";\n    /**\n     * Specifies the type of `Unicode`.\n     * @private\n     */\n\n    ForceEncoding[ForceEncoding[\"Unicode\"] = 2] = \"Unicode\";\n  })(ForceEncoding = InternalEnum.ForceEncoding || (InternalEnum.ForceEncoding = {}));\n  /**\n   * public Enum for `SourceType`.\n   * @private\n   */\n\n\n  var SourceType;\n\n  (function (SourceType) {\n    /**\n     * Specifies the type of `StringValue`.\n     * @private\n     */\n    SourceType[SourceType[\"StringValue\"] = 0] = \"StringValue\";\n    /**\n     * Specifies the type of `ByteBuffer`.\n     * @private\n     */\n\n    SourceType[SourceType[\"ByteBuffer\"] = 1] = \"ByteBuffer\";\n  })(SourceType || (SourceType = {}));\n})(InternalEnum || (InternalEnum = {}));\n\nvar PdfString =\n/** @class */\nfunction () {\n  function PdfString(value) {\n    /**\n     * Value indicating whether the string was converted to hex.\n     * @default false\n     * @private\n     */\n    this.bHex = false;\n    /**\n     * Internal variable to store the `position`.\n     * @default -1\n     * @private\n     */\n\n    this.position1 = -1;\n    /**\n     * Internal variable to hold `cloned object`.\n     * @default null\n     * @private\n     */\n\n    this.clonedObject1 = null;\n    /**\n     * `Shows` if the data of the stream was decrypted.\n     * @default false\n     * @private\n     */\n\n    this.bDecrypted = false;\n    /**\n     * Shows if the data of the stream `was decrypted`.\n     * @default false\n     * @private\n     */\n\n    this.isParentDecrypted = false;\n    /**\n     * Gets a value indicating whether the object is `packed or not`.\n     * @default false\n     * @private\n     */\n\n    this.isPacked = false;\n    /**\n     * @hidden\n     * @private\n     */\n\n    this.isFormField = false;\n    /**\n     * @hidden\n     * @private\n     */\n\n    this.isColorSpace = false;\n    /**\n     * @hidden\n     * @private\n     */\n\n    this.isHexString = true;\n\n    if (typeof value === 'undefined') {\n      this.bHex = false;\n    } else {\n      if (!(value.length > 0 && value[0] === '0xfeff')) {\n        this.stringValue = value;\n        this.data = [];\n\n        for (var i = 0; i < value.length; ++i) {\n          this.data.push(value.charCodeAt(i));\n        }\n      }\n    }\n  }\n\n  Object.defineProperty(PdfString.prototype, \"hex\", {\n    //Property\n\n    /**\n     * Gets a value indicating whether string is in `hex`.\n     * @private\n     */\n    get: function get() {\n      return this.bHex;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"value\", {\n    /**\n     * Gets or sets string `value` of the object.\n     * @private\n     */\n    get: function get() {\n      return this.stringValue;\n    },\n    set: function set(value) {\n      this.stringValue = value;\n      this.data = null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"status\", {\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get: function get() {\n      return this.status1;\n    },\n    set: function set(value) {\n      this.status1 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"isSaving\", {\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get: function get() {\n      return this.isSaving1;\n    },\n    set: function set(value) {\n      this.isSaving1 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"objectCollectionIndex\", {\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get: function get() {\n      return this.index1;\n    },\n    set: function set(value) {\n      this.index1 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"clonedObject\", {\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get: function get() {\n      return this.clonedObject1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"position\", {\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get: function get() {\n      return this.position1;\n    },\n    set: function set(value) {\n      this.position1 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"CrossTable\", {\n    /**\n     * Returns `PdfCrossTable` associated with the object.\n     * @private\n     */\n    get: function get() {\n      return this.crossTable;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"converted\", {\n    /**\n     * Gets a value indicating whether to check if the value has unicode characters.\n     * @private\n     */\n    get: function get() {\n      return this.bConverted;\n    },\n\n    /**\n     * sets a value indicating whether to check if the value has unicode characters.\n     * @private\n     */\n    set: function set(value) {\n      this.bConverted = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfString.prototype, \"encode\", {\n    /**\n     * Gets value indicating whether we should convert data to Unicode.\n     */\n    get: function get() {\n      return this.bForceEncoding;\n    },\n    set: function set(value) {\n      this.bForceEncoding = value;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Methods\n\n  /**\n   * Converts `bytes to string using hex format` for representing string.\n   * @private\n   */\n\n  PdfString.bytesToHex = function (bytes) {\n    if (bytes == null) {\n      return '';\n    }\n\n    var builder = '';\n    return builder;\n  };\n  /**\n   * `Saves` the object using the specified writer.\n   * @private\n   */\n\n\n  PdfString.prototype.save = function (writer) {\n    if (writer === null) {\n      throw new Error('ArgumentNullException : writer');\n    }\n\n    if (this.encode !== undefined && this.encode === InternalEnum.ForceEncoding.Ascii) {\n      writer.write(this.pdfEncode());\n    } else {\n      writer.write(PdfString.stringMark[0] + this.value + PdfString.stringMark[1]);\n    }\n  };\n\n  PdfString.prototype.pdfEncode = function () {\n    var result = '';\n\n    if (this.encode !== undefined && this.encode === InternalEnum.ForceEncoding.Ascii) {\n      var data = this.escapeSymbols(this.value);\n\n      for (var i = 0; i < data.length; i++) {\n        result += String.fromCharCode(data[i]);\n      }\n\n      result = PdfString.stringMark[0] + result + PdfString.stringMark[1];\n    } else {\n      result = this.value;\n    }\n\n    return result;\n  };\n\n  PdfString.prototype.escapeSymbols = function (value) {\n    var data = [];\n\n    for (var i = 0; i < value.length; i++) {\n      var currentData = value.charCodeAt(i);\n\n      switch (currentData) {\n        case 40:\n        case 41:\n          data.push(92);\n          data.push(currentData);\n          break;\n\n        case 13:\n          data.push(92);\n          data.push(114);\n          break;\n\n        case 92:\n          data.push(92);\n          data.push(currentData);\n          break;\n\n        default:\n          data.push(currentData);\n          break;\n      }\n    }\n\n    return data;\n  };\n  /**\n   * Creates a `copy of PdfString`.\n   * @private\n   */\n\n\n  PdfString.prototype.clone = function (crossTable) {\n    if (this.clonedObject1 !== null && this.clonedObject1.CrossTable === crossTable) {\n      return this.clonedObject1;\n    } else {\n      this.clonedObject1 = null;\n    }\n\n    var newString = new PdfString(this.stringValue);\n    newString.bHex = this.bHex;\n    newString.crossTable = crossTable;\n    newString.isColorSpace = this.isColorSpace;\n    this.clonedObject1 = newString;\n    return newString;\n  };\n  /**\n   * Converts string to array of unicode symbols.\n   */\n\n\n  PdfString.toUnicodeArray = function (value, bAddPrefix) {\n    if (value == null) {\n      throw new Error('Argument Null Exception : value');\n    }\n\n    var startIndex = 0;\n    var output = [];\n\n    for (var i = 0; i < value.length; i++) {\n      var code = value.charCodeAt(i);\n      output.push(code / 256 >>> 0);\n      output.push(code & 0xff);\n    }\n\n    return output;\n  };\n  /**\n   * Converts byte data to string.\n   */\n\n\n  PdfString.byteToString = function (data) {\n    if (data == null) {\n      throw new Error('Argument Null Exception : stream');\n    }\n\n    var result = '';\n\n    for (var i = 0; i < data.length; ++i) {\n      result += String.fromCharCode(data[i]);\n    }\n\n    return result;\n  }; //constants = ;\n\n  /**\n   * `General markers` for string.\n   * @private\n   */\n\n\n  PdfString.stringMark = '()';\n  /**\n   * `Hex markers` for string.\n   * @private\n   */\n\n  PdfString.hexStringMark = '<>';\n  /**\n   * Format of password data.\n   * @private\n   */\n\n  PdfString.hexFormatPattern = '{0:X2}';\n  return PdfString;\n}();\n\nexport { PdfString };","map":{"version":3,"names":["InternalEnum","ForceEncoding","SourceType","PdfString","value","bHex","position1","clonedObject1","bDecrypted","isParentDecrypted","isPacked","isFormField","isColorSpace","isHexString","length","stringValue","data","i","push","charCodeAt","Object","defineProperty","prototype","get","enumerable","configurable","set","status1","isSaving1","index1","crossTable","bConverted","bForceEncoding","bytesToHex","bytes","builder","save","writer","Error","encode","undefined","Ascii","write","pdfEncode","stringMark","result","escapeSymbols","String","fromCharCode","currentData","clone","CrossTable","newString","toUnicodeArray","bAddPrefix","startIndex","output","code","byteToString","hexStringMark","hexFormatPattern"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-string.js"],"sourcesContent":["/**\n * `PdfString` class is used to perform string related primitive operations.\n * @private\n */\nexport var InternalEnum;\n(function (InternalEnum) {\n    //Internals\n    /**\n     * public Enum for `ForceEncoding`.\n     * @private\n     */\n    var ForceEncoding;\n    (function (ForceEncoding) {\n        /**\n         * Specifies the type of `None`.\n         * @private\n         */\n        ForceEncoding[ForceEncoding[\"None\"] = 0] = \"None\";\n        /**\n         * Specifies the type of `Ascii`.\n         * @private\n         */\n        ForceEncoding[ForceEncoding[\"Ascii\"] = 1] = \"Ascii\";\n        /**\n         * Specifies the type of `Unicode`.\n         * @private\n         */\n        ForceEncoding[ForceEncoding[\"Unicode\"] = 2] = \"Unicode\";\n    })(ForceEncoding = InternalEnum.ForceEncoding || (InternalEnum.ForceEncoding = {}));\n    /**\n     * public Enum for `SourceType`.\n     * @private\n     */\n    var SourceType;\n    (function (SourceType) {\n        /**\n         * Specifies the type of `StringValue`.\n         * @private\n         */\n        SourceType[SourceType[\"StringValue\"] = 0] = \"StringValue\";\n        /**\n         * Specifies the type of `ByteBuffer`.\n         * @private\n         */\n        SourceType[SourceType[\"ByteBuffer\"] = 1] = \"ByteBuffer\";\n    })(SourceType || (SourceType = {}));\n})(InternalEnum || (InternalEnum = {}));\nvar PdfString = /** @class */ (function () {\n    function PdfString(value) {\n        /**\n         * Value indicating whether the string was converted to hex.\n         * @default false\n         * @private\n         */\n        this.bHex = false;\n        /**\n         * Internal variable to store the `position`.\n         * @default -1\n         * @private\n         */\n        this.position1 = -1;\n        /**\n         * Internal variable to hold `cloned object`.\n         * @default null\n         * @private\n         */\n        this.clonedObject1 = null;\n        /**\n         * `Shows` if the data of the stream was decrypted.\n         * @default false\n         * @private\n         */\n        this.bDecrypted = false;\n        /**\n         * Shows if the data of the stream `was decrypted`.\n         * @default false\n         * @private\n         */\n        this.isParentDecrypted = false;\n        /**\n         * Gets a value indicating whether the object is `packed or not`.\n         * @default false\n         * @private\n         */\n        this.isPacked = false;\n        /**\n         * @hidden\n         * @private\n         */\n        this.isFormField = false;\n        /**\n         * @hidden\n         * @private\n         */\n        this.isColorSpace = false;\n        /**\n         * @hidden\n         * @private\n         */\n        this.isHexString = true;\n        if (typeof value === 'undefined') {\n            this.bHex = false;\n        }\n        else {\n            if (!(value.length > 0 && value[0] === '0xfeff')) {\n                this.stringValue = value;\n                this.data = [];\n                for (var i = 0; i < value.length; ++i) {\n                    this.data.push(value.charCodeAt(i));\n                }\n            }\n        }\n    }\n    Object.defineProperty(PdfString.prototype, \"hex\", {\n        //Property\n        /**\n         * Gets a value indicating whether string is in `hex`.\n         * @private\n         */\n        get: function () {\n            return this.bHex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"value\", {\n        /**\n         * Gets or sets string `value` of the object.\n         * @private\n         */\n        get: function () {\n            return this.stringValue;\n        },\n        set: function (value) {\n            this.stringValue = value;\n            this.data = null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"status\", {\n        /**\n         * Gets or sets the `Status` of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.status1;\n        },\n        set: function (value) {\n            this.status1 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"isSaving\", {\n        /**\n         * Gets or sets a value indicating whether this document `is saving` or not.\n         * @private\n         */\n        get: function () {\n            return this.isSaving1;\n        },\n        set: function (value) {\n            this.isSaving1 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"objectCollectionIndex\", {\n        /**\n         * Gets or sets the `index` value of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.index1;\n        },\n        set: function (value) {\n            this.index1 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"clonedObject\", {\n        /**\n         * Returns `cloned object`.\n         * @private\n         */\n        get: function () {\n            return this.clonedObject1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"position\", {\n        /**\n         * Gets or sets the `position` of the object.\n         * @private\n         */\n        get: function () {\n            return this.position1;\n        },\n        set: function (value) {\n            this.position1 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"CrossTable\", {\n        /**\n         * Returns `PdfCrossTable` associated with the object.\n         * @private\n         */\n        get: function () {\n            return this.crossTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"converted\", {\n        /**\n         * Gets a value indicating whether to check if the value has unicode characters.\n         * @private\n         */\n        get: function () {\n            return this.bConverted;\n        },\n        /**\n         * sets a value indicating whether to check if the value has unicode characters.\n         * @private\n         */\n        set: function (value) {\n            this.bConverted = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"encode\", {\n        /**\n         * Gets value indicating whether we should convert data to Unicode.\n         */\n        get: function () {\n            return this.bForceEncoding;\n        },\n        set: function (value) {\n            this.bForceEncoding = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Methods\n    /**\n     * Converts `bytes to string using hex format` for representing string.\n     * @private\n     */\n    PdfString.bytesToHex = function (bytes) {\n        if (bytes == null) {\n            return '';\n        }\n        var builder = '';\n        return builder;\n    };\n    /**\n     * `Saves` the object using the specified writer.\n     * @private\n     */\n    PdfString.prototype.save = function (writer) {\n        if (writer === null) {\n            throw new Error('ArgumentNullException : writer');\n        }\n        if (this.encode !== undefined && this.encode === InternalEnum.ForceEncoding.Ascii) {\n            writer.write(this.pdfEncode());\n        }\n        else {\n            writer.write(PdfString.stringMark[0] + this.value + PdfString.stringMark[1]);\n        }\n    };\n    PdfString.prototype.pdfEncode = function () {\n        var result = '';\n        if (this.encode !== undefined && this.encode === InternalEnum.ForceEncoding.Ascii) {\n            var data = this.escapeSymbols(this.value);\n            for (var i = 0; i < data.length; i++) {\n                result += String.fromCharCode(data[i]);\n            }\n            result = PdfString.stringMark[0] + result + PdfString.stringMark[1];\n        }\n        else {\n            result = this.value;\n        }\n        return result;\n    };\n    PdfString.prototype.escapeSymbols = function (value) {\n        var data = [];\n        for (var i = 0; i < value.length; i++) {\n            var currentData = value.charCodeAt(i);\n            switch (currentData) {\n                case 40:\n                case 41:\n                    data.push(92);\n                    data.push(currentData);\n                    break;\n                case 13:\n                    data.push(92);\n                    data.push(114);\n                    break;\n                case 92:\n                    data.push(92);\n                    data.push(currentData);\n                    break;\n                default:\n                    data.push(currentData);\n                    break;\n            }\n        }\n        return data;\n    };\n    /**\n     * Creates a `copy of PdfString`.\n     * @private\n     */\n    PdfString.prototype.clone = function (crossTable) {\n        if (this.clonedObject1 !== null && this.clonedObject1.CrossTable === crossTable) {\n            return this.clonedObject1;\n        }\n        else {\n            this.clonedObject1 = null;\n        }\n        var newString = new PdfString(this.stringValue);\n        newString.bHex = this.bHex;\n        newString.crossTable = crossTable;\n        newString.isColorSpace = this.isColorSpace;\n        this.clonedObject1 = newString;\n        return newString;\n    };\n    /**\n     * Converts string to array of unicode symbols.\n     */\n    PdfString.toUnicodeArray = function (value, bAddPrefix) {\n        if (value == null) {\n            throw new Error('Argument Null Exception : value');\n        }\n        var startIndex = 0;\n        var output = [];\n        for (var i = 0; i < value.length; i++) {\n            var code = value.charCodeAt(i);\n            output.push(code / 256 >>> 0);\n            output.push(code & 0xff);\n        }\n        return output;\n    };\n    /**\n     * Converts byte data to string.\n     */\n    PdfString.byteToString = function (data) {\n        if (data == null) {\n            throw new Error('Argument Null Exception : stream');\n        }\n        var result = '';\n        for (var i = 0; i < data.length; ++i) {\n            result += String.fromCharCode(data[i]);\n        }\n        return result;\n    };\n    //constants = ;\n    /**\n     * `General markers` for string.\n     * @private\n     */\n    PdfString.stringMark = '()';\n    /**\n     * `Hex markers` for string.\n     * @private\n     */\n    PdfString.hexStringMark = '<>';\n    /**\n     * Format of password data.\n     * @private\n     */\n    PdfString.hexFormatPattern = '{0:X2}';\n    return PdfString;\n}());\nexport { PdfString };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}