{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { isZoomSet, setRange, triggerLabelRender } from '../../common/utils/helper';\nimport { DoubleRange } from '../utils/double-range';\nimport { withIn, firstToLowerCase } from '../../common/utils/helper';\nimport { DataUtil } from '@syncfusion/ej2-data';\nimport { NiceInterval } from '../axis/axis-helper';\nimport { extend, getValue, isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * `DateTime` module is used to render datetime axis.\n */\n\nvar DateTime =\n/** @class */\nfunction (_super) {\n  __extends(DateTime, _super);\n  /**\n   * Constructor for the dateTime module.\n   * @private\n   */\n\n\n  function DateTime(chart) {\n    return _super.call(this, chart) || this;\n  }\n  /**\n   * The function to calculate the range and labels for the axis.\n   * @return {void}\n   */\n\n\n  DateTime.prototype.calculateRangeAndInterval = function (size, axis) {\n    this.calculateRange(axis, size);\n    this.getActualRange(axis, size);\n    this.applyRangePadding(axis, size);\n    this.calculateVisibleLabels(axis, this.chart);\n  };\n  /**\n   * Actual Range for the axis.\n   * @private\n   */\n\n\n  DateTime.prototype.getActualRange = function (axis, size) {\n    var option = {\n      skeleton: 'full',\n      type: 'dateTime'\n    };\n    var dateParser = this.chart.intl.getDateParser(option);\n    var dateFormatter = this.chart.intl.getDateFormat(option); // Axis min\n\n    if (axis.minimum !== null) {\n      this.min = this.chart.isBlazor ? Date.parse(axis.minimum.toString()) : Date.parse(dateParser(dateFormatter(new Date(DataUtil.parse.parseJson({\n        val: axis.minimum\n      }).val))));\n    } else if (this.min === null || this.min === Number.POSITIVE_INFINITY) {\n      this.min = Date.parse(dateParser(dateFormatter(new Date(1970, 1, 1))));\n    } // Axis Max\n\n\n    if (axis.maximum !== null) {\n      this.max = this.chart.isBlazor ? Date.parse(axis.maximum.toString()) : Date.parse(dateParser(dateFormatter(new Date(DataUtil.parse.parseJson({\n        val: axis.maximum\n      }).val))));\n    } else if (this.max === null || this.max === Number.NEGATIVE_INFINITY) {\n      this.max = Date.parse(dateParser(dateFormatter(new Date(1970, 5, 1))));\n    }\n\n    if (this.min === this.max) {\n      this.max = this.max + 2592000000;\n      this.min = this.min - 2592000000;\n    }\n\n    axis.actualRange = {};\n    axis.doubleRange = new DoubleRange(this.min, this.max);\n    var datetimeInterval = this.calculateDateTimeNiceInterval(axis, size, axis.doubleRange.start, axis.doubleRange.end);\n\n    if (!axis.interval) {\n      axis.actualRange.interval = datetimeInterval;\n    } else {\n      axis.actualRange.interval = axis.interval;\n    }\n\n    axis.actualRange.min = axis.doubleRange.start;\n    axis.actualRange.max = axis.doubleRange.end;\n  };\n  /**\n   * Apply padding for the range.\n   * @private\n   */\n\n\n  DateTime.prototype.applyRangePadding = function (axis, size) {\n    this.min = axis.actualRange.min;\n    this.max = axis.actualRange.max;\n    var minimum;\n    var maximum;\n    var interval = axis.actualRange.interval;\n\n    if (!setRange(axis)) {\n      var rangePadding = axis.getRangePadding(this.chart);\n      minimum = new Date(this.min);\n      maximum = new Date(this.max);\n      var intervalType = axis.actualIntervalType;\n\n      if (rangePadding === 'None') {\n        this.min = minimum.getTime();\n        this.max = maximum.getTime();\n      } else if (rangePadding === 'Additional' || rangePadding === 'Round') {\n        switch (intervalType) {\n          case 'Years':\n            this.getYear(minimum, maximum, rangePadding, interval);\n            break;\n\n          case 'Months':\n            this.getMonth(minimum, maximum, rangePadding, interval);\n            break;\n\n          case 'Days':\n            this.getDay(minimum, maximum, rangePadding, interval);\n            break;\n\n          case 'Hours':\n            this.getHour(minimum, maximum, rangePadding, interval);\n            break;\n\n          case 'Minutes':\n            var minute = minimum.getMinutes() / interval * interval;\n            var endMinute = maximum.getMinutes() + (minimum.getMinutes() - minute);\n\n            if (rangePadding === 'Round') {\n              this.min = new Date(minimum.getFullYear(), minimum.getMonth(), minimum.getDate(), minimum.getHours(), minute, 0).getTime();\n              this.max = new Date(maximum.getFullYear(), maximum.getMonth(), maximum.getDate(), maximum.getHours(), endMinute, 59).getTime();\n            } else {\n              this.min = new Date(minimum.getFullYear(), maximum.getMonth(), minimum.getDate(), minimum.getHours(), minute + -interval, 0).getTime();\n              this.max = new Date(maximum.getFullYear(), maximum.getMonth(), maximum.getDate(), maximum.getHours(), endMinute + interval, 0).getTime();\n            }\n\n            break;\n\n          case 'Seconds':\n            var second = minimum.getSeconds() / interval * interval;\n            var endSecond = maximum.getSeconds() + (minimum.getSeconds() - second);\n\n            if (rangePadding === 'Round') {\n              this.min = new Date(minimum.getFullYear(), minimum.getMonth(), minimum.getDate(), minimum.getHours(), minimum.getMinutes(), second, 0).getTime();\n              this.max = new Date(maximum.getFullYear(), maximum.getMonth(), maximum.getDate(), maximum.getHours(), maximum.getMinutes(), endSecond, 0).getTime();\n            } else {\n              this.min = new Date(minimum.getFullYear(), minimum.getMonth(), minimum.getDate(), minimum.getHours(), minimum.getMinutes(), second + -interval, 0).getTime();\n              this.max = new Date(maximum.getFullYear(), maximum.getMonth(), maximum.getDate(), maximum.getHours(), maximum.getMinutes(), endSecond + interval, 0).getTime();\n            }\n\n            break;\n        }\n      }\n    }\n\n    axis.actualRange.min = axis.minimum != null ? this.min : this.min;\n    axis.actualRange.max = axis.maximum != null ? this.max : this.max;\n    axis.actualRange.delta = axis.actualRange.max - axis.actualRange.min;\n    axis.doubleRange = new DoubleRange(axis.actualRange.min, axis.actualRange.max);\n    this.calculateVisibleRange(size, axis);\n  };\n\n  DateTime.prototype.getYear = function (minimum, maximum, rangePadding, interval) {\n    var startYear = minimum.getFullYear();\n    var endYear = maximum.getFullYear();\n\n    if (rangePadding === 'Additional') {\n      this.min = new Date(startYear - interval, 1, 1, 0, 0, 0).getTime();\n      this.max = new Date(endYear + interval, 1, 1, 0, 0, 0).getTime();\n    } else {\n      this.min = new Date(startYear, 0, 0, 0, 0, 0).getTime();\n      this.max = new Date(endYear, 11, 30, 23, 59, 59).getTime();\n    }\n  };\n\n  DateTime.prototype.getMonth = function (minimum, maximum, rangePadding, interval) {\n    var month = minimum.getMonth();\n    var endMonth = maximum.getMonth();\n\n    if (rangePadding === 'Round') {\n      this.min = new Date(minimum.getFullYear(), month, 0, 0, 0, 0).getTime();\n      this.max = new Date(maximum.getFullYear(), endMonth, new Date(maximum.getFullYear(), maximum.getMonth(), 0).getDate(), 23, 59, 59).getTime();\n    } else {\n      this.min = new Date(minimum.getFullYear(), month + -interval, 1, 0, 0, 0).getTime();\n      this.max = new Date(maximum.getFullYear(), endMonth + interval, endMonth === 2 ? 28 : 30, 0, 0, 0).getTime();\n    }\n  };\n\n  DateTime.prototype.getDay = function (minimum, maximum, rangePadding, interval) {\n    var day = minimum.getDate();\n    var endDay = maximum.getDate();\n\n    if (rangePadding === 'Round') {\n      this.min = new Date(minimum.getFullYear(), minimum.getMonth(), day, 0, 0, 0).getTime();\n      this.max = new Date(maximum.getFullYear(), maximum.getMonth(), endDay, 23, 59, 59).getTime();\n    } else {\n      this.min = new Date(minimum.getFullYear(), minimum.getMonth(), day + -interval, 0, 0, 0).getTime();\n      this.max = new Date(maximum.getFullYear(), maximum.getMonth(), endDay + interval, 0, 0, 0).getTime();\n    }\n  };\n\n  DateTime.prototype.getHour = function (minimum, maximum, rangePadding, interval) {\n    var hour = minimum.getHours() / interval * interval;\n    var endHour = maximum.getHours() + (minimum.getHours() - hour);\n\n    if (rangePadding === 'Round') {\n      this.min = new Date(minimum.getFullYear(), minimum.getMonth(), minimum.getDate(), hour, 0, 0).getTime();\n      this.max = new Date(maximum.getFullYear(), maximum.getMonth(), maximum.getDate(), endHour, 59, 59).getTime();\n    } else {\n      this.min = new Date(minimum.getFullYear(), minimum.getMonth(), minimum.getDate(), hour + -interval, 0, 0).getTime();\n      this.max = new Date(maximum.getFullYear(), maximum.getMonth(), maximum.getDate(), endHour + interval, 0, 0).getTime();\n    }\n  };\n  /**\n   * Calculate visible range for axis.\n   * @private\n   */\n\n\n  DateTime.prototype.calculateVisibleRange = function (size, axis) {\n    axis.visibleRange = {\n      min: axis.actualRange.min,\n      max: axis.actualRange.max,\n      interval: axis.actualRange.interval,\n      delta: axis.actualRange.delta\n    };\n    var isLazyLoad = isNullOrUndefined(axis.zoomingScrollBar) ? false : axis.zoomingScrollBar.isLazyLoad;\n\n    if (isZoomSet(axis) && !isLazyLoad) {\n      axis.calculateVisibleRangeOnZooming(this.chart);\n      axis.calculateAxisRange(size, this.chart);\n      axis.visibleRange.interval = axis.enableAutoIntervalOnZooming ? this.calculateDateTimeNiceInterval(axis, size, axis.visibleRange.min, axis.visibleRange.max) : axis.visibleRange.interval;\n    }\n\n    axis.dateTimeInterval = this.increaseDateTimeInterval(axis, axis.visibleRange.min, axis.visibleRange.interval).getTime() - axis.visibleRange.min;\n    axis.triggerRangeRender(this.chart, axis.visibleRange.min, axis.visibleRange.max, axis.visibleRange.interval);\n  };\n  /**\n   * Calculate visible labels for the axis.\n   * @param axis\n   * @param chart\n   * @private\n   */\n\n\n  DateTime.prototype.calculateVisibleLabels = function (axis, chart) {\n    axis.visibleLabels = [];\n    var tempInterval = axis.visibleRange.min;\n    var labelStyle;\n    var previousValue;\n    var axisLabels = axis.visibleLabels;\n\n    if (!setRange(axis)) {\n      tempInterval = this.alignRangeStart(axis, tempInterval, axis.visibleRange.interval, axis.actualIntervalType).getTime();\n    }\n\n    while (tempInterval <= axis.visibleRange.max) {\n      labelStyle = extend({}, getValue('properties', axis.labelStyle), null, true);\n      previousValue = axisLabels.length ? axis.visibleLabels[axisLabels.length - 1].value : tempInterval;\n      axis.format = chart.intl.getDateFormat({\n        format: this.findCustomFormats(axis, tempInterval, previousValue) || this.blazorCustomFormat(axis),\n        type: firstToLowerCase(axis.skeletonType),\n        skeleton: this.getSkeleton(axis, tempInterval, previousValue, chart.isBlazor)\n      });\n      axis.startLabel = axis.format(new Date(axis.visibleRange.min));\n      axis.endLabel = axis.format(new Date(axis.visibleRange.max));\n\n      if (withIn(tempInterval, axis.visibleRange)) {\n        triggerLabelRender(chart, tempInterval, axis.format(new Date(tempInterval)), labelStyle, axis);\n      }\n\n      tempInterval = this.increaseDateTimeInterval(axis, tempInterval, axis.visibleRange.interval).getTime();\n    } //tooltip and crosshair formats for 'Months' and 'Days' interval types\n\n\n    if ((axis.actualIntervalType === 'Months' || axis.actualIntervalType === 'Days') && axis.isChart) {\n      axis.format = chart.intl.getDateFormat({\n        format: axis.labelFormat || (axis.actualIntervalType === 'Months' && !axis.skeleton ? 'y MMM' : ''),\n        type: firstToLowerCase(axis.skeletonType),\n        skeleton: axis.skeleton || (axis.actualIntervalType === 'Days' ? 'MMMd' : '')\n      });\n    }\n\n    if (axis.getMaxLabelWidth) {\n      axis.getMaxLabelWidth(this.chart);\n    }\n  };\n  /** @private */\n\n\n  DateTime.prototype.blazorCustomFormat = function (axis) {\n    if (this.chart.isBlazor) {\n      return axis.actualIntervalType === 'Years' ? axis.isIntervalInDecimal ? 'yyyy' : 'MMM y' : axis.actualIntervalType === 'Days' && !axis.isIntervalInDecimal ? 'ddd HH tt' : '';\n    } else {\n      return '';\n    }\n  };\n  /** @private */\n\n\n  DateTime.prototype.increaseDateTimeInterval = function (axis, value, interval) {\n    var result = new Date(value);\n\n    if (axis.interval) {\n      axis.isIntervalInDecimal = interval % 1 === 0;\n      axis.visibleRange.interval = interval;\n    } else {\n      interval = Math.ceil(interval);\n      axis.visibleRange.interval = interval;\n    }\n\n    var intervalType = axis.actualIntervalType;\n\n    if (axis.isIntervalInDecimal) {\n      switch (intervalType) {\n        case 'Years':\n          result.setFullYear(result.getFullYear() + interval);\n          return result;\n\n        case 'Quarter':\n          result.setMonth(result.getMonth() + 3 * interval);\n          return result;\n\n        case 'Months':\n          result.setMonth(result.getMonth() + interval);\n          return result;\n\n        case 'Weeks':\n          result.setDate(result.getDate() + interval * 7);\n          return result;\n\n        case 'Days':\n          result.setDate(result.getDate() + interval);\n          return result;\n\n        case 'Hours':\n          result.setHours(result.getHours() + interval);\n          return result;\n\n        case 'Minutes':\n          result.setMinutes(result.getMinutes() + interval);\n          return result;\n\n        case 'Seconds':\n          result.setSeconds(result.getSeconds() + interval);\n          return result;\n      }\n    } else {\n      result = this.getDecimalInterval(result, interval, intervalType);\n    }\n\n    return result;\n  };\n\n  DateTime.prototype.alignRangeStart = function (axis, sDate, intervalSize, intervalType) {\n    var sResult = new Date(sDate);\n\n    switch (axis.actualIntervalType) {\n      case 'Years':\n        var year = Math.floor(Math.floor(sResult.getFullYear() / intervalSize) * intervalSize);\n        sResult = new Date(year, sResult.getMonth(), sResult.getDate(), 0, 0, 0);\n        return sResult;\n\n      case 'Months':\n        var month = Math.floor(Math.floor(sResult.getMonth() / intervalSize) * intervalSize);\n        sResult = new Date(sResult.getFullYear(), month, sResult.getDate(), 0, 0, 0);\n        return sResult;\n\n      case 'Days':\n        var day = Math.floor(Math.floor(sResult.getDate() / intervalSize) * intervalSize);\n        sResult = new Date(sResult.getFullYear(), sResult.getMonth(), day, 0, 0, 0);\n        return sResult;\n\n      case 'Hours':\n        var hour = Math.floor(Math.floor(sResult.getHours() / intervalSize) * intervalSize);\n        sResult = new Date(sResult.getFullYear(), sResult.getMonth(), sResult.getDate(), hour, 0, 0);\n        return sResult;\n\n      case 'Minutes':\n        var minutes = Math.floor(Math.floor(sResult.getMinutes() / intervalSize) * intervalSize);\n        sResult = new Date(sResult.getFullYear(), sResult.getMonth(), sResult.getDate(), sResult.getHours(), minutes, 0, 0);\n        return sResult;\n\n      case 'Seconds':\n        var seconds = Math.floor(Math.floor(sResult.getSeconds() / intervalSize) * intervalSize);\n        sResult = new Date(sResult.getFullYear(), sResult.getMonth(), sResult.getDate(), sResult.getHours(), sResult.getMinutes(), seconds, 0);\n        return sResult;\n    }\n\n    return sResult;\n  };\n\n  DateTime.prototype.getDecimalInterval = function (result, interval, intervalType) {\n    var roundValue = Math.floor(interval);\n    var decimalValue = interval - roundValue;\n\n    switch (intervalType) {\n      case 'Years':\n        var month = Math.round(12 * decimalValue);\n        result.setFullYear(result.getFullYear() + roundValue);\n        result.setMonth(result.getMonth() + month);\n        return result;\n\n      case 'Quarter':\n        result.setMonth(result.getMonth() + 3 * interval);\n        return result;\n\n      case 'Months':\n        var days = Math.round(30 * decimalValue);\n        result.setMonth(result.getMonth() + roundValue);\n        result.setDate(result.getDate() + days);\n        return result;\n\n      case 'Weeks':\n        result.setDate(result.getDate() + interval * 7);\n        return result;\n\n      case 'Days':\n        var hour = Math.round(24 * decimalValue);\n        result.setDate(result.getDate() + roundValue);\n        result.setHours(result.getHours() + hour);\n        return result;\n\n      case 'Hours':\n        var min = Math.round(60 * decimalValue);\n        result.setHours(result.getHours() + roundValue);\n        result.setMinutes(result.getMinutes() + min);\n        return result;\n\n      case 'Minutes':\n        var sec = Math.round(60 * decimalValue);\n        result.setMinutes(result.getMinutes() + roundValue);\n        result.setSeconds(result.getSeconds() + sec);\n        return result;\n\n      case 'Seconds':\n        var milliSec = Math.round(1000 * decimalValue);\n        result.setSeconds(result.getSeconds() + roundValue);\n        result.setMilliseconds(result.getMilliseconds() + milliSec);\n        return result;\n    }\n\n    return result;\n  };\n  /**\n   * Get module name\n   */\n\n\n  DateTime.prototype.getModuleName = function () {\n    /**\n     * Returns the module name\n     */\n    return 'DateTime';\n  };\n  /**\n   * To destroy the category axis.\n   * @return {void}\n   * @private\n   */\n\n\n  DateTime.prototype.destroy = function (chart) {\n    /**\n     * Destroy method performed here\n     */\n  };\n\n  return DateTime;\n}(NiceInterval);\n\nexport { DateTime };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","isZoomSet","setRange","triggerLabelRender","DoubleRange","withIn","firstToLowerCase","DataUtil","NiceInterval","extend","getValue","isNullOrUndefined","DateTime","_super","chart","call","calculateRangeAndInterval","size","axis","calculateRange","getActualRange","applyRangePadding","calculateVisibleLabels","option","skeleton","type","dateParser","intl","getDateParser","dateFormatter","getDateFormat","minimum","min","isBlazor","Date","parse","toString","parseJson","val","Number","POSITIVE_INFINITY","maximum","max","NEGATIVE_INFINITY","actualRange","doubleRange","datetimeInterval","calculateDateTimeNiceInterval","start","end","interval","rangePadding","getRangePadding","intervalType","actualIntervalType","getTime","getYear","getMonth","getDay","getHour","minute","getMinutes","endMinute","getFullYear","getDate","getHours","second","getSeconds","endSecond","delta","calculateVisibleRange","startYear","endYear","month","endMonth","day","endDay","hour","endHour","visibleRange","isLazyLoad","zoomingScrollBar","calculateVisibleRangeOnZooming","calculateAxisRange","enableAutoIntervalOnZooming","dateTimeInterval","increaseDateTimeInterval","triggerRangeRender","visibleLabels","tempInterval","labelStyle","previousValue","axisLabels","alignRangeStart","length","value","format","findCustomFormats","blazorCustomFormat","skeletonType","getSkeleton","startLabel","endLabel","isChart","labelFormat","getMaxLabelWidth","isIntervalInDecimal","result","Math","ceil","setFullYear","setMonth","setDate","setHours","setMinutes","setSeconds","getDecimalInterval","sDate","intervalSize","sResult","year","floor","minutes","seconds","roundValue","decimalValue","round","days","sec","milliSec","setMilliseconds","getMilliseconds","getModuleName","destroy"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-charts/src/chart/axis/date-time-axis.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { isZoomSet, setRange, triggerLabelRender } from '../../common/utils/helper';\nimport { DoubleRange } from '../utils/double-range';\nimport { withIn, firstToLowerCase } from '../../common/utils/helper';\nimport { DataUtil } from '@syncfusion/ej2-data';\nimport { NiceInterval } from '../axis/axis-helper';\nimport { extend, getValue, isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * `DateTime` module is used to render datetime axis.\n */\nvar DateTime = /** @class */ (function (_super) {\n    __extends(DateTime, _super);\n    /**\n     * Constructor for the dateTime module.\n     * @private\n     */\n    function DateTime(chart) {\n        return _super.call(this, chart) || this;\n    }\n    /**\n     * The function to calculate the range and labels for the axis.\n     * @return {void}\n     */\n    DateTime.prototype.calculateRangeAndInterval = function (size, axis) {\n        this.calculateRange(axis, size);\n        this.getActualRange(axis, size);\n        this.applyRangePadding(axis, size);\n        this.calculateVisibleLabels(axis, this.chart);\n    };\n    /**\n     * Actual Range for the axis.\n     * @private\n     */\n    DateTime.prototype.getActualRange = function (axis, size) {\n        var option = {\n            skeleton: 'full',\n            type: 'dateTime'\n        };\n        var dateParser = this.chart.intl.getDateParser(option);\n        var dateFormatter = this.chart.intl.getDateFormat(option);\n        // Axis min\n        if ((axis.minimum) !== null) {\n            this.min = this.chart.isBlazor ? Date.parse(axis.minimum.toString()) : Date.parse(dateParser(dateFormatter(new Date(DataUtil.parse.parseJson({ val: axis.minimum }).val))));\n        }\n        else if (this.min === null || this.min === Number.POSITIVE_INFINITY) {\n            this.min = Date.parse(dateParser(dateFormatter(new Date(1970, 1, 1))));\n        }\n        // Axis Max\n        if ((axis.maximum) !== null) {\n            this.max = this.chart.isBlazor ? Date.parse(axis.maximum.toString()) : Date.parse(dateParser(dateFormatter(new Date(DataUtil.parse.parseJson({ val: axis.maximum }).val))));\n        }\n        else if (this.max === null || this.max === Number.NEGATIVE_INFINITY) {\n            this.max = Date.parse(dateParser(dateFormatter(new Date(1970, 5, 1))));\n        }\n        if (this.min === this.max) {\n            this.max = this.max + 2592000000;\n            this.min = this.min - 2592000000;\n        }\n        axis.actualRange = {};\n        axis.doubleRange = new DoubleRange(this.min, this.max);\n        var datetimeInterval = this.calculateDateTimeNiceInterval(axis, size, axis.doubleRange.start, axis.doubleRange.end);\n        if (!axis.interval) {\n            axis.actualRange.interval = datetimeInterval;\n        }\n        else {\n            axis.actualRange.interval = axis.interval;\n        }\n        axis.actualRange.min = axis.doubleRange.start;\n        axis.actualRange.max = axis.doubleRange.end;\n    };\n    /**\n     * Apply padding for the range.\n     * @private\n     */\n    DateTime.prototype.applyRangePadding = function (axis, size) {\n        this.min = (axis.actualRange.min);\n        this.max = (axis.actualRange.max);\n        var minimum;\n        var maximum;\n        var interval = axis.actualRange.interval;\n        if (!setRange(axis)) {\n            var rangePadding = axis.getRangePadding(this.chart);\n            minimum = new Date(this.min);\n            maximum = new Date(this.max);\n            var intervalType = axis.actualIntervalType;\n            if (rangePadding === 'None') {\n                this.min = minimum.getTime();\n                this.max = maximum.getTime();\n            }\n            else if (rangePadding === 'Additional' || rangePadding === 'Round') {\n                switch (intervalType) {\n                    case 'Years':\n                        this.getYear(minimum, maximum, rangePadding, interval);\n                        break;\n                    case 'Months':\n                        this.getMonth(minimum, maximum, rangePadding, interval);\n                        break;\n                    case 'Days':\n                        this.getDay(minimum, maximum, rangePadding, interval);\n                        break;\n                    case 'Hours':\n                        this.getHour(minimum, maximum, rangePadding, interval);\n                        break;\n                    case 'Minutes':\n                        var minute = (minimum.getMinutes() / interval) * interval;\n                        var endMinute = maximum.getMinutes() + (minimum.getMinutes() - minute);\n                        if (rangePadding === 'Round') {\n                            this.min = (new Date(minimum.getFullYear(), minimum.getMonth(), minimum.getDate(), minimum.getHours(), minute, 0)).getTime();\n                            this.max = (new Date(maximum.getFullYear(), maximum.getMonth(), maximum.getDate(), maximum.getHours(), endMinute, 59)).getTime();\n                        }\n                        else {\n                            this.min = (new Date(minimum.getFullYear(), maximum.getMonth(), minimum.getDate(), minimum.getHours(), minute + (-interval), 0)).getTime();\n                            this.max = (new Date(maximum.getFullYear(), maximum.getMonth(), maximum.getDate(), maximum.getHours(), endMinute + (interval), 0)).getTime();\n                        }\n                        break;\n                    case 'Seconds':\n                        var second = (minimum.getSeconds() / interval) * interval;\n                        var endSecond = maximum.getSeconds() + (minimum.getSeconds() - second);\n                        if (rangePadding === 'Round') {\n                            this.min = (new Date(minimum.getFullYear(), minimum.getMonth(), minimum.getDate(), minimum.getHours(), minimum.getMinutes(), second, 0)).getTime();\n                            this.max = (new Date(maximum.getFullYear(), maximum.getMonth(), maximum.getDate(), maximum.getHours(), maximum.getMinutes(), endSecond, 0)).getTime();\n                        }\n                        else {\n                            this.min = (new Date(minimum.getFullYear(), minimum.getMonth(), minimum.getDate(), minimum.getHours(), minimum.getMinutes(), second + (-interval), 0)).getTime();\n                            this.max = (new Date(maximum.getFullYear(), maximum.getMonth(), maximum.getDate(), maximum.getHours(), maximum.getMinutes(), endSecond + (interval), 0)).getTime();\n                        }\n                        break;\n                }\n            }\n        }\n        axis.actualRange.min = (axis.minimum != null) ? this.min : this.min;\n        axis.actualRange.max = (axis.maximum != null) ? this.max : this.max;\n        axis.actualRange.delta = (axis.actualRange.max - axis.actualRange.min);\n        axis.doubleRange = new DoubleRange(axis.actualRange.min, axis.actualRange.max);\n        this.calculateVisibleRange(size, axis);\n    };\n    DateTime.prototype.getYear = function (minimum, maximum, rangePadding, interval) {\n        var startYear = minimum.getFullYear();\n        var endYear = maximum.getFullYear();\n        if (rangePadding === 'Additional') {\n            this.min = (new Date(startYear - interval, 1, 1, 0, 0, 0)).getTime();\n            this.max = (new Date(endYear + interval, 1, 1, 0, 0, 0)).getTime();\n        }\n        else {\n            this.min = new Date(startYear, 0, 0, 0, 0, 0).getTime();\n            this.max = new Date(endYear, 11, 30, 23, 59, 59).getTime();\n        }\n    };\n    DateTime.prototype.getMonth = function (minimum, maximum, rangePadding, interval) {\n        var month = minimum.getMonth();\n        var endMonth = maximum.getMonth();\n        if (rangePadding === 'Round') {\n            this.min = (new Date(minimum.getFullYear(), month, 0, 0, 0, 0)).getTime();\n            this.max = (new Date(maximum.getFullYear(), endMonth, new Date(maximum.getFullYear(), maximum.getMonth(), 0).getDate(), 23, 59, 59)).getTime();\n        }\n        else {\n            this.min = (new Date(minimum.getFullYear(), month + (-interval), 1, 0, 0, 0)).getTime();\n            this.max = (new Date(maximum.getFullYear(), endMonth + (interval), endMonth === 2 ? 28 : 30, 0, 0, 0)).getTime();\n        }\n    };\n    DateTime.prototype.getDay = function (minimum, maximum, rangePadding, interval) {\n        var day = minimum.getDate();\n        var endDay = maximum.getDate();\n        if (rangePadding === 'Round') {\n            this.min = (new Date(minimum.getFullYear(), minimum.getMonth(), day, 0, 0, 0)).getTime();\n            this.max = (new Date(maximum.getFullYear(), maximum.getMonth(), endDay, 23, 59, 59)).getTime();\n        }\n        else {\n            this.min = (new Date(minimum.getFullYear(), minimum.getMonth(), day + (-interval), 0, 0, 0)).getTime();\n            this.max = (new Date(maximum.getFullYear(), maximum.getMonth(), endDay + (interval), 0, 0, 0)).getTime();\n        }\n    };\n    DateTime.prototype.getHour = function (minimum, maximum, rangePadding, interval) {\n        var hour = (minimum.getHours() / interval) * interval;\n        var endHour = maximum.getHours() + (minimum.getHours() - hour);\n        if (rangePadding === 'Round') {\n            this.min = (new Date(minimum.getFullYear(), minimum.getMonth(), minimum.getDate(), hour, 0, 0)).getTime();\n            this.max = (new Date(maximum.getFullYear(), maximum.getMonth(), maximum.getDate(), endHour, 59, 59)).getTime();\n        }\n        else {\n            this.min = (new Date(minimum.getFullYear(), minimum.getMonth(), minimum.getDate(), hour + (-interval), 0, 0)).getTime();\n            this.max = (new Date(maximum.getFullYear(), maximum.getMonth(), maximum.getDate(), endHour + (interval), 0, 0)).getTime();\n        }\n    };\n    /**\n     * Calculate visible range for axis.\n     * @private\n     */\n    DateTime.prototype.calculateVisibleRange = function (size, axis) {\n        axis.visibleRange = {\n            min: axis.actualRange.min,\n            max: axis.actualRange.max,\n            interval: axis.actualRange.interval,\n            delta: axis.actualRange.delta,\n        };\n        var isLazyLoad = isNullOrUndefined(axis.zoomingScrollBar) ? false : axis.zoomingScrollBar.isLazyLoad;\n        if ((isZoomSet(axis)) && !isLazyLoad) {\n            axis.calculateVisibleRangeOnZooming(this.chart);\n            axis.calculateAxisRange(size, this.chart);\n            axis.visibleRange.interval = (axis.enableAutoIntervalOnZooming) ?\n                this.calculateDateTimeNiceInterval(axis, size, axis.visibleRange.min, axis.visibleRange.max)\n                : axis.visibleRange.interval;\n        }\n        axis.dateTimeInterval = this.increaseDateTimeInterval(axis, axis.visibleRange.min, axis.visibleRange.interval).getTime()\n            - axis.visibleRange.min;\n        axis.triggerRangeRender(this.chart, axis.visibleRange.min, axis.visibleRange.max, axis.visibleRange.interval);\n    };\n    /**\n     * Calculate visible labels for the axis.\n     * @param axis\n     * @param chart\n     * @private\n     */\n    DateTime.prototype.calculateVisibleLabels = function (axis, chart) {\n        axis.visibleLabels = [];\n        var tempInterval = axis.visibleRange.min;\n        var labelStyle;\n        var previousValue;\n        var axisLabels = axis.visibleLabels;\n        if (!setRange(axis)) {\n            tempInterval = this.alignRangeStart(axis, tempInterval, axis.visibleRange.interval, axis.actualIntervalType).getTime();\n        }\n        while (tempInterval <= axis.visibleRange.max) {\n            labelStyle = (extend({}, getValue('properties', axis.labelStyle), null, true));\n            previousValue = axisLabels.length ? axis.visibleLabels[axisLabels.length - 1].value : tempInterval;\n            axis.format = chart.intl.getDateFormat({\n                format: this.findCustomFormats(axis, tempInterval, previousValue) || this.blazorCustomFormat(axis),\n                type: firstToLowerCase(axis.skeletonType),\n                skeleton: this.getSkeleton(axis, tempInterval, previousValue, chart.isBlazor)\n            });\n            axis.startLabel = axis.format(new Date(axis.visibleRange.min));\n            axis.endLabel = axis.format(new Date(axis.visibleRange.max));\n            if (withIn(tempInterval, axis.visibleRange)) {\n                triggerLabelRender(chart, tempInterval, axis.format(new Date(tempInterval)), labelStyle, axis);\n            }\n            tempInterval = this.increaseDateTimeInterval(axis, tempInterval, axis.visibleRange.interval).getTime();\n        }\n        //tooltip and crosshair formats for 'Months' and 'Days' interval types\n        if ((axis.actualIntervalType === 'Months' || axis.actualIntervalType === 'Days') && axis.isChart) {\n            axis.format = chart.intl.getDateFormat({\n                format: axis.labelFormat || (axis.actualIntervalType === 'Months' && !axis.skeleton ? 'y MMM' : ''),\n                type: firstToLowerCase(axis.skeletonType), skeleton: axis.skeleton || (axis.actualIntervalType === 'Days' ? 'MMMd' : '')\n            });\n        }\n        if (axis.getMaxLabelWidth) {\n            axis.getMaxLabelWidth(this.chart);\n        }\n    };\n    /** @private */\n    DateTime.prototype.blazorCustomFormat = function (axis) {\n        if (this.chart.isBlazor) {\n            return axis.actualIntervalType === 'Years' ? (axis.isIntervalInDecimal ? 'yyyy' : 'MMM y') :\n                (axis.actualIntervalType === 'Days' && !axis.isIntervalInDecimal) ? 'ddd HH tt' : '';\n        }\n        else {\n            return '';\n        }\n    };\n    /** @private */\n    DateTime.prototype.increaseDateTimeInterval = function (axis, value, interval) {\n        var result = new Date(value);\n        if (axis.interval) {\n            axis.isIntervalInDecimal = (interval % 1) === 0;\n            axis.visibleRange.interval = interval;\n        }\n        else {\n            interval = Math.ceil(interval);\n            axis.visibleRange.interval = interval;\n        }\n        var intervalType = axis.actualIntervalType;\n        if (axis.isIntervalInDecimal) {\n            switch (intervalType) {\n                case 'Years':\n                    result.setFullYear(result.getFullYear() + interval);\n                    return result;\n                case 'Quarter':\n                    result.setMonth(result.getMonth() + (3 * interval));\n                    return result;\n                case 'Months':\n                    result.setMonth(result.getMonth() + interval);\n                    return result;\n                case 'Weeks':\n                    result.setDate(result.getDate() + (interval * 7));\n                    return result;\n                case 'Days':\n                    result.setDate(result.getDate() + interval);\n                    return result;\n                case 'Hours':\n                    result.setHours(result.getHours() + interval);\n                    return result;\n                case 'Minutes':\n                    result.setMinutes(result.getMinutes() + interval);\n                    return result;\n                case 'Seconds':\n                    result.setSeconds(result.getSeconds() + interval);\n                    return result;\n            }\n        }\n        else {\n            result = this.getDecimalInterval(result, interval, intervalType);\n        }\n        return result;\n    };\n    DateTime.prototype.alignRangeStart = function (axis, sDate, intervalSize, intervalType) {\n        var sResult = new Date(sDate);\n        switch (axis.actualIntervalType) {\n            case 'Years':\n                var year = Math.floor(Math.floor(sResult.getFullYear() / intervalSize) * intervalSize);\n                sResult = new Date(year, sResult.getMonth(), sResult.getDate(), 0, 0, 0);\n                return sResult;\n            case 'Months':\n                var month = Math.floor(Math.floor((sResult.getMonth()) / intervalSize) * intervalSize);\n                sResult = new Date(sResult.getFullYear(), month, sResult.getDate(), 0, 0, 0);\n                return sResult;\n            case 'Days':\n                var day = Math.floor(Math.floor((sResult.getDate()) / intervalSize) * intervalSize);\n                sResult = new Date(sResult.getFullYear(), sResult.getMonth(), day, 0, 0, 0);\n                return sResult;\n            case 'Hours':\n                var hour = Math.floor(Math.floor((sResult.getHours()) / intervalSize) * intervalSize);\n                sResult = new Date(sResult.getFullYear(), sResult.getMonth(), sResult.getDate(), hour, 0, 0);\n                return sResult;\n            case 'Minutes':\n                var minutes = Math.floor(Math.floor((sResult.getMinutes()) / intervalSize) * intervalSize);\n                sResult = new Date(sResult.getFullYear(), sResult.getMonth(), sResult.getDate(), sResult.getHours(), minutes, 0, 0);\n                return sResult;\n            case 'Seconds':\n                var seconds = Math.floor(Math.floor((sResult.getSeconds()) / intervalSize) * intervalSize);\n                sResult = new Date(sResult.getFullYear(), sResult.getMonth(), sResult.getDate(), sResult.getHours(), sResult.getMinutes(), seconds, 0);\n                return sResult;\n        }\n        return sResult;\n    };\n    DateTime.prototype.getDecimalInterval = function (result, interval, intervalType) {\n        var roundValue = Math.floor(interval);\n        var decimalValue = interval - roundValue;\n        switch (intervalType) {\n            case 'Years':\n                var month = Math.round(12 * decimalValue);\n                result.setFullYear(result.getFullYear() + roundValue);\n                result.setMonth(result.getMonth() + month);\n                return result;\n            case 'Quarter':\n                result.setMonth(result.getMonth() + (3 * interval));\n                return result;\n            case 'Months':\n                var days = Math.round(30 * decimalValue);\n                result.setMonth(result.getMonth() + roundValue);\n                result.setDate(result.getDate() + days);\n                return result;\n            case 'Weeks':\n                result.setDate(result.getDate() + (interval * 7));\n                return result;\n            case 'Days':\n                var hour = Math.round(24 * decimalValue);\n                result.setDate(result.getDate() + roundValue);\n                result.setHours(result.getHours() + hour);\n                return result;\n            case 'Hours':\n                var min = Math.round(60 * decimalValue);\n                result.setHours(result.getHours() + roundValue);\n                result.setMinutes(result.getMinutes() + min);\n                return result;\n            case 'Minutes':\n                var sec = Math.round(60 * decimalValue);\n                result.setMinutes(result.getMinutes() + roundValue);\n                result.setSeconds(result.getSeconds() + sec);\n                return result;\n            case 'Seconds':\n                var milliSec = Math.round(1000 * decimalValue);\n                result.setSeconds(result.getSeconds() + roundValue);\n                result.setMilliseconds(result.getMilliseconds() + milliSec);\n                return result;\n        }\n        return result;\n    };\n    /**\n     * Get module name\n     */\n    DateTime.prototype.getModuleName = function () {\n        /**\n         * Returns the module name\n         */\n        return 'DateTime';\n    };\n    /**\n     * To destroy the category axis.\n     * @return {void}\n     * @private\n     */\n    DateTime.prototype.destroy = function (chart) {\n        /**\n         * Destroy method performed here\n         */\n    };\n    return DateTime;\n}(NiceInterval));\nexport { DateTime };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}