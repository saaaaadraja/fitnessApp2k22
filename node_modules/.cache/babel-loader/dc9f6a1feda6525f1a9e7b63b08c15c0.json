{"ast":null,"code":"/**\n * Used to perform `convertion between pixels and points`.\n * @private\n */\nvar PdfUnitConverter =\n/** @class */\nfunction () {\n  //constructors\n\n  /**\n   * Initializes a new instance of the `UnitConvertor` class with DPI value.\n   * @private\n   */\n  function PdfUnitConverter(dpi) {\n    this.updateProportionsHelper(dpi);\n  }\n  /**\n   * `Converts` the value, from one graphics unit to another graphics unit.\n   * @private\n   */\n\n\n  PdfUnitConverter.prototype.convertUnits = function (value, from, to) {\n    return this.convertFromPixels(this.convertToPixels(value, from), to);\n  };\n  /**\n   * Converts the value `to pixel` from specified graphics unit.\n   * @private\n   */\n\n\n  PdfUnitConverter.prototype.convertToPixels = function (value, from) {\n    var index = from;\n    var result = value * this.proportions[index];\n    return result;\n  };\n  /**\n   * Converts value, to specified graphics unit `from Pixel`.\n   * @private\n   */\n\n\n  PdfUnitConverter.prototype.convertFromPixels = function (value, to) {\n    var index = to;\n    var result = value / this.proportions[index];\n    return result;\n  };\n  /**\n   * `Update proportions` matrix according to Graphics settings.\n   * @private\n   */\n\n\n  PdfUnitConverter.prototype.updateProportionsHelper = function (pixelPerInch) {\n    this.proportions = [pixelPerInch / 2.54, pixelPerInch / 6.0, 1, pixelPerInch / 72.0, pixelPerInch, pixelPerInch / 300.0, pixelPerInch / 25.4 // Millimeter\n    ];\n  }; //Fields\n\n  /**\n   * Indicates default `horizontal resolution`.\n   * @default 96\n   * @private\n   */\n\n\n  PdfUnitConverter.horizontalResolution = 96;\n  /**\n   * Indicates default `vertical resolution`.\n   * @default 96\n   * @private\n   */\n\n  PdfUnitConverter.verticalResolution = 96;\n  return PdfUnitConverter;\n}();\n\nexport { PdfUnitConverter };","map":{"version":3,"names":["PdfUnitConverter","dpi","updateProportionsHelper","prototype","convertUnits","value","from","to","convertFromPixels","convertToPixels","index","result","proportions","pixelPerInch","horizontalResolution","verticalResolution"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/unit-convertor.js"],"sourcesContent":["/**\n * Used to perform `convertion between pixels and points`.\n * @private\n */\nvar PdfUnitConverter = /** @class */ (function () {\n    //constructors\n    /**\n     * Initializes a new instance of the `UnitConvertor` class with DPI value.\n     * @private\n     */\n    function PdfUnitConverter(dpi) {\n        this.updateProportionsHelper(dpi);\n    }\n    /**\n     * `Converts` the value, from one graphics unit to another graphics unit.\n     * @private\n     */\n    PdfUnitConverter.prototype.convertUnits = function (value, from, to) {\n        return this.convertFromPixels(this.convertToPixels(value, from), to);\n    };\n    /**\n     * Converts the value `to pixel` from specified graphics unit.\n     * @private\n     */\n    PdfUnitConverter.prototype.convertToPixels = function (value, from) {\n        var index = from;\n        var result = (value * this.proportions[index]);\n        return result;\n    };\n    /**\n     * Converts value, to specified graphics unit `from Pixel`.\n     * @private\n     */\n    PdfUnitConverter.prototype.convertFromPixels = function (value, to) {\n        var index = to;\n        var result = (value / this.proportions[index]);\n        return result;\n    };\n    /**\n     * `Update proportions` matrix according to Graphics settings.\n     * @private\n     */\n    PdfUnitConverter.prototype.updateProportionsHelper = function (pixelPerInch) {\n        this.proportions = [\n            pixelPerInch / 2.54,\n            pixelPerInch / 6.0,\n            1,\n            pixelPerInch / 72.0,\n            pixelPerInch,\n            pixelPerInch / 300.0,\n            pixelPerInch / 25.4 // Millimeter\n        ];\n    };\n    //Fields\n    /**\n     * Indicates default `horizontal resolution`.\n     * @default 96\n     * @private\n     */\n    PdfUnitConverter.horizontalResolution = 96;\n    /**\n     * Indicates default `vertical resolution`.\n     * @default 96\n     * @private\n     */\n    PdfUnitConverter.verticalResolution = 96;\n    return PdfUnitConverter;\n}());\nexport { PdfUnitConverter };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,gBAAgB;AAAG;AAAe,YAAY;EAC9C;;EACA;AACJ;AACA;AACA;EACI,SAASA,gBAAT,CAA0BC,GAA1B,EAA+B;IAC3B,KAAKC,uBAAL,CAA6BD,GAA7B;EACH;EACD;AACJ;AACA;AACA;;;EACID,gBAAgB,CAACG,SAAjB,CAA2BC,YAA3B,GAA0C,UAAUC,KAAV,EAAiBC,IAAjB,EAAuBC,EAAvB,EAA2B;IACjE,OAAO,KAAKC,iBAAL,CAAuB,KAAKC,eAAL,CAAqBJ,KAArB,EAA4BC,IAA5B,CAAvB,EAA0DC,EAA1D,CAAP;EACH,CAFD;EAGA;AACJ;AACA;AACA;;;EACIP,gBAAgB,CAACG,SAAjB,CAA2BM,eAA3B,GAA6C,UAAUJ,KAAV,EAAiBC,IAAjB,EAAuB;IAChE,IAAII,KAAK,GAAGJ,IAAZ;IACA,IAAIK,MAAM,GAAIN,KAAK,GAAG,KAAKO,WAAL,CAAiBF,KAAjB,CAAtB;IACA,OAAOC,MAAP;EACH,CAJD;EAKA;AACJ;AACA;AACA;;;EACIX,gBAAgB,CAACG,SAAjB,CAA2BK,iBAA3B,GAA+C,UAAUH,KAAV,EAAiBE,EAAjB,EAAqB;IAChE,IAAIG,KAAK,GAAGH,EAAZ;IACA,IAAII,MAAM,GAAIN,KAAK,GAAG,KAAKO,WAAL,CAAiBF,KAAjB,CAAtB;IACA,OAAOC,MAAP;EACH,CAJD;EAKA;AACJ;AACA;AACA;;;EACIX,gBAAgB,CAACG,SAAjB,CAA2BD,uBAA3B,GAAqD,UAAUW,YAAV,EAAwB;IACzE,KAAKD,WAAL,GAAmB,CACfC,YAAY,GAAG,IADA,EAEfA,YAAY,GAAG,GAFA,EAGf,CAHe,EAIfA,YAAY,GAAG,IAJA,EAKfA,YALe,EAMfA,YAAY,GAAG,KANA,EAOfA,YAAY,GAAG,IAPA,CAOK;IAPL,CAAnB;EASH,CAVD,CAtC8C,CAiD9C;;EACA;AACJ;AACA;AACA;AACA;;;EACIb,gBAAgB,CAACc,oBAAjB,GAAwC,EAAxC;EACA;AACJ;AACA;AACA;AACA;;EACId,gBAAgB,CAACe,kBAAjB,GAAsC,EAAtC;EACA,OAAOf,gBAAP;AACH,CA/DqC,EAAtC;;AAgEA,SAASA,gBAAT"},"metadata":{},"sourceType":"module"}