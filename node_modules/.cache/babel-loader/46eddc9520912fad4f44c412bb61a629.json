{"ast":null,"code":"import { Marker } from './marker';\nimport { TextOption, renderTextElement } from '../../smithchart/utils/helper';\nimport { SmithchartRect, LineSegment, PointRegion, DataLabelTextOptions } from '../../smithchart/utils/utils';\nimport { _getEpsilonValue, PathOption, RectOption, getAnimationFunction, templateAnimate } from '../../smithchart/utils/helper';\nimport { animationComplete } from '../../smithchart/model/constant';\nimport { DataLabel } from '../../smithchart/series/datalabel';\nimport { Animation } from '@syncfusion/ej2-base';\nimport { textRender, seriesRender } from '../model/constant';\n/* tslint:disable:no-string-literal */\n\nvar SeriesRender =\n/** @class */\nfunction () {\n  function SeriesRender() {\n    this.xValues = [];\n    this.yValues = [];\n    this.pointsRegion = [];\n    this.lineSegments = [];\n    this.location = [];\n    this.dataLabel = new DataLabel();\n  }\n\n  SeriesRender.prototype.processData = function (series) {\n    var dataArray = series.dataSource;\n    var resistance = series.resistance;\n    var reactance = series.reactance;\n    var tooltip = series.tooltipMappingName;\n    series.points = [];\n\n    for (var i = 0; i < dataArray.length; i++) {\n      series.points.push({\n        resistance: dataArray[i][resistance],\n        reactance: dataArray[i][reactance],\n        tooltip: dataArray[i][tooltip]\n      });\n    }\n  }; // tslint:disable:max-func-body-length\n\n\n  SeriesRender.prototype.draw = function (smithchart, axisRender, bounds) {\n    var groupElement = smithchart.renderer.createGroup({\n      'id': smithchart.element.id + '_svg' + '_seriesCollections'\n    });\n    var resistantCx;\n    var reactanceCy;\n    var series = smithchart.series;\n    var seriesLength = series.length;\n    var chartAreaRadius = axisRender.areaRadius;\n    var interSectPoint;\n    var index;\n\n    for (var m = 0; m < seriesLength; m++) {\n      var seriesIndex = m;\n\n      if (series[m].dataSource && series[m].resistance && series[m].reactance) {\n        this.processData(series[m]);\n      }\n\n      this.pointsRegion[m] = [];\n      this.location[m] = [];\n\n      for (var j = 0; j < series[m].points.length; j++) {\n        this.xValues[j] = series[m].points[j]['resistance'];\n        this.yValues[j] = series[m].points[j]['reactance'];\n      }\n\n      var chartAreaCx = axisRender.circleCenterX;\n      var chartAreaCy = axisRender.circleCenterY;\n      var diameter = axisRender.areaRadius * 2;\n      var reactanceStartPoint = {\n        x: chartAreaCx + (smithchart.renderType === 'Impedance' ? chartAreaRadius : -chartAreaRadius),\n        y: chartAreaCy\n      };\n      var resistantCy = chartAreaCy;\n      var reactanceCx = reactanceStartPoint.x;\n\n      for (var k = 0; k < series[m].points.length; k++) {\n        var resistance = this.xValues[k];\n        var resistantR = diameter * (1 / (resistance + 1)) / 2;\n        var reactance = this.yValues[k];\n        var reactanceR = Math.abs(1 / reactance * diameter / 2);\n\n        if (smithchart.renderType === 'Impedance') {\n          reactanceCy = reactance > 0 ? chartAreaCy - reactanceR : chartAreaCy + reactanceR;\n          resistantCx = axisRender.circleLeftX + diameter - resistantR;\n        } else {\n          reactanceCy = reactance < 0 ? chartAreaCy - reactanceR : chartAreaCy + reactanceR;\n          resistantCx = axisRender.circleLeftX + resistantR;\n        }\n\n        interSectPoint = axisRender.intersectingCirclePoints(reactanceCx, reactanceCy, reactanceR, resistantCx, resistantCy, resistantR, smithchart.renderType);\n\n        var epsilon = _getEpsilonValue();\n\n        if (Math.abs(reactance) < epsilon) {\n          interSectPoint.x = smithchart.renderType === 'Impedance' ? resistantCx - resistantR : resistantCx + resistantR;\n          interSectPoint.y = chartAreaCy;\n        }\n\n        this.pointsRegion[m][k] = new PointRegion();\n        this.pointsRegion[m][k] = {\n          point: interSectPoint,\n          x: resistance,\n          y: reactance\n        };\n        this.location[m][k] = {\n          x: interSectPoint.x,\n          y: interSectPoint.y\n        };\n      }\n\n      for (var i = 0; i < series[m].points.length - 1; i++) {\n        index = i + 1;\n        this.lineSegments[i] = new LineSegment();\n        this.lineSegments[i] = {\n          x1: this.xValues[i],\n          y1: this.yValues[i],\n          x2: this.xValues[index],\n          y2: this.yValues[index]\n        };\n      }\n\n      smithchart.svgObject.appendChild(groupElement);\n      this.drawSeries(smithchart, seriesIndex, groupElement, bounds);\n    }\n\n    for (var j = 0; j < smithchart.series.length; j++) {\n      if (smithchart.series[j].enableSmartLabels && smithchart.series[j].marker.dataLabel.visible) {\n        var gdlcEle = smithchart.renderer.createGroup({\n          'id': smithchart.element.id + '_svg' + '_series' + j + '_Datalabel' + '_connectorLines'\n        });\n        var element = document.getElementById(smithchart.element.id + '_svg' + '_seriesCollection' + j);\n\n        if (element) {\n          element.appendChild(gdlcEle);\n        }\n\n        this.dataLabel.calculateSmartLabels(this.dataLabel.labelOptions[j], j);\n\n        for (var k = 0; k < smithchart.series[j].points.length; k++) {\n          var currentPoint = this.dataLabel.labelOptions[j]['textOptions'][k];\n\n          if (currentPoint.xPosition + currentPoint.width > smithchart.chartArea.x + smithchart.chartArea.width || currentPoint.xPosition < smithchart.chartArea.x || currentPoint.yPosition < smithchart.chartArea.y || currentPoint.yPosition + currentPoint.height > smithchart.chartArea.y + smithchart.chartArea.height) {\n            this.dataLabel.labelOptions[j].textOptions[k].connectorFlag = false;\n            this.dataLabel.labelOptions[j].textOptions[k].visible = false;\n          }\n\n          if (currentPoint['connectorFlag']) {\n            this.dataLabel.drawConnectorLines(smithchart, j, k, currentPoint, gdlcEle);\n          }\n        }\n      }\n    }\n\n    var _loop_1 = function _loop_1(j) {\n      var dataLabel = smithchart.series[j].marker.dataLabel;\n\n      if (smithchart.series[j].marker.dataLabel.visible) {\n        var element = document.getElementById(smithchart.element.id + '_svg' + '_seriesCollection' + j);\n        var gdEle_1 = smithchart.renderer.createGroup({\n          'id': smithchart.element.id + '_svg' + '_series' + j + '_Datalabel'\n        });\n\n        if (element) {\n          element.appendChild(gdEle_1);\n        }\n\n        var _loop_2 = function _loop_2(k) {\n          var currentPoint = this_1.dataLabel.labelOptions[j]['textOptions'][k];\n\n          if (!dataLabel.template && currentPoint.visible) {\n            var options_1 = new DataLabelTextOptions();\n            options_1 = this_1.dataLabel.labelOptions[j]['textOptions'][k];\n            var font_1 = dataLabel.textStyle;\n            var x = options_1['xPosition'];\n            var y = options_1['yPosition'];\n            var id = smithchart.element.id + '_Series' + j + '_Points' + k + '_dataLabel' + '_symbol' + k;\n            var fill = dataLabel['fill'] ? dataLabel['fill'] : smithchart.series[j].fill || smithchart.seriesColors[j % smithchart.seriesColors.length];\n            var border = smithchart.series[j].marker.dataLabel.border;\n            var rectOptions = new RectOption(id, fill, border, options_1['opacity'], new SmithchartRect(x, y, options_1['width'], options_1['height']));\n            var dataEle = smithchart.renderer.drawRectangle(rectOptions);\n            gdEle_1.appendChild(dataEle);\n            var textRenderEventArgs = {\n              text: options_1['text'],\n              x: options_1['x'],\n              y: options_1['y'],\n              seriesIndex: j,\n              pointIndex: k,\n              name: textRender,\n              cancel: false\n            };\n\n            var textRenderSuccess = function textRenderSuccess(args) {\n              if (!args.cancel) {\n                var textoptions = new TextOption(options_1['id'], args.x, args.y, 'start', args.text);\n                var color = font_1.color ? font_1.color : smithchart.themeStyle.dataLabel;\n                var element_1 = renderTextElement(textoptions, font_1, color, gdEle_1);\n                gdEle_1.appendChild(element_1);\n              }\n            };\n\n            textRenderSuccess.bind(this_1);\n            smithchart.trigger(textRender, textRenderEventArgs, textRenderSuccess);\n          } else if (dataLabel.template) {\n            var element_2 = document.getElementById(dataLabel.template + '_seriesIndex' + j + '_pointIndex' + k + smithchart.element.id);\n            element_2.style.left = this_1.dataLabel.labelOptions[j]['textOptions'][k].xPosition + 'px';\n            element_2.style.top = this_1.dataLabel.labelOptions[j]['textOptions'][k].yPosition + 'px';\n          }\n        };\n\n        for (var k = 0; k < smithchart.series[j].points.length; k++) {\n          _loop_2(k);\n        }\n      }\n    };\n\n    var this_1 = this;\n\n    for (var j = 0; j < smithchart.series.length; j++) {\n      _loop_1(j);\n    }\n\n    for (var i = 0; i < smithchart.series.length; i++) {\n      if (smithchart.series[i].enableAnimation && smithchart.animateSeries) {\n        if (smithchart.series[i].marker.dataLabel.template) {\n          this.animateDataLabelTemplate(i, smithchart);\n        }\n\n        var element = document.getElementById(smithchart.element.id + '_svg' + '_seriesCollection' + i);\n        this.performAnimation(smithchart, element, i);\n      }\n    }\n  };\n\n  SeriesRender.prototype.drawSeries = function (smithchart, seriesindex, groupElement, bounds) {\n    var _this = this;\n\n    var gsEle = smithchart.renderer.createGroup({\n      'id': smithchart.element.id + '_svg' + '_seriesCollection' + seriesindex,\n      'clip-path': 'url(#' + smithchart.element.id + '_ChartSeriesClipRect_' + seriesindex + ')'\n    });\n    gsEle.setAttribute('visibility', smithchart.series[seriesindex].visibility);\n    groupElement.appendChild(gsEle);\n    var sb = '';\n    var path;\n    var marker = smithchart.series[seriesindex].marker;\n    var element;\n    var count = smithchart.series[seriesindex].points.length - 1;\n\n    for (var i = 0; i < count; i++) {\n      var point1 = this.pointsRegion[seriesindex][i]['point'];\n      var point2 = this.pointsRegion[seriesindex][i + 1]['point'];\n      sb = sb + ('M' + ' ' + point1.x + ' ' + point1.y + ' ' + 'L' + ' ' + point2.x + ' ' + point2.y + ' ');\n    }\n\n    path = sb.toString();\n    var fill = smithchart.series[seriesindex].fill || smithchart.seriesColors[seriesindex % smithchart.seriesColors.length];\n    var seriesEventArgs = {\n      text: smithchart.series[seriesindex].name,\n      fill: fill,\n      name: seriesRender,\n      cancel: false\n    };\n\n    var seriesRenderSuccess = function seriesRenderSuccess(args) {\n      if (!args.cancel) {\n        var options = new PathOption(smithchart.element.id + '_series' + seriesindex + '_points', 'none', smithchart.series[seriesindex].width, seriesEventArgs.fill, smithchart.series[seriesindex].opacity, 'none', path);\n        _this.clipRectElement = smithchart.renderer.drawClipPath(new RectOption(smithchart.element.id + '_ChartSeriesClipRect_' + seriesindex, 'transparent', {\n          width: 1,\n          color: 'Gray'\n        }, 1, {\n          x: bounds.x,\n          y: bounds.y,\n          width: smithchart.availableSize.width,\n          height: smithchart.availableSize.height\n        }));\n        gsEle.appendChild(_this.clipRectElement);\n        var gspEle = smithchart.renderer.createGroup({\n          'id': smithchart.element.id + '_svg' + seriesindex\n        });\n        element = smithchart.renderer.drawPath(options);\n        gspEle.appendChild(element);\n        gsEle.appendChild(gspEle);\n      }\n    };\n\n    seriesRenderSuccess.bind(this);\n    smithchart.trigger(seriesRender, seriesEventArgs, seriesRenderSuccess);\n    var markerrender = new Marker();\n    markerrender.drawMarker(smithchart, seriesindex, gsEle, this.pointsRegion[seriesindex]);\n    this.dataLabel.drawDataLabel(smithchart, seriesindex, gsEle, this.pointsRegion[seriesindex], bounds);\n  };\n\n  SeriesRender.prototype.animateDataLabelTemplate = function (seriesindex, smithchart) {\n    var length = smithchart.series[seriesindex].points.length;\n    var opacity = 0;\n    var delay = 0;\n    var duration = parseFloat(smithchart.series[seriesindex].animationDuration);\n\n    for (var i = 0; i < length; i++) {\n      var element = document.getElementById(smithchart.series[seriesindex].marker.dataLabel.template + '_seriesIndex' + seriesindex + '_pointIndex' + i + smithchart.element.id);\n      element.style.visibility = 'hidden';\n      templateAnimate(smithchart, element, delay, duration, 'FadeIn'); // this.fadein(element);\n    }\n  };\n  /*private fadein(element: HTMLElement): void {\n    let op: number = 0.1;\n    element.style.display = 'block';\n    let timer: number = setInterval( (): void => {\n          if (op >= 1) {\n              clearInterval(timer);\n          }\n          element.style.opacity = op.toString();\n          element.style.filter = 'alpha(opacity=' + op * 100 + ')';\n          op += op * 0.1;\n  }, 50);\n  \n  }*/\n\n\n  SeriesRender.prototype.performAnimation = function (smithchart, gsEle, seriesIndex) {\n    var animation = new Animation({});\n    var element = document.getElementById('container_svg_seriesCollections');\n    var clipRect = gsEle.childNodes[0].childNodes[0].childNodes[0];\n    var effect = getAnimationFunction('Linear');\n    var reveffect = getAnimationFunction('Reverse');\n    var width = +clipRect.getAttribute('width');\n    var x = +clipRect.getAttribute('x');\n    var value;\n    animation.animate(clipRect, {\n      duration: parseFloat(smithchart.series[seriesIndex].animationDuration),\n      progress: function progress(args) {\n        if (smithchart.renderType === 'Impedance') {\n          value = effect(args.timeStamp - args.delay, 0, width, args.duration);\n          clipRect.setAttribute('width', value.toString());\n        } else {\n          value = reveffect(args.timeStamp - args.delay, width, 0, args.duration);\n          clipRect.setAttribute('x', value.toString());\n        }\n      },\n      end: function end(model) {\n        if (smithchart.renderType === 'Impedance') {\n          clipRect.setAttribute('width', width.toString());\n        } else {\n          clipRect.setAttribute('x', x.toString());\n        }\n\n        var event = {\n          cancel: false,\n          name: animationComplete,\n          smithchart: !smithchart.isBlazor ? smithchart : null\n        };\n        smithchart.trigger(animationComplete, event);\n      }\n    });\n  };\n\n  SeriesRender.prototype.getLocation = function (seriesindex, pointIndex) {\n    var x;\n    var y;\n    x = this.location[seriesindex][pointIndex].x;\n    y = this.location[seriesindex][pointIndex].y;\n    return {\n      x: x,\n      y: y\n    };\n  };\n\n  return SeriesRender;\n}();\n\nexport { SeriesRender };","map":{"version":3,"names":["Marker","TextOption","renderTextElement","SmithchartRect","LineSegment","PointRegion","DataLabelTextOptions","_getEpsilonValue","PathOption","RectOption","getAnimationFunction","templateAnimate","animationComplete","DataLabel","Animation","textRender","seriesRender","SeriesRender","xValues","yValues","pointsRegion","lineSegments","location","dataLabel","prototype","processData","series","dataArray","dataSource","resistance","reactance","tooltip","tooltipMappingName","points","i","length","push","draw","smithchart","axisRender","bounds","groupElement","renderer","createGroup","element","id","resistantCx","reactanceCy","seriesLength","chartAreaRadius","areaRadius","interSectPoint","index","m","seriesIndex","j","chartAreaCx","circleCenterX","chartAreaCy","circleCenterY","diameter","reactanceStartPoint","x","renderType","y","resistantCy","reactanceCx","k","resistantR","reactanceR","Math","abs","circleLeftX","intersectingCirclePoints","epsilon","point","x1","y1","x2","y2","svgObject","appendChild","drawSeries","enableSmartLabels","marker","visible","gdlcEle","document","getElementById","calculateSmartLabels","labelOptions","currentPoint","xPosition","width","chartArea","yPosition","height","textOptions","connectorFlag","drawConnectorLines","_loop_1","gdEle_1","_loop_2","this_1","template","options_1","font_1","textStyle","fill","seriesColors","border","rectOptions","dataEle","drawRectangle","textRenderEventArgs","text","pointIndex","name","cancel","textRenderSuccess","args","textoptions","color","themeStyle","element_1","bind","trigger","element_2","style","left","top","enableAnimation","animateSeries","animateDataLabelTemplate","performAnimation","seriesindex","_this","gsEle","setAttribute","visibility","sb","path","count","point1","point2","toString","seriesEventArgs","seriesRenderSuccess","options","opacity","clipRectElement","drawClipPath","availableSize","gspEle","drawPath","markerrender","drawMarker","drawDataLabel","delay","duration","parseFloat","animationDuration","animation","clipRect","childNodes","effect","reveffect","getAttribute","value","animate","progress","timeStamp","end","model","event","isBlazor","getLocation"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-charts/src/smithchart/series/seriesrender.js"],"sourcesContent":["import { Marker } from './marker';\nimport { TextOption, renderTextElement } from '../../smithchart/utils/helper';\nimport { SmithchartRect, LineSegment, PointRegion, DataLabelTextOptions } from '../../smithchart/utils/utils';\nimport { _getEpsilonValue, PathOption, RectOption, getAnimationFunction, templateAnimate } from '../../smithchart/utils/helper';\nimport { animationComplete } from '../../smithchart/model/constant';\nimport { DataLabel } from '../../smithchart/series/datalabel';\nimport { Animation } from '@syncfusion/ej2-base';\nimport { textRender, seriesRender } from '../model/constant';\n/* tslint:disable:no-string-literal */\nvar SeriesRender = /** @class */ (function () {\n    function SeriesRender() {\n        this.xValues = [];\n        this.yValues = [];\n        this.pointsRegion = [];\n        this.lineSegments = [];\n        this.location = [];\n        this.dataLabel = new DataLabel();\n    }\n    SeriesRender.prototype.processData = function (series) {\n        var dataArray = series.dataSource;\n        var resistance = series.resistance;\n        var reactance = series.reactance;\n        var tooltip = series.tooltipMappingName;\n        series.points = [];\n        for (var i = 0; i < dataArray.length; i++) {\n            series.points.push({\n                resistance: dataArray[i][resistance],\n                reactance: dataArray[i][reactance],\n                tooltip: dataArray[i][tooltip]\n            });\n        }\n    };\n    // tslint:disable:max-func-body-length\n    SeriesRender.prototype.draw = function (smithchart, axisRender, bounds) {\n        var groupElement = smithchart.renderer.createGroup({ 'id': smithchart.element.id + '_svg' + '_seriesCollections' });\n        var resistantCx;\n        var reactanceCy;\n        var series = smithchart.series;\n        var seriesLength = series.length;\n        var chartAreaRadius = axisRender.areaRadius;\n        var interSectPoint;\n        var index;\n        for (var m = 0; m < seriesLength; m++) {\n            var seriesIndex = m;\n            if (series[m].dataSource && series[m].resistance && series[m].reactance) {\n                this.processData(series[m]);\n            }\n            this.pointsRegion[m] = [];\n            this.location[m] = [];\n            for (var j = 0; j < series[m].points.length; j++) {\n                this.xValues[j] = series[m].points[j]['resistance'];\n                this.yValues[j] = series[m].points[j]['reactance'];\n            }\n            var chartAreaCx = axisRender.circleCenterX;\n            var chartAreaCy = axisRender.circleCenterY;\n            var diameter = axisRender.areaRadius * 2;\n            var reactanceStartPoint = {\n                x: chartAreaCx + ((smithchart.renderType === 'Impedance') ?\n                    chartAreaRadius : -chartAreaRadius), y: chartAreaCy\n            };\n            var resistantCy = chartAreaCy;\n            var reactanceCx = reactanceStartPoint.x;\n            for (var k = 0; k < series[m].points.length; k++) {\n                var resistance = this.xValues[k];\n                var resistantR = (diameter * (1 / (resistance + 1))) / 2;\n                var reactance = this.yValues[k];\n                var reactanceR = Math.abs(((1 / reactance) * diameter) / 2);\n                if (smithchart.renderType === 'Impedance') {\n                    reactanceCy = reactance > 0 ? chartAreaCy - reactanceR : chartAreaCy + reactanceR;\n                    resistantCx = (axisRender.circleLeftX + diameter - resistantR);\n                }\n                else {\n                    reactanceCy = reactance < 0 ? chartAreaCy - reactanceR : chartAreaCy + reactanceR;\n                    resistantCx = (axisRender.circleLeftX + resistantR);\n                }\n                interSectPoint = axisRender.intersectingCirclePoints(reactanceCx, reactanceCy, reactanceR, resistantCx, resistantCy, resistantR, smithchart.renderType);\n                var epsilon = _getEpsilonValue();\n                if (Math.abs(reactance) < epsilon) {\n                    interSectPoint.x = (smithchart.renderType === 'Impedance') ?\n                        resistantCx - resistantR : resistantCx + resistantR;\n                    interSectPoint.y = chartAreaCy;\n                }\n                this.pointsRegion[m][k] = new PointRegion();\n                this.pointsRegion[m][k] = { point: interSectPoint, x: resistance, y: reactance };\n                this.location[m][k] = { x: interSectPoint.x, y: interSectPoint.y };\n            }\n            for (var i = 0; i < series[m].points.length - 1; i++) {\n                index = i + 1;\n                this.lineSegments[i] = new LineSegment();\n                this.lineSegments[i] = { x1: this.xValues[i], y1: this.yValues[i], x2: this.xValues[index], y2: this.yValues[index] };\n            }\n            smithchart.svgObject.appendChild(groupElement);\n            this.drawSeries(smithchart, seriesIndex, groupElement, bounds);\n        }\n        for (var j = 0; j < smithchart.series.length; j++) {\n            if (smithchart.series[j].enableSmartLabels && smithchart.series[j].marker.dataLabel.visible) {\n                var gdlcEle = smithchart.renderer.createGroup({\n                    'id': smithchart.element.id + '_svg'\n                        + '_series' + j + '_Datalabel' + '_connectorLines'\n                });\n                var element = document.getElementById(smithchart.element.id + '_svg' + '_seriesCollection' + j);\n                if (element) {\n                    element.appendChild(gdlcEle);\n                }\n                this.dataLabel.calculateSmartLabels(this.dataLabel.labelOptions[j], j);\n                for (var k = 0; k < smithchart.series[j].points.length; k++) {\n                    var currentPoint = this.dataLabel.labelOptions[j]['textOptions'][k];\n                    if ((currentPoint.xPosition + currentPoint.width) > (smithchart.chartArea.x + smithchart.chartArea.width)\n                        || currentPoint.xPosition < smithchart.chartArea.x || currentPoint.yPosition < smithchart.chartArea.y ||\n                        currentPoint.yPosition + currentPoint.height > smithchart.chartArea.y + smithchart.chartArea.height) {\n                        this.dataLabel.labelOptions[j].textOptions[k].connectorFlag = false;\n                        this.dataLabel.labelOptions[j].textOptions[k].visible = false;\n                    }\n                    if (currentPoint['connectorFlag']) {\n                        this.dataLabel.drawConnectorLines(smithchart, j, k, currentPoint, gdlcEle);\n                    }\n                }\n            }\n        }\n        var _loop_1 = function (j) {\n            var dataLabel = smithchart.series[j].marker.dataLabel;\n            if (smithchart.series[j].marker.dataLabel.visible) {\n                var element = document.getElementById(smithchart.element.id + '_svg' + '_seriesCollection' + j);\n                var gdEle_1 = smithchart.renderer.createGroup({\n                    'id': smithchart.element.id + '_svg'\n                        + '_series' + j + '_Datalabel'\n                });\n                if (element) {\n                    element.appendChild(gdEle_1);\n                }\n                var _loop_2 = function (k) {\n                    var currentPoint = this_1.dataLabel.labelOptions[j]['textOptions'][k];\n                    if (!dataLabel.template && currentPoint.visible) {\n                        var options_1 = new DataLabelTextOptions();\n                        options_1 = this_1.dataLabel.labelOptions[j]['textOptions'][k];\n                        var font_1 = dataLabel.textStyle;\n                        var x = options_1['xPosition'];\n                        var y = options_1['yPosition'];\n                        var id = smithchart.element.id + '_Series' + j + '_Points' + k + '_dataLabel' + '_symbol' + k;\n                        var fill = dataLabel['fill'] ? dataLabel['fill'] : (smithchart.series[j].fill ||\n                            smithchart.seriesColors[j % smithchart.seriesColors.length]);\n                        var border = smithchart.series[j].marker.dataLabel.border;\n                        var rectOptions = new RectOption(id, fill, border, options_1['opacity'], new SmithchartRect(x, y, options_1['width'], options_1['height']));\n                        var dataEle = smithchart.renderer.drawRectangle(rectOptions);\n                        gdEle_1.appendChild(dataEle);\n                        var textRenderEventArgs = {\n                            text: options_1['text'],\n                            x: options_1['x'],\n                            y: options_1['y'],\n                            seriesIndex: j,\n                            pointIndex: k,\n                            name: textRender,\n                            cancel: false\n                        };\n                        var textRenderSuccess = function (args) {\n                            if (!args.cancel) {\n                                var textoptions = new TextOption(options_1['id'], args.x, args.y, 'start', args.text);\n                                var color = font_1.color ? font_1.color : smithchart.themeStyle.dataLabel;\n                                var element_1 = renderTextElement(textoptions, font_1, color, gdEle_1);\n                                gdEle_1.appendChild(element_1);\n                            }\n                        };\n                        textRenderSuccess.bind(this_1);\n                        smithchart.trigger(textRender, textRenderEventArgs, textRenderSuccess);\n                    }\n                    else if (dataLabel.template) {\n                        var element_2 = document.getElementById(dataLabel.template + '_seriesIndex' + j + '_pointIndex' +\n                            k + smithchart.element.id);\n                        element_2.style.left = this_1.dataLabel.labelOptions[j]['textOptions'][k].xPosition + 'px';\n                        element_2.style.top = this_1.dataLabel.labelOptions[j]['textOptions'][k].yPosition + 'px';\n                    }\n                };\n                for (var k = 0; k < smithchart.series[j].points.length; k++) {\n                    _loop_2(k);\n                }\n            }\n        };\n        var this_1 = this;\n        for (var j = 0; j < smithchart.series.length; j++) {\n            _loop_1(j);\n        }\n        for (var i = 0; i < smithchart.series.length; i++) {\n            if (smithchart.series[i].enableAnimation && smithchart.animateSeries) {\n                if (smithchart.series[i].marker.dataLabel.template) {\n                    this.animateDataLabelTemplate(i, smithchart);\n                }\n                var element = document.getElementById(smithchart.element.id + '_svg' + '_seriesCollection' + i);\n                this.performAnimation(smithchart, element, i);\n            }\n        }\n    };\n    SeriesRender.prototype.drawSeries = function (smithchart, seriesindex, groupElement, bounds) {\n        var _this = this;\n        var gsEle = smithchart.renderer.createGroup({\n            'id': smithchart.element.id + '_svg' + '_seriesCollection' + seriesindex,\n            'clip-path': 'url(#' + smithchart.element.id + '_ChartSeriesClipRect_' +\n                seriesindex + ')'\n        });\n        gsEle.setAttribute('visibility', smithchart.series[seriesindex].visibility);\n        groupElement.appendChild(gsEle);\n        var sb = '';\n        var path;\n        var marker = smithchart.series[seriesindex].marker;\n        var element;\n        var count = smithchart.series[seriesindex].points.length - 1;\n        for (var i = 0; i < count; i++) {\n            var point1 = this.pointsRegion[seriesindex][i]['point'];\n            var point2 = this.pointsRegion[seriesindex][i + 1]['point'];\n            sb = sb + ('M' + ' ' + (point1.x) + ' ' + (point1.y) + ' ' + 'L' +\n                ' ' + (point2.x) + ' ' + (point2.y) + ' ');\n        }\n        path = sb.toString();\n        var fill = smithchart.series[seriesindex].fill || smithchart.seriesColors[seriesindex % smithchart.seriesColors.length];\n        var seriesEventArgs = {\n            text: smithchart.series[seriesindex].name,\n            fill: fill,\n            name: seriesRender,\n            cancel: false\n        };\n        var seriesRenderSuccess = function (args) {\n            if (!args.cancel) {\n                var options = new PathOption(smithchart.element.id + '_series' + seriesindex + '_points', 'none', smithchart.series[seriesindex].width, seriesEventArgs.fill, smithchart.series[seriesindex].opacity, 'none', path);\n                _this.clipRectElement = smithchart.renderer.drawClipPath(new RectOption(smithchart.element.id + '_ChartSeriesClipRect_' + seriesindex, 'transparent', { width: 1, color: 'Gray' }, 1, {\n                    x: bounds.x, y: bounds.y,\n                    width: smithchart.availableSize.width,\n                    height: smithchart.availableSize.height\n                }));\n                gsEle.appendChild(_this.clipRectElement);\n                var gspEle = smithchart.renderer.createGroup({ 'id': smithchart.element.id + '_svg' + seriesindex });\n                element = smithchart.renderer.drawPath(options);\n                gspEle.appendChild(element);\n                gsEle.appendChild(gspEle);\n            }\n        };\n        seriesRenderSuccess.bind(this);\n        smithchart.trigger(seriesRender, seriesEventArgs, seriesRenderSuccess);\n        var markerrender = new Marker();\n        markerrender.drawMarker(smithchart, seriesindex, gsEle, this.pointsRegion[seriesindex]);\n        this.dataLabel.drawDataLabel(smithchart, seriesindex, gsEle, this.pointsRegion[seriesindex], bounds);\n    };\n    SeriesRender.prototype.animateDataLabelTemplate = function (seriesindex, smithchart) {\n        var length = smithchart.series[seriesindex].points.length;\n        var opacity = 0;\n        var delay = 0;\n        var duration = parseFloat(smithchart.series[seriesindex].animationDuration);\n        for (var i = 0; i < length; i++) {\n            var element = document.getElementById(smithchart.series[seriesindex].marker.dataLabel.template +\n                '_seriesIndex' + seriesindex + '_pointIndex' + i + smithchart.element.id);\n            element.style.visibility = 'hidden';\n            templateAnimate(smithchart, element, delay, duration, 'FadeIn');\n            // this.fadein(element);\n        }\n    };\n    /*private fadein(element: HTMLElement): void {\n      let op: number = 0.1;\n      element.style.display = 'block';\n      let timer: number = setInterval( (): void => {\n            if (op >= 1) {\n                clearInterval(timer);\n            }\n            element.style.opacity = op.toString();\n            element.style.filter = 'alpha(opacity=' + op * 100 + ')';\n            op += op * 0.1;\n    }, 50);\n    \n    }*/\n    SeriesRender.prototype.performAnimation = function (smithchart, gsEle, seriesIndex) {\n        var animation = new Animation({});\n        var element = document.getElementById('container_svg_seriesCollections');\n        var clipRect = gsEle.childNodes[0].childNodes[0].childNodes[0];\n        var effect = getAnimationFunction('Linear');\n        var reveffect = getAnimationFunction('Reverse');\n        var width = +clipRect.getAttribute('width');\n        var x = +clipRect.getAttribute('x');\n        var value;\n        animation.animate(clipRect, {\n            duration: parseFloat(smithchart.series[seriesIndex].animationDuration),\n            progress: function (args) {\n                if (smithchart.renderType === 'Impedance') {\n                    value = effect(args.timeStamp - args.delay, 0, width, args.duration);\n                    clipRect.setAttribute('width', value.toString());\n                }\n                else {\n                    value = reveffect(args.timeStamp - args.delay, width, 0, args.duration);\n                    clipRect.setAttribute('x', value.toString());\n                }\n            },\n            end: function (model) {\n                if (smithchart.renderType === 'Impedance') {\n                    clipRect.setAttribute('width', width.toString());\n                }\n                else {\n                    clipRect.setAttribute('x', x.toString());\n                }\n                var event = {\n                    cancel: false,\n                    name: animationComplete,\n                    smithchart: !smithchart.isBlazor ? smithchart : null\n                };\n                smithchart.trigger(animationComplete, event);\n            }\n        });\n    };\n    SeriesRender.prototype.getLocation = function (seriesindex, pointIndex) {\n        var x;\n        var y;\n        x = this.location[seriesindex][pointIndex].x;\n        y = this.location[seriesindex][pointIndex].y;\n        return { x: x, y: y };\n    };\n    return SeriesRender;\n}());\nexport { SeriesRender };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}