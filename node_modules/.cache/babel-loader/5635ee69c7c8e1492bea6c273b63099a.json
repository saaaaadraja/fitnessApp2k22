{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { getPoint, withInRange, TransformToVisible } from '../../common/utils/helper';\nimport { PathOption } from '@syncfusion/ej2-svg-base';\nimport { SplineBase } from './spline-base';\n/**\n * `SplineAreaSeries` module used to render the spline area series.\n */\n\nvar SplineAreaSeries =\n/** @class */\nfunction (_super) {\n  __extends(SplineAreaSeries, _super);\n\n  function SplineAreaSeries() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Render the splineArea series.\n   * @return {void}\n   * @private\n   */\n\n\n  SplineAreaSeries.prototype.render = function (series, xAxis, yAxis, isInverted) {\n    var firstPoint = null;\n    var direction = '';\n    var startPoint = null;\n    var startPoint1 = null;\n    var pt1;\n    var pt2;\n    var bpt1;\n    var bpt2;\n    var controlPt1;\n    var controlPt2;\n    var realPoints = [];\n    var points = [];\n    var point;\n    var pointIndex = 0;\n    realPoints = this.filterEmptyPoints(series);\n\n    for (var i = 0; i < realPoints.length; i++) {\n      point = realPoints[i];\n\n      if (point.x === null || point.x === '') {\n        continue;\n      } else {\n        point.index = pointIndex;\n        pointIndex++;\n        points.push(point);\n      }\n    }\n\n    var pointsLength = points.length;\n    var previous;\n    var getCoordinate = series.chart.chartAreaType === 'PolarRadar' ? TransformToVisible : getPoint;\n    var origin = series.chart.chartAreaType === 'PolarRadar' ? series.points[0].yValue : Math.max(series.yAxis.visibleRange.min, 0);\n\n    for (var i = 0; i < pointsLength; i++) {\n      point = points[i];\n      point.symbolLocations = [];\n      point.regions = [];\n      previous = this.getPreviousIndex(points, point.index - 1, series);\n\n      if (point.visible && withInRange(points[previous], point, points[this.getNextIndex(points, point.index - 1, series)], series)) {\n        if (firstPoint) {\n          controlPt1 = series.drawPoints[previous].controlPoint1;\n          controlPt2 = series.drawPoints[previous].controlPoint2;\n          pt1 = getCoordinate(firstPoint.xValue, firstPoint.yValue, xAxis, yAxis, isInverted, series);\n          pt2 = getCoordinate(point.xValue, point.yValue, xAxis, yAxis, isInverted, series);\n          bpt1 = getCoordinate(controlPt1.x, controlPt1.y, xAxis, yAxis, isInverted, series);\n          bpt2 = getCoordinate(controlPt2.x, controlPt2.y, xAxis, yAxis, isInverted, series);\n          direction = direction.concat('C ' + bpt1.x + ' ' + bpt1.y + ' ' + bpt2.x + ' ' + bpt2.y + ' ' + pt2.x + ' ' + pt2.y + ' ');\n        } else {\n          // Start point for the current path\n          startPoint = getCoordinate(point.xValue, origin, xAxis, yAxis, isInverted, series);\n          direction += 'M ' + startPoint.x + ' ' + startPoint.y + ' '; // First Point to draw the area path\n\n          startPoint1 = getCoordinate(point.xValue, point.yValue, xAxis, yAxis, isInverted, series);\n          direction += 'L ' + startPoint1.x + ' ' + startPoint1.y + ' ';\n        }\n\n        this.storePointLocation(point, series, isInverted, getCoordinate);\n        firstPoint = point;\n      } else {\n        firstPoint = null;\n        point.symbolLocations = [];\n      }\n\n      if ((i + 1 < pointsLength && !points[i + 1].visible || i === pointsLength - 1) && pt2 && startPoint) {\n        startPoint = getCoordinate(point.xValue, origin, xAxis, yAxis, isInverted, series);\n        direction = direction.concat('L ' + startPoint.x + ' ' + startPoint.y);\n      }\n    }\n\n    this.appendLinePath(new PathOption(series.chart.element.id + '_Series_' + series.index, series.interior, series.border.width, series.border.color, series.opacity, series.dashArray, direction), series, '');\n    this.renderMarker(series);\n  };\n  /**\n   * Get module name.\n   */\n\n\n  SplineAreaSeries.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the series\n     */\n    return 'SplineAreaSeries';\n  };\n  /**\n   * To destroy the spline.\n   * @return {void}\n   * @private\n   */\n\n\n  SplineAreaSeries.prototype.destroy = function (chart) {\n    /**\n     * Destroy method calling here\n     */\n  };\n\n  return SplineAreaSeries;\n}(SplineBase);\n\nexport { SplineAreaSeries };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","getPoint","withInRange","TransformToVisible","PathOption","SplineBase","SplineAreaSeries","_super","apply","arguments","render","series","xAxis","yAxis","isInverted","firstPoint","direction","startPoint","startPoint1","pt1","pt2","bpt1","bpt2","controlPt1","controlPt2","realPoints","points","point","pointIndex","filterEmptyPoints","i","length","x","index","push","pointsLength","previous","getCoordinate","chart","chartAreaType","origin","yValue","Math","max","visibleRange","min","symbolLocations","regions","getPreviousIndex","visible","getNextIndex","drawPoints","controlPoint1","controlPoint2","xValue","y","concat","storePointLocation","appendLinePath","element","id","interior","border","width","color","opacity","dashArray","renderMarker","getModuleName","destroy"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-charts/src/chart/series/spline-area-series.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { getPoint, withInRange, TransformToVisible } from '../../common/utils/helper';\nimport { PathOption } from '@syncfusion/ej2-svg-base';\nimport { SplineBase } from './spline-base';\n/**\n * `SplineAreaSeries` module used to render the spline area series.\n */\nvar SplineAreaSeries = /** @class */ (function (_super) {\n    __extends(SplineAreaSeries, _super);\n    function SplineAreaSeries() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Render the splineArea series.\n     * @return {void}\n     * @private\n     */\n    SplineAreaSeries.prototype.render = function (series, xAxis, yAxis, isInverted) {\n        var firstPoint = null;\n        var direction = '';\n        var startPoint = null;\n        var startPoint1 = null;\n        var pt1;\n        var pt2;\n        var bpt1;\n        var bpt2;\n        var controlPt1;\n        var controlPt2;\n        var realPoints = [];\n        var points = [];\n        var point;\n        var pointIndex = 0;\n        realPoints = this.filterEmptyPoints(series);\n        for (var i = 0; i < realPoints.length; i++) {\n            point = realPoints[i];\n            if (point.x === null || point.x === '') {\n                continue;\n            }\n            else {\n                point.index = pointIndex;\n                pointIndex++;\n                points.push(point);\n            }\n        }\n        var pointsLength = points.length;\n        var previous;\n        var getCoordinate = series.chart.chartAreaType === 'PolarRadar' ? TransformToVisible : getPoint;\n        var origin = series.chart.chartAreaType === 'PolarRadar' ? series.points[0].yValue :\n            Math.max(series.yAxis.visibleRange.min, 0);\n        for (var i = 0; i < pointsLength; i++) {\n            point = points[i];\n            point.symbolLocations = [];\n            point.regions = [];\n            previous = this.getPreviousIndex(points, point.index - 1, series);\n            if (point.visible &&\n                withInRange(points[previous], point, points[this.getNextIndex(points, point.index - 1, series)], series)) {\n                if (firstPoint) {\n                    controlPt1 = series.drawPoints[previous].controlPoint1;\n                    controlPt2 = series.drawPoints[previous].controlPoint2;\n                    pt1 = getCoordinate(firstPoint.xValue, firstPoint.yValue, xAxis, yAxis, isInverted, series);\n                    pt2 = getCoordinate(point.xValue, point.yValue, xAxis, yAxis, isInverted, series);\n                    bpt1 = getCoordinate(controlPt1.x, controlPt1.y, xAxis, yAxis, isInverted, series);\n                    bpt2 = getCoordinate(controlPt2.x, controlPt2.y, xAxis, yAxis, isInverted, series);\n                    direction = direction.concat('C ' + bpt1.x + ' '\n                        + bpt1.y + ' ' + bpt2.x + ' ' + bpt2.y + ' ' + pt2.x + ' ' + pt2.y + ' ');\n                }\n                else {\n                    // Start point for the current path\n                    startPoint = getCoordinate(point.xValue, origin, xAxis, yAxis, isInverted, series);\n                    direction += ('M ' + startPoint.x + ' ' + startPoint.y + ' ');\n                    // First Point to draw the area path\n                    startPoint1 = getCoordinate(point.xValue, point.yValue, xAxis, yAxis, isInverted, series);\n                    direction += ('L ' + startPoint1.x + ' ' + startPoint1.y + ' ');\n                }\n                this.storePointLocation(point, series, isInverted, getCoordinate);\n                firstPoint = point;\n            }\n            else {\n                firstPoint = null;\n                point.symbolLocations = [];\n            }\n            if (((i + 1 < pointsLength && !points[i + 1].visible) || i === pointsLength - 1)\n                && pt2 && startPoint) {\n                startPoint = getCoordinate(point.xValue, origin, xAxis, yAxis, isInverted, series);\n                direction = direction.concat('L ' + (startPoint.x) + ' ' + (startPoint.y));\n            }\n        }\n        this.appendLinePath(new PathOption(series.chart.element.id + '_Series_' + series.index, series.interior, series.border.width, series.border.color, series.opacity, series.dashArray, direction), series, '');\n        this.renderMarker(series);\n    };\n    /**\n     * Get module name.\n     */\n    SplineAreaSeries.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the series\n         */\n        return 'SplineAreaSeries';\n    };\n    /**\n     * To destroy the spline.\n     * @return {void}\n     * @private\n     */\n    SplineAreaSeries.prototype.destroy = function (chart) {\n        /**\n         * Destroy method calling here\n         */\n    };\n    return SplineAreaSeries;\n}(SplineBase));\nexport { SplineAreaSeries };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}