{"ast":null,"code":"/**\n * TrueTypeFont.ts class for EJ2-PDF\n */\nimport { ByteArray } from './../../graphics/images/index';\nimport { TtfReader } from './ttf-reader';\nimport { PdfDictionary, SaveDescendantFontEventHandler, SaveFontDictionaryEventHandler } from './../../primitives/pdf-dictionary';\nimport { SaveFontProgramEventHandler, SaveCmapEventHandler } from './../../primitives/pdf-stream';\nimport { PdfStream } from './../../primitives/pdf-stream';\nimport { PdfArray } from './../../primitives/pdf-array';\nimport { PdfName } from './../../primitives/pdf-name';\nimport { PdfNumber } from './../../primitives/pdf-number';\nimport { PdfString } from './../../primitives/pdf-string';\nimport { PdfReferenceHolder } from './../../primitives/pdf-reference';\nimport { PdfFontMetrics } from './pdf-font-metrics';\nimport { StandardWidthTable } from './pdf-font-metrics';\nimport { DictionaryProperties } from './../../input-output/pdf-dictionary-properties';\nimport { Dictionary } from './../../collections/dictionary';\nimport { FontDescriptorFlags } from './enum';\nimport { RectangleF } from './../../drawing/pdf-drawing';\nimport { Operators } from './../../input-output/pdf-operators';\n\nvar UnicodeTrueTypeFont =\n/** @class */\nfunction () {\n  /* tslint:enable */\n  //Constructors\n\n  /**\n   * Initializes a new instance of the `PdfTrueTypeFont` class.\n   * @private\n   */\n  function UnicodeTrueTypeFont(base64String, size) {\n    // Fields\n    this.nameString = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    /**\n     * Specifies the Internal variable to store fields of `PdfDictionaryProperties`.\n     * @private\n     */\n\n    this.dictionaryProperties = new DictionaryProperties();\n    /**\n     * Indicates whether the font program is compressed or not.\n     * @private\n     */\n\n    this.isCompress = false;\n    /**\n     * Indicates whether the font is embedded or not.\n     */\n\n    this.isEmbedFont = false;\n    /**\n     * Cmap table's start prefix.\n     */\n\n    /* tslint:disable */\n\n    this.cmapPrefix = '/CIDInit /ProcSet findresource begin\\n12 dict begin\\nbegincmap' + Operators.newLine + '/CIDSystemInfo << /Registry (Adobe)/Ordering (UCS)/Supplement 0>> def\\n/CMapName ' + '/Adobe-Identity-UCS def\\n/CMapType 2 def\\n1 begincodespacerange' + Operators.newLine;\n    /* tslint:enable */\n\n    /**\n     * Cmap table's start suffix.\n     */\n\n    this.cmapEndCodespaceRange = 'endcodespacerange' + Operators.newLine;\n    /**\n     * Cmap's begin range marker.\n     */\n\n    this.cmapBeginRange = 'beginbfrange' + Operators.newLine;\n    /**\n     * Cmap's end range marker.\n     */\n\n    this.cmapEndRange = 'endbfrange' + Operators.newLine;\n    /**\n     * Cmap table's end\n     */\n\n    /* tslint:disable */\n\n    this.cmapSuffix = 'endbfrange\\nendcmap\\nCMapName currentdict ' + '/CMap defineresource pop\\nend end' + Operators.newLine;\n\n    if (base64String === null || base64String === undefined) {\n      throw new Error('ArgumentNullException:base64String');\n    }\n\n    this.fontSize = size;\n    this.fontString = base64String;\n    this.Initialize();\n  } //Implementation\n\n  /**\n   * Returns width of the char symbol.\n   */\n\n\n  UnicodeTrueTypeFont.prototype.getCharWidth = function (charCode) {\n    var codeWidth = this.ttfReader.getCharWidth(charCode);\n    return codeWidth;\n  };\n  /**\n   * Returns width of the text line.\n   */\n\n\n  UnicodeTrueTypeFont.prototype.getLineWidth = function (line) {\n    // if (line == null) {\n    //     throw new Error('ArgumentNullException : line');\n    // }\n    var width = 0;\n\n    for (var i = 0, len = line.length; i < len; i++) {\n      var ch = line[i];\n      var charWidth = this.getCharWidth(ch);\n      width += charWidth;\n    }\n\n    return width;\n  };\n  /**\n   * Initializes a new instance of the `PdfTrueTypeFont` class.\n   * @private\n   */\n\n\n  UnicodeTrueTypeFont.prototype.Initialize = function () {\n    var byteArray = new ByteArray(this.fontString.length);\n    byteArray.writeFromBase64String(this.fontString);\n    this.fontData = byteArray.internalBuffer;\n    this.ttfReader = new TtfReader(this.fontData);\n    this.ttfMetrics = this.ttfReader.metrics;\n  };\n\n  UnicodeTrueTypeFont.prototype.createInternals = function () {\n    this.fontDictionary = new PdfDictionary();\n    this.fontProgram = new PdfStream();\n    this.cmap = new PdfStream();\n    this.descendantFont = new PdfDictionary();\n    this.metrics = new PdfFontMetrics();\n    this.ttfReader.createInternals();\n    this.ttfMetrics = this.ttfReader.metrics;\n    this.initializeMetrics(); // Create all the dictionaries of the font.\n\n    this.subsetName = this.getFontName();\n    this.createDescendantFont();\n    this.createCmap();\n    this.createFontDictionary();\n    this.createFontProgram();\n  };\n\n  UnicodeTrueTypeFont.prototype.getInternals = function () {\n    return this.fontDictionary;\n  };\n  /**\n   * Initializes metrics.\n   */\n\n\n  UnicodeTrueTypeFont.prototype.initializeMetrics = function () {\n    var ttfMetrics = this.ttfReader.metrics;\n    this.metrics.ascent = ttfMetrics.macAscent;\n    this.metrics.descent = ttfMetrics.macDescent;\n    this.metrics.height = ttfMetrics.macAscent - ttfMetrics.macDescent + ttfMetrics.lineGap;\n    this.metrics.name = ttfMetrics.fontFamily;\n    this.metrics.postScriptName = ttfMetrics.postScriptName;\n    this.metrics.size = this.fontSize;\n    this.metrics.widthTable = new StandardWidthTable(ttfMetrics.widthTable);\n    this.metrics.lineGap = ttfMetrics.lineGap;\n    this.metrics.subScriptSizeFactor = ttfMetrics.subScriptSizeFactor;\n    this.metrics.superscriptSizeFactor = ttfMetrics.superscriptSizeFactor;\n    this.metrics.isBold = ttfMetrics.isBold;\n  };\n  /**\n   * Gets random string.\n   */\n\n\n  UnicodeTrueTypeFont.prototype.getFontName = function () {\n    var builder = '';\n    var name; // if (this.isEmbed === false) {\n\n    for (var i = 0; i < 6; i++) {\n      var index = Math.floor(Math.random() * (25 - 0 + 1)) + 0;\n      builder += this.nameString[index];\n    }\n\n    builder += '+'; // }\n\n    builder += this.ttfReader.metrics.postScriptName;\n    name = builder.toString(); // if (name === '') {\n    //     name = this.ttfReader.metrics.fontFamily;\n    // }\n\n    name = this.formatName(name);\n    return name;\n  };\n  /**\n   * Generates name of the font.\n   */\n\n\n  UnicodeTrueTypeFont.prototype.formatName = function (fontName) {\n    // if (fontName === null) {\n    //     throw new Error('ArgumentNullException : fontName');\n    // }\n    // if (fontName === '') {\n    //     throw new Error('ArgumentOutOfRangeException : fontName, Parameter can not be empty');\n    // }\n    var ret = fontName.replace('(', '#28');\n    ret = ret.replace(')', '#29');\n    ret = ret.replace('[', '#5B');\n    ret = ret.replace(']', '#5D');\n    ret = ret.replace('<', '#3C');\n    ret = ret.replace('>', '#3E');\n    ret = ret.replace('{', '#7B');\n    ret = ret.replace('}', '#7D');\n    ret = ret.replace('/', '#2F');\n    ret = ret.replace('%', '#25');\n    return ret.replace(' ', '#20');\n  };\n  /**\n   * Creates descendant font.\n   */\n\n\n  UnicodeTrueTypeFont.prototype.createDescendantFont = function () {\n    // Set property used to clone Font every time\n    this.descendantFont.isFont = true;\n    this.descendantFont.descendantFontBeginSave = new SaveDescendantFontEventHandler(this);\n    this.descendantFont.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font));\n    this.descendantFont.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.cIDFontType2));\n    this.descendantFont.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.subsetName));\n    this.descendantFont.items.setValue(this.dictionaryProperties.cIDToGIDMap, new PdfName(this.dictionaryProperties.identity));\n    this.descendantFont.items.setValue(this.dictionaryProperties.dw, new PdfNumber(1000));\n    this.fontDescriptor = this.createFontDescriptor();\n    this.descendantFont.items.setValue(this.dictionaryProperties.fontDescriptor, new PdfReferenceHolder(this.fontDescriptor));\n    var systemInfo = this.createSystemInfo();\n    this.descendantFont.items.setValue(this.dictionaryProperties.cIDSystemInfo, systemInfo);\n  };\n  /**\n   * Creates font descriptor.\n   */\n\n\n  UnicodeTrueTypeFont.prototype.createFontDescriptor = function () {\n    var descriptor = new PdfDictionary();\n    var metrics = this.ttfReader.metrics; // Set property used to clone Font every time\n\n    descriptor.isFont = true;\n    descriptor.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.fontDescriptor));\n    descriptor.items.setValue(this.dictionaryProperties.fontName, new PdfName(this.subsetName));\n    descriptor.items.setValue(this.dictionaryProperties.flags, new PdfNumber(this.getDescriptorFlags()));\n    descriptor.items.setValue(this.dictionaryProperties.fontBBox, PdfArray.fromRectangle(this.getBoundBox()));\n    descriptor.items.setValue(this.dictionaryProperties.missingWidth, new PdfNumber(metrics.widthTable[32]));\n    descriptor.items.setValue(this.dictionaryProperties.stemV, new PdfNumber(metrics.stemV));\n    descriptor.items.setValue(this.dictionaryProperties.italicAngle, new PdfNumber(metrics.italicAngle));\n    descriptor.items.setValue(this.dictionaryProperties.capHeight, new PdfNumber(metrics.capHeight));\n    descriptor.items.setValue(this.dictionaryProperties.ascent, new PdfNumber(metrics.winAscent));\n    descriptor.items.setValue(this.dictionaryProperties.descent, new PdfNumber(metrics.winDescent));\n    descriptor.items.setValue(this.dictionaryProperties.leading, new PdfNumber(metrics.leading));\n    descriptor.items.setValue(this.dictionaryProperties.avgWidth, new PdfNumber(metrics.widthTable[32]));\n    descriptor.items.setValue(this.dictionaryProperties.fontFile2, new PdfReferenceHolder(this.fontProgram));\n    descriptor.items.setValue(this.dictionaryProperties.maxWidth, new PdfNumber(metrics.widthTable[32]));\n    descriptor.items.setValue(this.dictionaryProperties.xHeight, new PdfNumber(0));\n    descriptor.items.setValue(this.dictionaryProperties.stemH, new PdfNumber(0));\n    return descriptor;\n  };\n  /**\n   * Generates cmap.\n   * @private\n   */\n\n\n  UnicodeTrueTypeFont.prototype.createCmap = function () {\n    this.cmap.cmapBeginSave = new SaveCmapEventHandler(this);\n  };\n  /**\n   * Generates font dictionary.\n   */\n\n\n  UnicodeTrueTypeFont.prototype.createFontDictionary = function () {\n    // Set property used to clone Font every time\n    this.fontDictionary.isFont = true;\n    this.fontDictionary.fontDictionaryBeginSave = new SaveFontDictionaryEventHandler(this);\n    this.fontDictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font));\n    this.fontDictionary.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.subsetName));\n    this.fontDictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.type0));\n    this.fontDictionary.items.setValue(this.dictionaryProperties.encoding, new PdfName(this.dictionaryProperties.identityH));\n    var descFonts = new PdfArray();\n    var reference = new PdfReferenceHolder(this.descendantFont); // Set property used to clone Font every time\n\n    descFonts.isFont = true;\n    descFonts.add(reference);\n    this.fontDictionary.items.setValue(this.dictionaryProperties.descendantFonts, descFonts);\n  };\n  /**\n   * Creates font program.\n   */\n\n\n  UnicodeTrueTypeFont.prototype.createFontProgram = function () {\n    this.fontProgram.fontProgramBeginSave = new SaveFontProgramEventHandler(this);\n  };\n  /**\n   * Creates system info dictionary for CID font.\n   * @private\n   */\n\n\n  UnicodeTrueTypeFont.prototype.createSystemInfo = function () {\n    var systemInfo = new PdfDictionary();\n    systemInfo.items.setValue(this.dictionaryProperties.registry, new PdfString('Adobe'));\n    systemInfo.items.setValue(this.dictionaryProperties.ordering, new PdfString(this.dictionaryProperties.identity));\n    systemInfo.items.setValue(this.dictionaryProperties.supplement, new PdfNumber(0));\n    return systemInfo;\n  };\n  /**\n   * Runs before font Dictionary will be saved.\n   */\n\n\n  UnicodeTrueTypeFont.prototype.descendantFontBeginSave = function () {\n    if (this.usedChars !== null && this.usedChars !== undefined && this.usedChars.size() > 0) {\n      var width = this.getDescendantWidth();\n\n      if (width !== null) {\n        this.descendantFont.items.setValue(this.dictionaryProperties.w, width);\n      }\n    }\n  };\n  /**\n   * Runs before font Dictionary will be saved.\n   */\n\n\n  UnicodeTrueTypeFont.prototype.cmapBeginSave = function () {\n    this.generateCmap();\n  };\n  /**\n   * Runs before font Dictionary will be saved.\n   */\n\n  /* tslint:disable */\n\n\n  UnicodeTrueTypeFont.prototype.fontDictionaryBeginSave = function () {\n    if (this.usedChars !== null && this.usedChars !== undefined && this.usedChars.size() > 0 && !this.fontDictionary.containsKey(this.dictionaryProperties.toUnicode)) {\n      this.fontDictionary.items.setValue(this.dictionaryProperties.toUnicode, new PdfReferenceHolder(this.cmap));\n    }\n  };\n  /* tslint:enable */\n\n  /**\n   * Runs before font program stream save.\n   */\n\n\n  UnicodeTrueTypeFont.prototype.fontProgramBeginSave = function () {\n    this.isCompress = true;\n    this.generateFontProgram();\n  };\n  /**\n   * Gets width description pad array for c i d font.\n   */\n\n\n  UnicodeTrueTypeFont.prototype.getDescendantWidth = function () {\n    var array = new PdfArray();\n\n    if (this.usedChars !== null && this.usedChars !== undefined && this.usedChars.size() > 0) {\n      var glyphInfo = []; // if (!this.isEmbedFont) {\n\n      var keys = this.usedChars.keys();\n\n      for (var i = 0; i < keys.length; i++) {\n        var chLen = keys[i];\n        var glyph = this.ttfReader.getGlyph(chLen);\n\n        if (glyph.empty) {\n          continue;\n        }\n\n        glyphInfo.push(glyph);\n      } // } else {\n      //     glyphInfo = this.ttfReader.getAllGlyphs();\n      // }\n\n\n      glyphInfo.sort(function (a, b) {\n        return a.index - b.index;\n      });\n      var firstGlyphIndex = 0;\n      var lastGlyphIndex = 0;\n      var firstGlyphIndexWasSet = false;\n      var widthDetails = new PdfArray(); // if (!this.isEmbedFont) {\n\n      for (var i = 0; i < glyphInfo.length; i++) {\n        var glyph = glyphInfo[i];\n\n        if (!firstGlyphIndexWasSet) {\n          firstGlyphIndexWasSet = true;\n          firstGlyphIndex = glyph.index;\n          lastGlyphIndex = glyph.index - 1;\n        }\n\n        if ((lastGlyphIndex + 1 !== glyph.index || i + 1 === glyphInfo.length) && glyphInfo.length > 1) {\n          // Add glyph index / width.\n          array.add(new PdfNumber(firstGlyphIndex));\n\n          if (i !== 0) {\n            array.add(widthDetails);\n          }\n\n          firstGlyphIndex = glyph.index;\n          widthDetails = new PdfArray();\n        }\n\n        widthDetails.add(new PdfNumber(glyph.width));\n\n        if (i + 1 === glyphInfo.length) {\n          array.add(new PdfNumber(firstGlyphIndex));\n          array.add(widthDetails);\n        }\n\n        lastGlyphIndex = glyph.index;\n      } // } else {\n      //     for (let i : number = 0; i < glyphInfo.length; i++) {\n      //         let glyph : TtfGlyphInfo = glyphInfo[i];\n      //         if (!firstGlyphIndexWasSet) {\n      //             firstGlyphIndexWasSet = true;\n      //             lastGlyphIndex = glyph.index - 1;\n      //         }\n      //         firstGlyphIndex = glyph.index;\n      //         if ((lastGlyphIndex + 1 === glyph.index || (i + 1 === glyphInfo.length)) && glyphInfo.length > 1) {\n      //             // Add glyph index / width.\n      //             widthDetails.add(new PdfNumber(glyph.width));\n      //             array.add(new PdfNumber(firstGlyphIndex));\n      //             array.add(widthDetails);\n      //             widthDetails = new PdfArray();\n      //         }\n      //         lastGlyphIndex = glyph.index;\n      //     }\n      // }\n\n    }\n\n    return array;\n  };\n  /**\n   * Creates cmap.\n   */\n\n\n  UnicodeTrueTypeFont.prototype.generateCmap = function () {\n    if (this.usedChars !== null && this.usedChars !== undefined && this.usedChars.size() > 0) {\n      var glyphChars = this.ttfReader.getGlyphChars(this.usedChars);\n\n      if (glyphChars.size() > 0) {\n        var keys = glyphChars.keys().sort(); // add first and last glyph indexes\n\n        var first = keys[0];\n        var last = keys[keys.length - 1];\n        var middlePart = this.toHexString(first, false) + this.toHexString(last, false) + Operators.newLine;\n        var builder = '';\n        builder += this.cmapPrefix;\n        builder += middlePart;\n        builder += this.cmapEndCodespaceRange;\n        var nextRange = 0;\n\n        for (var i = 0; i < keys.length; i++) {\n          if (nextRange === 0) {\n            if (i !== 0) {\n              builder += this.cmapEndRange;\n            }\n\n            nextRange = Math.min(100, keys.length - i);\n            builder += nextRange;\n            builder += Operators.whiteSpace;\n            builder += this.cmapBeginRange;\n          }\n\n          nextRange -= 1;\n          var key = keys[i];\n          /* tslint:disable */\n\n          builder += this.toHexString(key, true) + this.toHexString(key, true) + this.toHexString(glyphChars.getValue(key), true) + '\\n';\n          /* tslint:enable */\n        }\n\n        builder += this.cmapSuffix;\n        this.cmap.clearStream();\n        this.cmap.isFont = true;\n        this.cmap.write(builder);\n      }\n    }\n  };\n  /**\n   * Generates font program.\n   */\n\n\n  UnicodeTrueTypeFont.prototype.generateFontProgram = function () {\n    var fontProgram = null;\n    this.usedChars = this.usedChars === null || this.usedChars === undefined ? new Dictionary() : this.usedChars;\n    this.ttfReader.setOffset(0);\n    fontProgram = this.ttfReader.readFontProgram(this.usedChars);\n    this.fontProgram.clearStream();\n    this.fontProgram.isFont = true;\n    this.fontProgram.writeBytes(fontProgram);\n  };\n  /**\n   * Calculates flags for the font descriptor.\n   * @private\n   */\n\n\n  UnicodeTrueTypeFont.prototype.getDescriptorFlags = function () {\n    var flags = 0;\n    var metrics = this.ttfReader.metrics;\n\n    if (metrics.isFixedPitch) {\n      flags |= FontDescriptorFlags.FixedPitch;\n    }\n\n    if (metrics.isSymbol) {\n      flags |= FontDescriptorFlags.Symbolic;\n    } else {\n      flags |= FontDescriptorFlags.Nonsymbolic;\n    }\n\n    if (metrics.isItalic) {\n      flags |= FontDescriptorFlags.Italic;\n    }\n\n    if (metrics.isBold) {\n      flags |= FontDescriptorFlags.ForceBold;\n    }\n\n    return flags;\n  };\n  /**\n   * Calculates BoundBox of the descriptor.\n   * @private\n   */\n\n\n  UnicodeTrueTypeFont.prototype.getBoundBox = function () {\n    var rect = this.ttfReader.metrics.fontBox;\n    var width = Math.abs(rect.right - rect.left);\n    var height = Math.abs(rect.top - rect.bottom);\n    var rectangle = new RectangleF(rect.left, rect.bottom, width, height);\n    return rectangle;\n  };\n  /**\n   * Converts integer of decimal system to hex integer.\n   */\n\n\n  UnicodeTrueTypeFont.prototype.toHexString = function (n, isCaseChange) {\n    var s = n.toString(16);\n\n    if (isCaseChange) {\n      s = s.toUpperCase();\n    }\n\n    return '<0000'.substring(0, 5 - s.length) + s + '>';\n  };\n  /**\n   * Stores used symbols.\n   */\n\n\n  UnicodeTrueTypeFont.prototype.setSymbols = function (text) {\n    if (text === null) {\n      throw new Error('Argument Null Exception : text');\n    }\n\n    if (this.usedChars === null || this.usedChars === undefined) {\n      this.usedChars = new Dictionary();\n    }\n\n    for (var i = 0; i < text.length; i++) {\n      var ch = text[i];\n      this.usedChars.setValue(ch, String.fromCharCode(0));\n    } // else {\n    //     if (text === null) {\n    //         throw new Error('Argument Null Exception : glyphs');\n    //     }\n    //     if (this.usedChars === null || this.usedChars === undefined) {\n    //             this.usedChars = new Dictionary<string, string>();\n    //     }\n    //     for (let i : number = 0; i < text.length; i++) {\n    //         let glyphIndex : number = text[i];\n    //         let glyph : TtfGlyphInfo =  this.ttfReader.getGlyph(glyphIndex);\n    //         if (!glyph == null) {\n    //             let c : string = glyph.charCode.toLocaleString();\n    //             this.usedChars.setValue(c, String.fromCharCode(0));\n    //         }\n    //     }\n    // }\n\n\n    if (this.isEmbedFont === false) {\n      this.getDescendantWidth();\n    }\n  };\n\n  return UnicodeTrueTypeFont;\n}();\n\nexport { UnicodeTrueTypeFont };","map":{"version":3,"names":["ByteArray","TtfReader","PdfDictionary","SaveDescendantFontEventHandler","SaveFontDictionaryEventHandler","SaveFontProgramEventHandler","SaveCmapEventHandler","PdfStream","PdfArray","PdfName","PdfNumber","PdfString","PdfReferenceHolder","PdfFontMetrics","StandardWidthTable","DictionaryProperties","Dictionary","FontDescriptorFlags","RectangleF","Operators","UnicodeTrueTypeFont","base64String","size","nameString","dictionaryProperties","isCompress","isEmbedFont","cmapPrefix","newLine","cmapEndCodespaceRange","cmapBeginRange","cmapEndRange","cmapSuffix","undefined","Error","fontSize","fontString","Initialize","prototype","getCharWidth","charCode","codeWidth","ttfReader","getLineWidth","line","width","i","len","length","ch","charWidth","byteArray","writeFromBase64String","fontData","internalBuffer","ttfMetrics","metrics","createInternals","fontDictionary","fontProgram","cmap","descendantFont","initializeMetrics","subsetName","getFontName","createDescendantFont","createCmap","createFontDictionary","createFontProgram","getInternals","ascent","macAscent","descent","macDescent","height","lineGap","name","fontFamily","postScriptName","widthTable","subScriptSizeFactor","superscriptSizeFactor","isBold","builder","index","Math","floor","random","toString","formatName","fontName","ret","replace","isFont","descendantFontBeginSave","items","setValue","type","font","subtype","cIDFontType2","baseFont","cIDToGIDMap","identity","dw","fontDescriptor","createFontDescriptor","systemInfo","createSystemInfo","cIDSystemInfo","descriptor","flags","getDescriptorFlags","fontBBox","fromRectangle","getBoundBox","missingWidth","stemV","italicAngle","capHeight","winAscent","winDescent","leading","avgWidth","fontFile2","maxWidth","xHeight","stemH","cmapBeginSave","fontDictionaryBeginSave","type0","encoding","identityH","descFonts","reference","add","descendantFonts","fontProgramBeginSave","registry","ordering","supplement","usedChars","getDescendantWidth","w","generateCmap","containsKey","toUnicode","generateFontProgram","array","glyphInfo","keys","chLen","glyph","getGlyph","empty","push","sort","a","b","firstGlyphIndex","lastGlyphIndex","firstGlyphIndexWasSet","widthDetails","glyphChars","getGlyphChars","first","last","middlePart","toHexString","nextRange","min","whiteSpace","key","getValue","clearStream","write","setOffset","readFontProgram","writeBytes","isFixedPitch","FixedPitch","isSymbol","Symbolic","Nonsymbolic","isItalic","Italic","ForceBold","rect","fontBox","abs","right","left","top","bottom","rectangle","n","isCaseChange","s","toUpperCase","substring","setSymbols","text","String","fromCharCode"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/unicode-true-type-font.js"],"sourcesContent":["/**\n * TrueTypeFont.ts class for EJ2-PDF\n */\nimport { ByteArray } from './../../graphics/images/index';\nimport { TtfReader } from './ttf-reader';\nimport { PdfDictionary, SaveDescendantFontEventHandler, SaveFontDictionaryEventHandler } from './../../primitives/pdf-dictionary';\nimport { SaveFontProgramEventHandler, SaveCmapEventHandler } from './../../primitives/pdf-stream';\nimport { PdfStream } from './../../primitives/pdf-stream';\nimport { PdfArray } from './../../primitives/pdf-array';\nimport { PdfName } from './../../primitives/pdf-name';\nimport { PdfNumber } from './../../primitives/pdf-number';\nimport { PdfString } from './../../primitives/pdf-string';\nimport { PdfReferenceHolder } from './../../primitives/pdf-reference';\nimport { PdfFontMetrics } from './pdf-font-metrics';\nimport { StandardWidthTable } from './pdf-font-metrics';\nimport { DictionaryProperties } from './../../input-output/pdf-dictionary-properties';\nimport { Dictionary } from './../../collections/dictionary';\nimport { FontDescriptorFlags } from './enum';\nimport { RectangleF } from './../../drawing/pdf-drawing';\nimport { Operators } from './../../input-output/pdf-operators';\nvar UnicodeTrueTypeFont = /** @class */ (function () {\n    /* tslint:enable */\n    //Constructors\n    /**\n     * Initializes a new instance of the `PdfTrueTypeFont` class.\n     * @private\n     */\n    function UnicodeTrueTypeFont(base64String, size) {\n        // Fields\n        this.nameString = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        /**\n         * Specifies the Internal variable to store fields of `PdfDictionaryProperties`.\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        /**\n         * Indicates whether the font program is compressed or not.\n         * @private\n         */\n        this.isCompress = false;\n        /**\n         * Indicates whether the font is embedded or not.\n         */\n        this.isEmbedFont = false;\n        /**\n         * Cmap table's start prefix.\n         */\n        /* tslint:disable */\n        this.cmapPrefix = '/CIDInit /ProcSet findresource begin\\n12 dict begin\\nbegincmap' + Operators.newLine + '/CIDSystemInfo << /Registry (Adobe)/Ordering (UCS)/Supplement 0>> def\\n/CMapName ' + '/Adobe-Identity-UCS def\\n/CMapType 2 def\\n1 begincodespacerange' + Operators.newLine;\n        /* tslint:enable */\n        /**\n         * Cmap table's start suffix.\n         */\n        this.cmapEndCodespaceRange = 'endcodespacerange' + Operators.newLine;\n        /**\n         * Cmap's begin range marker.\n         */\n        this.cmapBeginRange = 'beginbfrange' + Operators.newLine;\n        /**\n         * Cmap's end range marker.\n         */\n        this.cmapEndRange = 'endbfrange' + Operators.newLine;\n        /**\n         * Cmap table's end\n         */\n        /* tslint:disable */\n        this.cmapSuffix = 'endbfrange\\nendcmap\\nCMapName currentdict ' + '/CMap defineresource pop\\nend end' + Operators.newLine;\n        if (base64String === null || base64String === undefined) {\n            throw new Error('ArgumentNullException:base64String');\n        }\n        this.fontSize = size;\n        this.fontString = base64String;\n        this.Initialize();\n    }\n    //Implementation\n    /**\n     * Returns width of the char symbol.\n     */\n    UnicodeTrueTypeFont.prototype.getCharWidth = function (charCode) {\n        var codeWidth = this.ttfReader.getCharWidth(charCode);\n        return codeWidth;\n    };\n    /**\n     * Returns width of the text line.\n     */\n    UnicodeTrueTypeFont.prototype.getLineWidth = function (line) {\n        // if (line == null) {\n        //     throw new Error('ArgumentNullException : line');\n        // }\n        var width = 0;\n        for (var i = 0, len = line.length; i < len; i++) {\n            var ch = line[i];\n            var charWidth = this.getCharWidth(ch);\n            width += charWidth;\n        }\n        return width;\n    };\n    /**\n     * Initializes a new instance of the `PdfTrueTypeFont` class.\n     * @private\n     */\n    UnicodeTrueTypeFont.prototype.Initialize = function () {\n        var byteArray = new ByteArray(this.fontString.length);\n        byteArray.writeFromBase64String(this.fontString);\n        this.fontData = byteArray.internalBuffer;\n        this.ttfReader = new TtfReader(this.fontData);\n        this.ttfMetrics = this.ttfReader.metrics;\n    };\n    UnicodeTrueTypeFont.prototype.createInternals = function () {\n        this.fontDictionary = new PdfDictionary();\n        this.fontProgram = new PdfStream();\n        this.cmap = new PdfStream();\n        this.descendantFont = new PdfDictionary();\n        this.metrics = new PdfFontMetrics();\n        this.ttfReader.createInternals();\n        this.ttfMetrics = this.ttfReader.metrics;\n        this.initializeMetrics();\n        // Create all the dictionaries of the font.\n        this.subsetName = this.getFontName();\n        this.createDescendantFont();\n        this.createCmap();\n        this.createFontDictionary();\n        this.createFontProgram();\n    };\n    UnicodeTrueTypeFont.prototype.getInternals = function () {\n        return this.fontDictionary;\n    };\n    /**\n     * Initializes metrics.\n     */\n    UnicodeTrueTypeFont.prototype.initializeMetrics = function () {\n        var ttfMetrics = this.ttfReader.metrics;\n        this.metrics.ascent = ttfMetrics.macAscent;\n        this.metrics.descent = ttfMetrics.macDescent;\n        this.metrics.height = ttfMetrics.macAscent - ttfMetrics.macDescent + ttfMetrics.lineGap;\n        this.metrics.name = ttfMetrics.fontFamily;\n        this.metrics.postScriptName = ttfMetrics.postScriptName;\n        this.metrics.size = this.fontSize;\n        this.metrics.widthTable = new StandardWidthTable(ttfMetrics.widthTable);\n        this.metrics.lineGap = ttfMetrics.lineGap;\n        this.metrics.subScriptSizeFactor = ttfMetrics.subScriptSizeFactor;\n        this.metrics.superscriptSizeFactor = ttfMetrics.superscriptSizeFactor;\n        this.metrics.isBold = ttfMetrics.isBold;\n    };\n    /**\n     * Gets random string.\n     */\n    UnicodeTrueTypeFont.prototype.getFontName = function () {\n        var builder = '';\n        var name;\n        // if (this.isEmbed === false) {\n        for (var i = 0; i < 6; i++) {\n            var index = Math.floor(Math.random() * (25 - 0 + 1)) + 0;\n            builder += this.nameString[index];\n        }\n        builder += '+';\n        // }\n        builder += this.ttfReader.metrics.postScriptName;\n        name = builder.toString();\n        // if (name === '') {\n        //     name = this.ttfReader.metrics.fontFamily;\n        // }\n        name = this.formatName(name);\n        return name;\n    };\n    /**\n     * Generates name of the font.\n     */\n    UnicodeTrueTypeFont.prototype.formatName = function (fontName) {\n        // if (fontName === null) {\n        //     throw new Error('ArgumentNullException : fontName');\n        // }\n        // if (fontName === '') {\n        //     throw new Error('ArgumentOutOfRangeException : fontName, Parameter can not be empty');\n        // }\n        var ret = fontName.replace('(', '#28');\n        ret = ret.replace(')', '#29');\n        ret = ret.replace('[', '#5B');\n        ret = ret.replace(']', '#5D');\n        ret = ret.replace('<', '#3C');\n        ret = ret.replace('>', '#3E');\n        ret = ret.replace('{', '#7B');\n        ret = ret.replace('}', '#7D');\n        ret = ret.replace('/', '#2F');\n        ret = ret.replace('%', '#25');\n        return ret.replace(' ', '#20');\n    };\n    /**\n     * Creates descendant font.\n     */\n    UnicodeTrueTypeFont.prototype.createDescendantFont = function () {\n        // Set property used to clone Font every time\n        this.descendantFont.isFont = true;\n        this.descendantFont.descendantFontBeginSave = new SaveDescendantFontEventHandler(this);\n        this.descendantFont.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font));\n        this.descendantFont.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.cIDFontType2));\n        this.descendantFont.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.subsetName));\n        this.descendantFont.items.setValue(this.dictionaryProperties.cIDToGIDMap, new PdfName(this.dictionaryProperties.identity));\n        this.descendantFont.items.setValue(this.dictionaryProperties.dw, new PdfNumber(1000));\n        this.fontDescriptor = this.createFontDescriptor();\n        this.descendantFont.items.setValue(this.dictionaryProperties.fontDescriptor, new PdfReferenceHolder(this.fontDescriptor));\n        var systemInfo = this.createSystemInfo();\n        this.descendantFont.items.setValue(this.dictionaryProperties.cIDSystemInfo, systemInfo);\n    };\n    /**\n     * Creates font descriptor.\n     */\n    UnicodeTrueTypeFont.prototype.createFontDescriptor = function () {\n        var descriptor = new PdfDictionary();\n        var metrics = this.ttfReader.metrics;\n        // Set property used to clone Font every time\n        descriptor.isFont = true;\n        descriptor.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.fontDescriptor));\n        descriptor.items.setValue(this.dictionaryProperties.fontName, new PdfName(this.subsetName));\n        descriptor.items.setValue(this.dictionaryProperties.flags, new PdfNumber(this.getDescriptorFlags()));\n        descriptor.items.setValue(this.dictionaryProperties.fontBBox, PdfArray.fromRectangle(this.getBoundBox()));\n        descriptor.items.setValue(this.dictionaryProperties.missingWidth, new PdfNumber(metrics.widthTable[32]));\n        descriptor.items.setValue(this.dictionaryProperties.stemV, new PdfNumber(metrics.stemV));\n        descriptor.items.setValue(this.dictionaryProperties.italicAngle, new PdfNumber(metrics.italicAngle));\n        descriptor.items.setValue(this.dictionaryProperties.capHeight, new PdfNumber(metrics.capHeight));\n        descriptor.items.setValue(this.dictionaryProperties.ascent, new PdfNumber(metrics.winAscent));\n        descriptor.items.setValue(this.dictionaryProperties.descent, new PdfNumber(metrics.winDescent));\n        descriptor.items.setValue(this.dictionaryProperties.leading, new PdfNumber(metrics.leading));\n        descriptor.items.setValue(this.dictionaryProperties.avgWidth, new PdfNumber(metrics.widthTable[32]));\n        descriptor.items.setValue(this.dictionaryProperties.fontFile2, new PdfReferenceHolder(this.fontProgram));\n        descriptor.items.setValue(this.dictionaryProperties.maxWidth, new PdfNumber(metrics.widthTable[32]));\n        descriptor.items.setValue(this.dictionaryProperties.xHeight, new PdfNumber(0));\n        descriptor.items.setValue(this.dictionaryProperties.stemH, new PdfNumber(0));\n        return descriptor;\n    };\n    /**\n     * Generates cmap.\n     * @private\n     */\n    UnicodeTrueTypeFont.prototype.createCmap = function () {\n        this.cmap.cmapBeginSave = new SaveCmapEventHandler(this);\n    };\n    /**\n     * Generates font dictionary.\n     */\n    UnicodeTrueTypeFont.prototype.createFontDictionary = function () {\n        // Set property used to clone Font every time\n        this.fontDictionary.isFont = true;\n        this.fontDictionary.fontDictionaryBeginSave = new SaveFontDictionaryEventHandler(this);\n        this.fontDictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font));\n        this.fontDictionary.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.subsetName));\n        this.fontDictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.type0));\n        this.fontDictionary.items.setValue(this.dictionaryProperties.encoding, new PdfName(this.dictionaryProperties.identityH));\n        var descFonts = new PdfArray();\n        var reference = new PdfReferenceHolder(this.descendantFont);\n        // Set property used to clone Font every time\n        descFonts.isFont = true;\n        descFonts.add(reference);\n        this.fontDictionary.items.setValue(this.dictionaryProperties.descendantFonts, descFonts);\n    };\n    /**\n     * Creates font program.\n     */\n    UnicodeTrueTypeFont.prototype.createFontProgram = function () {\n        this.fontProgram.fontProgramBeginSave = new SaveFontProgramEventHandler(this);\n    };\n    /**\n     * Creates system info dictionary for CID font.\n     * @private\n     */\n    UnicodeTrueTypeFont.prototype.createSystemInfo = function () {\n        var systemInfo = new PdfDictionary();\n        systemInfo.items.setValue(this.dictionaryProperties.registry, new PdfString('Adobe'));\n        systemInfo.items.setValue(this.dictionaryProperties.ordering, new PdfString(this.dictionaryProperties.identity));\n        systemInfo.items.setValue(this.dictionaryProperties.supplement, new PdfNumber(0));\n        return systemInfo;\n    };\n    /**\n     * Runs before font Dictionary will be saved.\n     */\n    UnicodeTrueTypeFont.prototype.descendantFontBeginSave = function () {\n        if (this.usedChars !== null && this.usedChars !== undefined && this.usedChars.size() > 0) {\n            var width = this.getDescendantWidth();\n            if (width !== null) {\n                this.descendantFont.items.setValue(this.dictionaryProperties.w, width);\n            }\n        }\n    };\n    /**\n     * Runs before font Dictionary will be saved.\n     */\n    UnicodeTrueTypeFont.prototype.cmapBeginSave = function () {\n        this.generateCmap();\n    };\n    /**\n     * Runs before font Dictionary will be saved.\n     */\n    /* tslint:disable */\n    UnicodeTrueTypeFont.prototype.fontDictionaryBeginSave = function () {\n        if (this.usedChars !== null && this.usedChars !== undefined && this.usedChars.size() > 0 && !this.fontDictionary.containsKey(this.dictionaryProperties.toUnicode)) {\n            this.fontDictionary.items.setValue(this.dictionaryProperties.toUnicode, new PdfReferenceHolder(this.cmap));\n        }\n    };\n    /* tslint:enable */\n    /**\n     * Runs before font program stream save.\n     */\n    UnicodeTrueTypeFont.prototype.fontProgramBeginSave = function () {\n        this.isCompress = true;\n        this.generateFontProgram();\n    };\n    /**\n     * Gets width description pad array for c i d font.\n     */\n    UnicodeTrueTypeFont.prototype.getDescendantWidth = function () {\n        var array = new PdfArray();\n        if (this.usedChars !== null && this.usedChars !== undefined && this.usedChars.size() > 0) {\n            var glyphInfo = [];\n            // if (!this.isEmbedFont) {\n            var keys = this.usedChars.keys();\n            for (var i = 0; i < keys.length; i++) {\n                var chLen = keys[i];\n                var glyph = this.ttfReader.getGlyph(chLen);\n                if (glyph.empty) {\n                    continue;\n                }\n                glyphInfo.push(glyph);\n            }\n            // } else {\n            //     glyphInfo = this.ttfReader.getAllGlyphs();\n            // }\n            glyphInfo.sort(function (a, b) { return a.index - b.index; });\n            var firstGlyphIndex = 0;\n            var lastGlyphIndex = 0;\n            var firstGlyphIndexWasSet = false;\n            var widthDetails = new PdfArray();\n            // if (!this.isEmbedFont) {\n            for (var i = 0; i < glyphInfo.length; i++) {\n                var glyph = glyphInfo[i];\n                if (!firstGlyphIndexWasSet) {\n                    firstGlyphIndexWasSet = true;\n                    firstGlyphIndex = glyph.index;\n                    lastGlyphIndex = glyph.index - 1;\n                }\n                if ((lastGlyphIndex + 1 !== glyph.index || (i + 1 === glyphInfo.length)) && glyphInfo.length > 1) {\n                    // Add glyph index / width.\n                    array.add(new PdfNumber(firstGlyphIndex));\n                    if (i !== 0) {\n                        array.add(widthDetails);\n                    }\n                    firstGlyphIndex = glyph.index;\n                    widthDetails = new PdfArray();\n                }\n                widthDetails.add(new PdfNumber(glyph.width));\n                if (i + 1 === glyphInfo.length) {\n                    array.add(new PdfNumber(firstGlyphIndex));\n                    array.add(widthDetails);\n                }\n                lastGlyphIndex = glyph.index;\n            }\n            // } else {\n            //     for (let i : number = 0; i < glyphInfo.length; i++) {\n            //         let glyph : TtfGlyphInfo = glyphInfo[i];\n            //         if (!firstGlyphIndexWasSet) {\n            //             firstGlyphIndexWasSet = true;\n            //             lastGlyphIndex = glyph.index - 1;\n            //         }\n            //         firstGlyphIndex = glyph.index;\n            //         if ((lastGlyphIndex + 1 === glyph.index || (i + 1 === glyphInfo.length)) && glyphInfo.length > 1) {\n            //             // Add glyph index / width.\n            //             widthDetails.add(new PdfNumber(glyph.width));\n            //             array.add(new PdfNumber(firstGlyphIndex));\n            //             array.add(widthDetails);\n            //             widthDetails = new PdfArray();\n            //         }\n            //         lastGlyphIndex = glyph.index;\n            //     }\n            // }\n        }\n        return array;\n    };\n    /**\n     * Creates cmap.\n     */\n    UnicodeTrueTypeFont.prototype.generateCmap = function () {\n        if (this.usedChars !== null && this.usedChars !== undefined && this.usedChars.size() > 0) {\n            var glyphChars = this.ttfReader.getGlyphChars(this.usedChars);\n            if (glyphChars.size() > 0) {\n                var keys = glyphChars.keys().sort();\n                // add first and last glyph indexes\n                var first = keys[0];\n                var last = keys[keys.length - 1];\n                var middlePart = this.toHexString(first, false) + this.toHexString(last, false) + Operators.newLine;\n                var builder = '';\n                builder += this.cmapPrefix;\n                builder += middlePart;\n                builder += this.cmapEndCodespaceRange;\n                var nextRange = 0;\n                for (var i = 0; i < keys.length; i++) {\n                    if (nextRange === 0) {\n                        if (i !== 0) {\n                            builder += this.cmapEndRange;\n                        }\n                        nextRange = Math.min(100, keys.length - i);\n                        builder += nextRange;\n                        builder += Operators.whiteSpace;\n                        builder += this.cmapBeginRange;\n                    }\n                    nextRange -= 1;\n                    var key = keys[i];\n                    /* tslint:disable */\n                    builder += this.toHexString(key, true) + this.toHexString(key, true) + this.toHexString(glyphChars.getValue(key), true) + '\\n';\n                    /* tslint:enable */\n                }\n                builder += this.cmapSuffix;\n                this.cmap.clearStream();\n                this.cmap.isFont = true;\n                this.cmap.write(builder);\n            }\n        }\n    };\n    /**\n     * Generates font program.\n     */\n    UnicodeTrueTypeFont.prototype.generateFontProgram = function () {\n        var fontProgram = null;\n        this.usedChars = (this.usedChars === null || this.usedChars === undefined) ? new Dictionary() : this.usedChars;\n        this.ttfReader.setOffset(0);\n        fontProgram = this.ttfReader.readFontProgram(this.usedChars);\n        this.fontProgram.clearStream();\n        this.fontProgram.isFont = true;\n        this.fontProgram.writeBytes(fontProgram);\n    };\n    /**\n     * Calculates flags for the font descriptor.\n     * @private\n     */\n    UnicodeTrueTypeFont.prototype.getDescriptorFlags = function () {\n        var flags = 0;\n        var metrics = this.ttfReader.metrics;\n        if (metrics.isFixedPitch) {\n            flags |= FontDescriptorFlags.FixedPitch;\n        }\n        if (metrics.isSymbol) {\n            flags |= FontDescriptorFlags.Symbolic;\n        }\n        else {\n            flags |= FontDescriptorFlags.Nonsymbolic;\n        }\n        if (metrics.isItalic) {\n            flags |= FontDescriptorFlags.Italic;\n        }\n        if (metrics.isBold) {\n            flags |= FontDescriptorFlags.ForceBold;\n        }\n        return flags;\n    };\n    /**\n     * Calculates BoundBox of the descriptor.\n     * @private\n     */\n    UnicodeTrueTypeFont.prototype.getBoundBox = function () {\n        var rect = this.ttfReader.metrics.fontBox;\n        var width = Math.abs(rect.right - rect.left);\n        var height = Math.abs(rect.top - rect.bottom);\n        var rectangle = new RectangleF(rect.left, rect.bottom, width, height);\n        return rectangle;\n    };\n    /**\n     * Converts integer of decimal system to hex integer.\n     */\n    UnicodeTrueTypeFont.prototype.toHexString = function (n, isCaseChange) {\n        var s = n.toString(16);\n        if (isCaseChange) {\n            s = s.toUpperCase();\n        }\n        return '<0000'.substring(0, 5 - s.length) + s + '>';\n    };\n    /**\n     * Stores used symbols.\n     */\n    UnicodeTrueTypeFont.prototype.setSymbols = function (text) {\n        if (text === null) {\n            throw new Error('Argument Null Exception : text');\n        }\n        if (this.usedChars === null || this.usedChars === undefined) {\n            this.usedChars = new Dictionary();\n        }\n        for (var i = 0; i < text.length; i++) {\n            var ch = text[i];\n            this.usedChars.setValue(ch, String.fromCharCode(0));\n        }\n        // else {\n        //     if (text === null) {\n        //         throw new Error('Argument Null Exception : glyphs');\n        //     }\n        //     if (this.usedChars === null || this.usedChars === undefined) {\n        //             this.usedChars = new Dictionary<string, string>();\n        //     }\n        //     for (let i : number = 0; i < text.length; i++) {\n        //         let glyphIndex : number = text[i];\n        //         let glyph : TtfGlyphInfo =  this.ttfReader.getGlyph(glyphIndex);\n        //         if (!glyph == null) {\n        //             let c : string = glyph.charCode.toLocaleString();\n        //             this.usedChars.setValue(c, String.fromCharCode(0));\n        //         }\n        //     }\n        // }\n        if (this.isEmbedFont === false) {\n            this.getDescendantWidth();\n        }\n    };\n    return UnicodeTrueTypeFont;\n}());\nexport { UnicodeTrueTypeFont };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}