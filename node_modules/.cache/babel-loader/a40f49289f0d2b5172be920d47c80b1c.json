{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * PdfGrid.ts class for EJ2-PDF\n */\n\n\nimport { PdfGridColumnCollection } from './pdf-grid-column';\nimport { PdfGridRowCollection, PdfGridHeaderCollection } from './pdf-grid-row';\nimport { RectangleF, SizeF, PointF } from './../../drawing/pdf-drawing';\nimport { PdfLayoutElement } from './../../graphics/figures/layout-element';\nimport { PdfLayoutFormat } from './../../graphics/figures/base/element-layouter';\nimport { PdfGridStyle } from './styles/style';\nimport { PdfBorders } from './styles/pdf-borders';\nimport { PdfGridLayouter } from './../../structured-elements/grid/layout/grid-layouter';\n\nvar PdfGrid =\n/** @class */\nfunction (_super) {\n  __extends(PdfGrid, _super); //constructor\n\n  /**\n   * Initialize a new instance for `PdfGrid` class.\n   * @private\n   */\n\n\n  function PdfGrid() {\n    var _this = _super.call(this) || this;\n    /**\n     * @hidden\n     * @private\n     */\n\n\n    _this.gridSize = new SizeF(0, 0);\n    /**\n     * Check the child grid is ' split or not'\n     */\n\n    _this.isGridSplit = false;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.isRearranged = false;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.pageBounds = new RectangleF();\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.listOfNavigatePages = [];\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.parentCellIndex = 0;\n    _this.tempWidth = 0;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.breakRow = true;\n    _this.splitChildRowIndex = -1;\n    /**\n     * The event raised on `begin cell lay outing`.\n     * @event\n     * @private\n     */\n    //public beginPageLayout : Function;\n\n    /**\n     * The event raised on `end cell lay outing`.\n     * @event\n     * @private\n     */\n    //public endPageLayout : Function;\n\n    _this.hasRowSpanSpan = false;\n    _this.hasColumnSpan = false;\n    _this.isSingleGrid = true;\n    return _this;\n  }\n\n  Object.defineProperty(PdfGrid.prototype, \"raiseBeginCellDraw\", {\n    //Properties\n\n    /**\n     * Gets a value indicating whether the `start cell layout event` should be raised.\n     * @private\n     */\n    get: function () {\n      return typeof this.beginCellDraw !== 'undefined' && typeof this.beginCellDraw !== null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"raiseEndCellDraw\", {\n    /**\n     * Gets a value indicating whether the `end cell layout event` should be raised.\n     * @private\n     */\n    get: function () {\n      return typeof this.endCellDraw !== 'undefined' && typeof this.endCellDraw !== null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"repeatHeader\", {\n    /**\n     * Gets or sets a value indicating whether to `repeat header`.\n     * @private\n     */\n    get: function () {\n      if (this.bRepeatHeader == null || typeof this.bRepeatHeader === 'undefined') {\n        this.bRepeatHeader = false;\n      }\n\n      return this.bRepeatHeader;\n    },\n    set: function (value) {\n      this.bRepeatHeader = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"allowRowBreakAcrossPages\", {\n    /**\n     * Gets or sets a value indicating whether to split or cut rows that `overflow a page`.\n     * @private\n     */\n    get: function () {\n      return this.breakRow;\n    },\n    set: function (value) {\n      this.breakRow = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"columns\", {\n    /**\n     * Gets the `column` collection of the PdfGrid.[Read-Only]\n     * @private\n     */\n    get: function () {\n      if (this.gridColumns == null || typeof this.gridColumns === 'undefined') {\n        this.gridColumns = new PdfGridColumnCollection(this);\n      }\n\n      return this.gridColumns;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"rows\", {\n    /**\n     * Gets the `row` collection from the PdfGrid.[Read-Only]\n     * @private\n     */\n    get: function () {\n      if (this.gridRows == null) {\n        this.gridRows = new PdfGridRowCollection(this);\n      }\n\n      return this.gridRows;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"headers\", {\n    /**\n     * Gets the `headers` collection from the PdfGrid.[Read-Only]\n     * @private\n     */\n    get: function () {\n      if (this.gridHeaders == null || typeof this.gridHeaders === 'undefined') {\n        this.gridHeaders = new PdfGridHeaderCollection(this);\n      }\n\n      return this.gridHeaders;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"initialWidth\", {\n    /**\n     * Indicating `initial width` of the page.\n     * @private\n     */\n    get: function () {\n      return this.gridInitialWidth;\n    },\n    set: function (value) {\n      this.gridInitialWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"style\", {\n    /**\n     * Gets or sets the `grid style`.\n     * @private\n     */\n    get: function () {\n      if (this.gridStyle == null) {\n        this.gridStyle = new PdfGridStyle();\n      }\n\n      return this.gridStyle;\n    },\n    set: function (value) {\n      if (this.gridStyle == null) {\n        this.gridStyle = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"isPageWidth\", {\n    /**\n     * Gets a value indicating whether the grid column width is considered to be `page width`.\n     * @private\n     */\n    get: function () {\n      return this.ispageWidth;\n    },\n    set: function (value) {\n      this.ispageWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"isChildGrid\", {\n    /**\n     * Gets or set if grid `is nested grid`.\n     * @private\n     */\n    get: function () {\n      return this.ischildGrid;\n    },\n    set: function (value) {\n      this.ischildGrid = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"size\", {\n    /**\n     * Gets or set if grid ' is split or not'\n     * @public\n     */\n    // public get isGridSplit() : boolean {\n    //     return this.isgridSplit;\n    // }\n    // public set isGridSplit(value : boolean) {\n    //     this.isgridSplit = value;\n    // }public get isGridSplit() : boolean {\n    //     return this.isgridSplit;\n    // }\n    // public set isGridSplit(value : boolean) {\n    //     this.isgridSplit = value;\n    // }\n\n    /**\n     * Gets the `size`.\n     * @private\n     */\n    get: function () {\n      if ((this.gridSize.width === 0 || typeof this.gridSize.width === 'undefined') && this.gridSize.height === 0) {\n        this.gridSize = this.measure();\n      }\n\n      return this.gridSize; // } else {\n      //     return this.gridSize;\n      // }\n    },\n    set: function (value) {\n      this.gridSize = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"ParentCell\", {\n    get: function () {\n      return this.parentCell;\n    },\n    set: function (value) {\n      this.parentCell = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"LayoutFormat\", {\n    get: function () {\n      return this.layoutFormat;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfGrid.prototype.draw = function (arg1, arg2, arg3, arg4) {\n    if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && typeof arg3 === 'undefined') {\n      return this.drawHelper(arg1, arg2.x, arg2.y);\n    } else if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {\n      return this.drawHelper(arg1, arg2, arg3, null);\n    } else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'undefined') {\n      return this.drawHelper(arg1, arg2, null);\n    } else if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && arg3 instanceof PdfLayoutFormat) {\n      return this.drawHelper(arg1, arg2.x, arg2.y, arg3);\n    } else if (typeof arg2 === 'number' && typeof arg3 === 'number' && (arg4 instanceof PdfLayoutFormat || arg4 == null)) {\n      var width = arg1.graphics.clientSize.width - arg2;\n      var layoutRectangle = new RectangleF(arg2, arg3, width, 0);\n      return this.drawHelper(arg1, layoutRectangle, arg4);\n    } else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'boolean') {\n      return this.drawHelper(arg1, arg2, null);\n    } else {\n      return this.drawHelper(arg1, arg2, arg3);\n    }\n  };\n  /**\n   * `measures` this instance.\n   * @private\n   */\n\n\n  PdfGrid.prototype.measure = function () {\n    var height = 0;\n    var width = this.columns.width;\n\n    for (var i = 0; i < this.headers.count; i++) {\n      var row = this.headers.getHeader(i);\n      height += row.height;\n    }\n\n    for (var i = 0; i < this.rows.count; i++) {\n      var row = this.rows.getRow(i);\n      height += row.height;\n    }\n\n    return new SizeF(width, height);\n  };\n\n  PdfGrid.prototype.onBeginCellDraw = function (args) {\n    if (this.raiseBeginCellDraw) {\n      this.beginCellDraw(this, args);\n    }\n  };\n\n  PdfGrid.prototype.onEndCellDraw = function (args) {\n    if (this.raiseEndCellDraw) {\n      this.endCellDraw(this, args);\n    }\n  };\n  /**\n   * `Layouts` the specified graphics.\n   * @private\n   */\n\n\n  PdfGrid.prototype.layout = function (param) {\n    if (this.rows.count !== 0) {\n      var currentRow = this.rows.getRow(0).cells.getCell(0).style;\n\n      if (currentRow.borders != null && (currentRow.borders.left != null && currentRow.borders.left.width !== 1 || currentRow.borders.top != null && currentRow.borders.top.width !== 1)) {\n        var x = currentRow.borders.left.width / 2;\n        var y = currentRow.borders.top.width / 2;\n\n        if (param.bounds.x === PdfBorders.default.right.width / 2 && param.bounds.y === PdfBorders.default.right.width / 2) {\n          var newBound = new RectangleF(x, y, this.gridSize.width, this.gridSize.height);\n          param.bounds = newBound;\n        }\n      }\n    }\n\n    this.setSpan();\n    this.checkSpan();\n    this.layoutFormat = param.format;\n    this.gridLocation = param.bounds;\n    var layouter = new PdfGridLayouter(this);\n    var result = layouter.Layouter(param);\n    return result;\n  };\n\n  PdfGrid.prototype.setSpan = function () {\n    var colSpan = 1;\n    var rowSpan = 1;\n    var currentCellIndex = 0;\n    var currentRowIndex = 0;\n    var maxSpan = 0;\n    var rowCount = this.headers.count;\n\n    for (var i = 0; i < rowCount; i++) {\n      var row = this.headers.getHeader(i);\n      maxSpan = 0;\n      var colCount = row.cells.count;\n\n      for (var j = 0; j < colCount; j++) {\n        var cell = row.cells.getCell(j);\n        maxSpan = Math.max(maxSpan, cell.rowSpan); //Skip setting span map for already coverted rows/columns.\n\n        if (!cell.isCellMergeContinue && !cell.isRowMergeContinue && (cell.columnSpan > 1 || cell.rowSpan > 1)) {\n          if (cell.columnSpan + j > row.cells.count) {\n            throw new Error('Invalid span specified at row ' + j.toString() + ' column ' + i.toString());\n          }\n\n          if (cell.rowSpan + i > this.headers.count) {\n            throw new Error('Invalid span specified at Header ' + j.toString() + ' column ' + i.toString());\n          } // if (this.rows.count !== 0 && cell.rowSpan + i > this.rows.count) {\n          //     throw new Error('Invalid span specified at row ' + j.toString() + ' column ' + i.toString());\n          // }\n\n\n          if (cell.columnSpan > 1 && cell.rowSpan > 1) {\n            colSpan = cell.columnSpan;\n            rowSpan = cell.rowSpan;\n            currentCellIndex = j;\n            currentRowIndex = i;\n            cell.isCellMergeStart = true;\n            cell.isRowMergeStart = true; //Set Column merges for first row\n\n            while (colSpan > 1) {\n              currentCellIndex++;\n              row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n              row.cells.getCell(currentCellIndex).isRowMergeContinue = true;\n              row.cells.getCell(currentCellIndex).rowSpan = rowSpan;\n              colSpan--;\n            }\n\n            currentCellIndex = j;\n            colSpan = cell.columnSpan; //Set Row Merges and column merges foreach subsequent rows.\n\n            while (rowSpan > 1) {\n              currentRowIndex++;\n              this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n              this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n              rowSpan--;\n\n              while (colSpan > 1) {\n                currentCellIndex++;\n                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                colSpan--;\n              }\n\n              colSpan = cell.columnSpan;\n              currentCellIndex = j;\n            }\n          } else if (cell.columnSpan > 1 && cell.rowSpan === 1) {\n            colSpan = cell.columnSpan;\n            currentCellIndex = j;\n            cell.isCellMergeStart = true; //Set Column merges.\n\n            while (colSpan > 1) {\n              currentCellIndex++;\n              row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n              colSpan--;\n            }\n          } else if (cell.columnSpan === 1 && cell.rowSpan > 1) {\n            rowSpan = cell.rowSpan;\n            currentRowIndex = i; //Set row Merges.\n\n            while (rowSpan > 1) {\n              currentRowIndex++;\n              this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n              rowSpan--;\n            }\n          }\n        }\n      }\n\n      row.maximumRowSpan = maxSpan;\n    }\n  };\n\n  PdfGrid.prototype.checkSpan = function () {\n    var cellcolSpan;\n    var cellrowSpan = 1;\n    var cellmaxSpan = 0;\n    var currentCellIndex;\n    var currentRowIndex = 0;\n    cellcolSpan = cellrowSpan = 1;\n    currentCellIndex = currentRowIndex = 0;\n\n    if (this.hasRowSpanSpan || this.hasColumnSpan) {\n      var rowCount = this.rows.count;\n\n      for (var i = 0; i < rowCount; i++) {\n        var row = this.rows.getRow(i);\n        cellmaxSpan = 0;\n        var colCount = row.cells.count;\n\n        for (var j = 0; j < colCount; j++) {\n          var cell = row.cells.getCell(j);\n          cellmaxSpan = Math.max(cellmaxSpan, cell.rowSpan); //Skip setting span map for already coverted rows/columns.\n\n          if (!cell.isCellMergeContinue && !cell.isRowMergeContinue && (cell.columnSpan > 1 || cell.rowSpan > 1)) {\n            if (cell.columnSpan + j > row.cells.count) {\n              throw new Error('Invalid span specified at row  ' + j.toString() + ' column ' + i.toString());\n            }\n\n            if (cell.rowSpan + i > this.rows.count) {\n              throw new Error('Invalid span specified at row  ' + j.toString() + ' column ' + i.toString());\n            }\n\n            if (cell.columnSpan > 1 && cell.rowSpan > 1) {\n              cellcolSpan = cell.columnSpan;\n              cellrowSpan = cell.rowSpan;\n              currentCellIndex = j;\n              currentRowIndex = i;\n              cell.isCellMergeStart = true;\n              cell.isRowMergeStart = true; //Set Column merges for first row\n\n              while (cellcolSpan > 1) {\n                currentCellIndex++;\n                row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                row.cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                cellcolSpan--;\n              }\n\n              currentCellIndex = j;\n              cellcolSpan = cell.columnSpan; //Set Row Merges and column merges foreach subsequent rows.\n\n              while (cellrowSpan > 1) {\n                currentRowIndex++;\n                this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                cellrowSpan--;\n\n                while (cellcolSpan > 1) {\n                  currentCellIndex++;\n                  this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                  this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                  cellcolSpan--;\n                }\n\n                cellcolSpan = cell.columnSpan;\n                currentCellIndex = j;\n              }\n            } else if (cell.columnSpan > 1 && cell.rowSpan === 1) {\n              cellcolSpan = cell.columnSpan;\n              currentCellIndex = j;\n              cell.isCellMergeStart = true; //Set Column merges.\n\n              while (cellcolSpan > 1) {\n                currentCellIndex++;\n                row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                cellcolSpan--;\n              }\n            } else if (cell.columnSpan === 1 && cell.rowSpan > 1) {\n              cellrowSpan = cell.rowSpan;\n              currentRowIndex = i; //Set row Merges.\n\n              while (cellrowSpan > 1) {\n                currentRowIndex++;\n                this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                cellrowSpan--;\n              }\n            }\n          }\n        }\n\n        row.maximumRowSpan = cellmaxSpan;\n      }\n    }\n  };\n\n  PdfGrid.prototype.measureColumnsWidth = function (bounds) {\n    if (typeof bounds !== 'undefined') {\n      this.isPageWidth = false;\n      var widths = this.columns.getDefaultWidths(bounds.width - bounds.x); //let tempWidth : number = this.columns.getColumn(0).width;\n\n      for (var i = 0, count = this.columns.count; i < count; i++) {\n        // if (this.columns.getColumn(i).width < 0)\n        //     this.columns.getColumn(i).columnWidth = widths[i];\n        // else if (this.columns.getColumn(i).width > 0 && !this.columns.getColumn(i).isCustomWidth && widths[i]>0 && this.isComplete)\n        this.columns.getColumn(i).columnWidth = widths[i];\n        this.tempWidth = widths[i];\n      }\n\n      if (this.ParentCell != null && this.style.allowHorizontalOverflow == false && this.ParentCell.row.grid.style.allowHorizontalOverflow == false) {\n        var padding = 0;\n        var columnWidth = 0;\n        var columnCount = this.columns.count;\n        var childGridColumnWidth = 0;\n\n        if (this.ParentCell.style.cellPadding != null || typeof this.ParentCell.style.cellPadding !== 'undefined') {\n          if (typeof this.ParentCell.style.cellPadding.left != 'undefined' && this.ParentCell.style.cellPadding.hasLeftPad) {\n            padding += this.ParentCell.style.cellPadding.left;\n          }\n\n          if (typeof this.ParentCell.style.cellPadding.right != 'undefined' && this.ParentCell.style.cellPadding.hasRightPad) {\n            padding += this.ParentCell.style.cellPadding.right;\n          }\n        }\n\n        for (var i = 0; i < this.ParentCell.columnSpan; i++) {\n          columnWidth += this.ParentCell.row.grid.columns.getColumn(this.parentCellIndex + i).width;\n        }\n\n        for (var j = 0; j < this.columns.count; j++) {\n          if (this.gridColumns.getColumn(j).width > 0 && this.gridColumns.getColumn(j).isCustomWidth) {\n            columnWidth -= this.gridColumns.getColumn(j).width;\n            columnCount--;\n          }\n        }\n\n        if (this.ParentCell.row.grid.style.cellPadding != null || typeof this.ParentCell.row.grid.style.cellPadding != 'undefined') {\n          if (typeof this.ParentCell.row.grid.style.cellPadding.top != 'undefined' && this.ParentCell.row.grid.style.cellPadding.hasTopPad) {\n            padding += this.ParentCell.row.grid.style.cellPadding.top;\n          }\n\n          if (typeof this.ParentCell.row.grid.style.cellPadding.bottom != 'undefined' && this.ParentCell.row.grid.style.cellPadding.hasBottomPad) {\n            padding += this.ParentCell.row.grid.style.cellPadding.bottom;\n          }\n        }\n\n        if (this.ParentCell.row.grid.style.cellSpacing != 0) {\n          columnWidth -= this.ParentCell.row.grid.style.cellSpacing * 2;\n        }\n\n        if (columnWidth > padding) {\n          childGridColumnWidth = (columnWidth - padding) / columnCount;\n          this.tempWidth = childGridColumnWidth;\n\n          if (this.ParentCell != null) {\n            for (var j = 0; j < this.columns.count; j++) {\n              if (!this.columns.getColumn(j).isCustomWidth) this.columns.getColumn(j).columnWidth = childGridColumnWidth;\n            }\n          }\n        }\n      } // if (this.ParentCell != null && this.ParentCell.row.width > 0)\n      // {\n      //     if (this.isChildGrid && this.gridSize.width > this.ParentCell.row.width)\n      //     {\n      //         widths = this.columns.getDefaultWidths(bounds.width);\n      //         for (let i : number = 0; i < this.columns.count; i++)\n      //         {\n      //             this.columns.getColumn(i).width = widths[i];\n      //         }\n      //     }\n      // }\n\n    } else {\n      var widths = [this.columns.count];\n\n      for (var n = 0; n < this.columns.count; n++) {\n        widths[n] = 0;\n      }\n\n      var cellWidth = 0;\n      var cellWidths = 0;\n\n      if (typeof this.isChildGrid === 'undefined' && typeof this.gridLocation !== 'undefined' || this.isChildGrid === null && typeof this.gridLocation !== 'undefined') {\n        this.initialWidth = this.gridLocation.width;\n      }\n\n      if (this.headers.count > 0) {\n        var colCount_1 = this.headers.getHeader(0).cells.count;\n        var rowCount = this.headers.count;\n\n        for (var i = 0; i < colCount_1; i++) {\n          cellWidth = 0;\n\n          for (var j = 0; j < rowCount; j++) {\n            var rowWidth = Math.min(this.initialWidth, this.headers.getHeader(j).cells.getCell(i).width);\n            cellWidth = Math.max(cellWidth, rowWidth);\n          }\n\n          widths[i] = cellWidth;\n        }\n      } // else {\n      //     let colCount : number = this.rows.getRow(0).cells.count;\n      //     let rowCount : number = this.rows.count;\n      //     for (let i : number = 0; i < colCount; i++) {\n      //         cellWidth = 0;\n      //         for (let j : number = 0; j < rowCount; j++) {\n      //             let rowWidth : number = Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width);\n      //             cellWidth = Math.max(cellWidth, rowWidth);\n      //         }\n      //         widths[i] = cellWidth;\n      //     }\n      // }\n\n\n      cellWidth = 0;\n\n      for (var i = 0, colCount_2 = this.columns.count; i < colCount_2; i++) {\n        for (var j = 0, rowCount = this.rows.count; j < rowCount; j++) {\n          if (this.rows.getRow(j).cells.getCell(i).columnSpan == 1 && !this.rows.getRow(j).cells.getCell(i).isCellMergeContinue || this.rows.getRow(j).cells.getCell(i).value != null) {\n            if (this.rows.getRow(j).cells.getCell(i).value != null && !this.rows.getRow(j).grid.style.allowHorizontalOverflow) {\n              var value = this.rows.getRow(j).grid.style.cellPadding.right + this.rows.getRow(j).grid.style.cellPadding.left + this.rows.getRow(j).cells.getCell(i).style.borders.left.width / 2; //  if (this.initialWidth != 0 )\n              //         (this.rows.getRow(j).cells.getCell(i).value as PdfGrid).initialWidth = this.initialWidth - value;\n            }\n\n            var rowWidth = 0;\n            rowWidth = this.initialWidth > 0.0 ? Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width) : this.rows.getRow(j).cells.getCell(i).width; // let internalWidth : number = this.rows.getRow(j).cells.getCell(i).width;\n            // internalWidth += this.rows.getRow(j).cells.getCell(i).style.borders.left.width;\n            // internalWidth += this.rows.getRow(j).cells.getCell(i).style.borders.right.width;\n            // let internalHeight : number = this.rows.getRow(j).cells.getCell(i).height;\n            // internalHeight += (this.rows.getRow(j).cells.getCell(i).style.borders.top.width);\n            // internalHeight += (this.rows.getRow(j).cells.getCell(i).style.borders.bottom.width);\n            // let isCorrectWidth : boolean = (internalWidth + this.gridLocation.x) > this.currentGraphics.clientSize.width;\n            // let isCorrectHeight : boolean = (internalHeight + this.gridLocation.y) > this.currentGraphics.clientSize.height;\n            // if (isCorrectWidth || isCorrectHeight) {\n            //     throw Error('Image size exceeds client size of the page. Can not insert this image');\n            // }\n            // rowWidth = Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width);\n\n            cellWidth = Math.max(widths[i], Math.max(cellWidth, rowWidth));\n            cellWidth = Math.max(this.columns.getColumn(i).width, cellWidth);\n          }\n        }\n\n        if (this.rows.count != 0) widths[i] = cellWidth;\n        cellWidth = 0;\n      }\n\n      for (var i = 0, RowCount = this.rows.count; i < RowCount; i++) {\n        for (var j = 0, ColCount = this.columns.count; j < ColCount; j++) {\n          if (this.rows.getRow(i).cells.getCell(j).columnSpan > 1) {\n            var total = widths[j];\n\n            for (var k = 1; k < this.rows.getRow(i).cells.getCell(j).columnSpan; k++) {\n              total += widths[j + k];\n            } // if (this.rows.getRow(i).cells.getCell(j).width > total)\n            // {\n            //     let extendedWidth : number = this.rows.getRow(i).cells.getCell(j).width - total;\n            //     extendedWidth = extendedWidth / this.rows.getRow(i).cells.getCell(j).columnSpan;\n            //     for (let k : number = j; k < j + this.rows.getRow(i).cells.getCell(j).columnSpan; k++)\n            //         widths[k] += extendedWidth;\n            // }\n\n          }\n        }\n      } // if (this.isChildGrid && this.initialWidth != 0)\n      // {\n      //     widths = this.columns.getDefaultWidths(this.initialWidth);\n      // }\n\n\n      for (var i = 0, count = this.columns.count; i < count; i++) {\n        if (this.columns.getColumn(i).width <= 0) this.columns.getColumn(i).columnWidth = widths[i];else if (this.columns.getColumn(i).width > 0 && !this.columns.getColumn(i).isCustomWidth) this.columns.getColumn(i).columnWidth = widths[i];\n      }\n\n      var padding = 0;\n      var colWidth = 0;\n      var colCount = this.columns.count;\n      var childGridColWidth = 0;\n      colWidth = this.tempWidth;\n\n      for (var j = 0; j < this.columns.count; j++) {\n        if (this.gridColumns.getColumn(j).width > 0 && this.gridColumns.getColumn(j).isCustomWidth) {\n          colWidth -= this.gridColumns.getColumn(j).width;\n          colCount--;\n        }\n      } // if (this.style.cellSpacing != 0){\n      //     colWidth -= this.style.cellSpacing * 2;\n      // }\n\n\n      if (colWidth > 0) {\n        if (this.ParentCell.row.grid.style.cellSpacing != 0) {\n          colWidth -= this.ParentCell.row.grid.style.cellSpacing * 2;\n        }\n      }\n\n      if (colWidth > padding) {\n        childGridColWidth = colWidth / colCount;\n\n        if (this.ParentCell != null) {\n          for (var j = 0; j < this.columns.count; j++) {\n            if (!this.columns.getColumn(j).isCustomWidth) this.columns.getColumn(j).columnWidth = childGridColWidth;\n          }\n        }\n      }\n    }\n  };\n\n  return PdfGrid;\n}(PdfLayoutElement);\n\nexport { PdfGrid };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","PdfGridColumnCollection","PdfGridRowCollection","PdfGridHeaderCollection","RectangleF","SizeF","PointF","PdfLayoutElement","PdfLayoutFormat","PdfGridStyle","PdfBorders","PdfGridLayouter","PdfGrid","_super","_this","call","gridSize","isGridSplit","isRearranged","pageBounds","listOfNavigatePages","parentCellIndex","tempWidth","breakRow","splitChildRowIndex","hasRowSpanSpan","hasColumnSpan","isSingleGrid","defineProperty","get","beginCellDraw","enumerable","configurable","endCellDraw","bRepeatHeader","set","value","gridColumns","gridRows","gridHeaders","gridInitialWidth","gridStyle","ispageWidth","ischildGrid","width","height","measure","parentCell","layoutFormat","draw","arg1","arg2","arg3","arg4","drawHelper","x","y","graphics","clientSize","layoutRectangle","columns","i","headers","count","row","getHeader","rows","getRow","onBeginCellDraw","args","raiseBeginCellDraw","onEndCellDraw","raiseEndCellDraw","layout","param","currentRow","cells","getCell","style","borders","left","top","bounds","default","right","newBound","setSpan","checkSpan","format","gridLocation","layouter","result","Layouter","colSpan","rowSpan","currentCellIndex","currentRowIndex","maxSpan","rowCount","colCount","j","cell","Math","max","isCellMergeContinue","isRowMergeContinue","columnSpan","Error","toString","isCellMergeStart","isRowMergeStart","maximumRowSpan","cellcolSpan","cellrowSpan","cellmaxSpan","measureColumnsWidth","isPageWidth","widths","getDefaultWidths","getColumn","columnWidth","ParentCell","allowHorizontalOverflow","grid","padding","columnCount","childGridColumnWidth","cellPadding","hasLeftPad","hasRightPad","isCustomWidth","hasTopPad","bottom","hasBottomPad","cellSpacing","n","cellWidth","cellWidths","isChildGrid","initialWidth","colCount_1","rowWidth","min","colCount_2","RowCount","ColCount","total","k","colWidth","childGridColWidth"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/pdf-grid.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * PdfGrid.ts class for EJ2-PDF\n */\nimport { PdfGridColumnCollection } from './pdf-grid-column';\nimport { PdfGridRowCollection, PdfGridHeaderCollection } from './pdf-grid-row';\nimport { RectangleF, SizeF, PointF } from './../../drawing/pdf-drawing';\nimport { PdfLayoutElement } from './../../graphics/figures/layout-element';\nimport { PdfLayoutFormat } from './../../graphics/figures/base/element-layouter';\nimport { PdfGridStyle } from './styles/style';\nimport { PdfBorders } from './styles/pdf-borders';\nimport { PdfGridLayouter } from './../../structured-elements/grid/layout/grid-layouter';\nvar PdfGrid = /** @class */ (function (_super) {\n    __extends(PdfGrid, _super);\n    //constructor\n    /**\n     * Initialize a new instance for `PdfGrid` class.\n     * @private\n     */\n    function PdfGrid() {\n        var _this = _super.call(this) || this;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.gridSize = new SizeF(0, 0);\n        /**\n         * Check the child grid is ' split or not'\n         */\n        _this.isGridSplit = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.isRearranged = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.pageBounds = new RectangleF();\n        /**\n         * @hidden\n         * @private\n         */\n        _this.listOfNavigatePages = [];\n        /**\n         * @hidden\n         * @private\n         */\n        _this.parentCellIndex = 0;\n        _this.tempWidth = 0;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.breakRow = true;\n        _this.splitChildRowIndex = -1;\n        /**\n         * The event raised on `begin cell lay outing`.\n         * @event\n         * @private\n         */\n        //public beginPageLayout : Function;\n        /**\n         * The event raised on `end cell lay outing`.\n         * @event\n         * @private\n         */\n        //public endPageLayout : Function;\n        _this.hasRowSpanSpan = false;\n        _this.hasColumnSpan = false;\n        _this.isSingleGrid = true;\n        return _this;\n    }\n    Object.defineProperty(PdfGrid.prototype, \"raiseBeginCellDraw\", {\n        //Properties\n        /**\n         * Gets a value indicating whether the `start cell layout event` should be raised.\n         * @private\n         */\n        get: function () {\n            return (typeof this.beginCellDraw !== 'undefined' && typeof this.beginCellDraw !== null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"raiseEndCellDraw\", {\n        /**\n         * Gets a value indicating whether the `end cell layout event` should be raised.\n         * @private\n         */\n        get: function () {\n            return (typeof this.endCellDraw !== 'undefined' && typeof this.endCellDraw !== null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"repeatHeader\", {\n        /**\n         * Gets or sets a value indicating whether to `repeat header`.\n         * @private\n         */\n        get: function () {\n            if (this.bRepeatHeader == null || typeof this.bRepeatHeader === 'undefined') {\n                this.bRepeatHeader = false;\n            }\n            return this.bRepeatHeader;\n        },\n        set: function (value) {\n            this.bRepeatHeader = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"allowRowBreakAcrossPages\", {\n        /**\n         * Gets or sets a value indicating whether to split or cut rows that `overflow a page`.\n         * @private\n         */\n        get: function () {\n            return this.breakRow;\n        },\n        set: function (value) {\n            this.breakRow = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"columns\", {\n        /**\n         * Gets the `column` collection of the PdfGrid.[Read-Only]\n         * @private\n         */\n        get: function () {\n            if (this.gridColumns == null || typeof this.gridColumns === 'undefined') {\n                this.gridColumns = new PdfGridColumnCollection(this);\n            }\n            return this.gridColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"rows\", {\n        /**\n         * Gets the `row` collection from the PdfGrid.[Read-Only]\n         * @private\n         */\n        get: function () {\n            if (this.gridRows == null) {\n                this.gridRows = new PdfGridRowCollection(this);\n            }\n            return this.gridRows;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"headers\", {\n        /**\n         * Gets the `headers` collection from the PdfGrid.[Read-Only]\n         * @private\n         */\n        get: function () {\n            if (this.gridHeaders == null || typeof this.gridHeaders === 'undefined') {\n                this.gridHeaders = new PdfGridHeaderCollection(this);\n            }\n            return this.gridHeaders;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"initialWidth\", {\n        /**\n         * Indicating `initial width` of the page.\n         * @private\n         */\n        get: function () {\n            return this.gridInitialWidth;\n        },\n        set: function (value) {\n            this.gridInitialWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"style\", {\n        /**\n         * Gets or sets the `grid style`.\n         * @private\n         */\n        get: function () {\n            if (this.gridStyle == null) {\n                this.gridStyle = new PdfGridStyle();\n            }\n            return this.gridStyle;\n        },\n        set: function (value) {\n            if (this.gridStyle == null) {\n                this.gridStyle = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"isPageWidth\", {\n        /**\n         * Gets a value indicating whether the grid column width is considered to be `page width`.\n         * @private\n         */\n        get: function () {\n            return this.ispageWidth;\n        },\n        set: function (value) {\n            this.ispageWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"isChildGrid\", {\n        /**\n         * Gets or set if grid `is nested grid`.\n         * @private\n         */\n        get: function () {\n            return this.ischildGrid;\n        },\n        set: function (value) {\n            this.ischildGrid = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"size\", {\n        /**\n         * Gets or set if grid ' is split or not'\n         * @public\n         */\n        // public get isGridSplit() : boolean {\n        //     return this.isgridSplit;\n        // }\n        // public set isGridSplit(value : boolean) {\n        //     this.isgridSplit = value;\n        // }public get isGridSplit() : boolean {\n        //     return this.isgridSplit;\n        // }\n        // public set isGridSplit(value : boolean) {\n        //     this.isgridSplit = value;\n        // }\n        /**\n         * Gets the `size`.\n         * @private\n         */\n        get: function () {\n            if ((this.gridSize.width === 0 || typeof this.gridSize.width === 'undefined') && this.gridSize.height === 0) {\n                this.gridSize = this.measure();\n            }\n            return this.gridSize;\n            // } else {\n            //     return this.gridSize;\n            // }\n        },\n        set: function (value) {\n            this.gridSize = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"ParentCell\", {\n        get: function () {\n            return this.parentCell;\n        },\n        set: function (value) {\n            this.parentCell = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"LayoutFormat\", {\n        get: function () {\n            return this.layoutFormat;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfGrid.prototype.draw = function (arg1, arg2, arg3, arg4) {\n        if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && typeof arg3 === 'undefined') {\n            return this.drawHelper(arg1, arg2.x, arg2.y);\n        }\n        else if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {\n            return this.drawHelper(arg1, arg2, arg3, null);\n        }\n        else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'undefined') {\n            return this.drawHelper(arg1, arg2, null);\n        }\n        else if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && arg3 instanceof PdfLayoutFormat) {\n            return this.drawHelper(arg1, arg2.x, arg2.y, arg3);\n        }\n        else if (typeof arg2 === 'number' && typeof arg3 === 'number' && (arg4 instanceof PdfLayoutFormat || arg4 == null)) {\n            var width = (arg1.graphics.clientSize.width - arg2);\n            var layoutRectangle = new RectangleF(arg2, arg3, width, 0);\n            return this.drawHelper(arg1, layoutRectangle, arg4);\n        }\n        else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'boolean') {\n            return this.drawHelper(arg1, arg2, null);\n        }\n        else {\n            return this.drawHelper(arg1, arg2, arg3);\n        }\n    };\n    /**\n     * `measures` this instance.\n     * @private\n     */\n    PdfGrid.prototype.measure = function () {\n        var height = 0;\n        var width = this.columns.width;\n        for (var i = 0; i < this.headers.count; i++) {\n            var row = this.headers.getHeader(i);\n            height += row.height;\n        }\n        for (var i = 0; i < this.rows.count; i++) {\n            var row = this.rows.getRow(i);\n            height += row.height;\n        }\n        return new SizeF(width, height);\n    };\n    PdfGrid.prototype.onBeginCellDraw = function (args) {\n        if (this.raiseBeginCellDraw) {\n            this.beginCellDraw(this, args);\n        }\n    };\n    PdfGrid.prototype.onEndCellDraw = function (args) {\n        if (this.raiseEndCellDraw) {\n            this.endCellDraw(this, args);\n        }\n    };\n    /**\n     * `Layouts` the specified graphics.\n     * @private\n     */\n    PdfGrid.prototype.layout = function (param) {\n        if (this.rows.count !== 0) {\n            var currentRow = this.rows.getRow(0).cells.getCell(0).style;\n            if (currentRow.borders != null && ((currentRow.borders.left != null && currentRow.borders.left.width !== 1) ||\n                (currentRow.borders.top != null && currentRow.borders.top.width !== 1))) {\n                var x = currentRow.borders.left.width / 2;\n                var y = currentRow.borders.top.width / 2;\n                if (param.bounds.x === PdfBorders.default.right.width / 2 && param.bounds.y === PdfBorders.default.right.width / 2) {\n                    var newBound = new RectangleF(x, y, this.gridSize.width, this.gridSize.height);\n                    param.bounds = newBound;\n                }\n            }\n        }\n        this.setSpan();\n        this.checkSpan();\n        this.layoutFormat = param.format;\n        this.gridLocation = param.bounds;\n        var layouter = new PdfGridLayouter(this);\n        var result = (layouter.Layouter(param));\n        return result;\n    };\n    PdfGrid.prototype.setSpan = function () {\n        var colSpan = 1;\n        var rowSpan = 1;\n        var currentCellIndex = 0;\n        var currentRowIndex = 0;\n        var maxSpan = 0;\n        var rowCount = this.headers.count;\n        for (var i = 0; i < rowCount; i++) {\n            var row = this.headers.getHeader(i);\n            maxSpan = 0;\n            var colCount = row.cells.count;\n            for (var j = 0; j < colCount; j++) {\n                var cell = row.cells.getCell(j);\n                maxSpan = Math.max(maxSpan, cell.rowSpan);\n                //Skip setting span map for already coverted rows/columns.\n                if (!cell.isCellMergeContinue && !cell.isRowMergeContinue && (cell.columnSpan > 1 || cell.rowSpan > 1)) {\n                    if (cell.columnSpan + j > row.cells.count) {\n                        throw new Error('Invalid span specified at row ' + j.toString() + ' column ' + i.toString());\n                    }\n                    if (cell.rowSpan + i > this.headers.count) {\n                        throw new Error('Invalid span specified at Header ' + j.toString() + ' column ' + i.toString());\n                    }\n                    // if (this.rows.count !== 0 && cell.rowSpan + i > this.rows.count) {\n                    //     throw new Error('Invalid span specified at row ' + j.toString() + ' column ' + i.toString());\n                    // }\n                    if (cell.columnSpan > 1 && cell.rowSpan > 1) {\n                        colSpan = cell.columnSpan;\n                        rowSpan = cell.rowSpan;\n                        currentCellIndex = j;\n                        currentRowIndex = i;\n                        cell.isCellMergeStart = true;\n                        cell.isRowMergeStart = true;\n                        //Set Column merges for first row\n                        while (colSpan > 1) {\n                            currentCellIndex++;\n                            row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                            row.cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                            row.cells.getCell(currentCellIndex).rowSpan = rowSpan;\n                            colSpan--;\n                        }\n                        currentCellIndex = j;\n                        colSpan = cell.columnSpan;\n                        //Set Row Merges and column merges foreach subsequent rows.\n                        while (rowSpan > 1) {\n                            currentRowIndex++;\n                            this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                            this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                            rowSpan--;\n                            while (colSpan > 1) {\n                                currentCellIndex++;\n                                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                                colSpan--;\n                            }\n                            colSpan = cell.columnSpan;\n                            currentCellIndex = j;\n                        }\n                    }\n                    else if (cell.columnSpan > 1 && cell.rowSpan === 1) {\n                        colSpan = cell.columnSpan;\n                        currentCellIndex = j;\n                        cell.isCellMergeStart = true;\n                        //Set Column merges.\n                        while (colSpan > 1) {\n                            currentCellIndex++;\n                            row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                            colSpan--;\n                        }\n                    }\n                    else if (cell.columnSpan === 1 && cell.rowSpan > 1) {\n                        rowSpan = cell.rowSpan;\n                        currentRowIndex = i;\n                        //Set row Merges.\n                        while (rowSpan > 1) {\n                            currentRowIndex++;\n                            this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                            rowSpan--;\n                        }\n                    }\n                }\n            }\n            row.maximumRowSpan = maxSpan;\n        }\n    };\n    PdfGrid.prototype.checkSpan = function () {\n        var cellcolSpan;\n        var cellrowSpan = 1;\n        var cellmaxSpan = 0;\n        var currentCellIndex;\n        var currentRowIndex = 0;\n        cellcolSpan = cellrowSpan = 1;\n        currentCellIndex = currentRowIndex = 0;\n        if (this.hasRowSpanSpan || this.hasColumnSpan) {\n            var rowCount = this.rows.count;\n            for (var i = 0; i < rowCount; i++) {\n                var row = this.rows.getRow(i);\n                cellmaxSpan = 0;\n                var colCount = row.cells.count;\n                for (var j = 0; j < colCount; j++) {\n                    var cell = row.cells.getCell(j);\n                    cellmaxSpan = Math.max(cellmaxSpan, cell.rowSpan);\n                    //Skip setting span map for already coverted rows/columns.\n                    if (!cell.isCellMergeContinue && !cell.isRowMergeContinue\n                        && (cell.columnSpan > 1 || cell.rowSpan > 1)) {\n                        if (cell.columnSpan + j > row.cells.count) {\n                            throw new Error('Invalid span specified at row  ' + j.toString() + ' column ' + i.toString());\n                        }\n                        if (cell.rowSpan + i > this.rows.count) {\n                            throw new Error('Invalid span specified at row  ' + j.toString() + ' column ' + i.toString());\n                        }\n                        if (cell.columnSpan > 1 && cell.rowSpan > 1) {\n                            cellcolSpan = cell.columnSpan;\n                            cellrowSpan = cell.rowSpan;\n                            currentCellIndex = j;\n                            currentRowIndex = i;\n                            cell.isCellMergeStart = true;\n                            cell.isRowMergeStart = true;\n                            //Set Column merges for first row\n                            while (cellcolSpan > 1) {\n                                currentCellIndex++;\n                                row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                                row.cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                                cellcolSpan--;\n                            }\n                            currentCellIndex = j;\n                            cellcolSpan = cell.columnSpan;\n                            //Set Row Merges and column merges foreach subsequent rows.\n                            while (cellrowSpan > 1) {\n                                currentRowIndex++;\n                                this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                                this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                                cellrowSpan--;\n                                while (cellcolSpan > 1) {\n                                    currentCellIndex++;\n                                    this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                                    this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                                    cellcolSpan--;\n                                }\n                                cellcolSpan = cell.columnSpan;\n                                currentCellIndex = j;\n                            }\n                        }\n                        else if (cell.columnSpan > 1 && cell.rowSpan === 1) {\n                            cellcolSpan = cell.columnSpan;\n                            currentCellIndex = j;\n                            cell.isCellMergeStart = true;\n                            //Set Column merges.\n                            while (cellcolSpan > 1) {\n                                currentCellIndex++;\n                                row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                                cellcolSpan--;\n                            }\n                        }\n                        else if (cell.columnSpan === 1 && cell.rowSpan > 1) {\n                            cellrowSpan = cell.rowSpan;\n                            currentRowIndex = i;\n                            //Set row Merges.\n                            while (cellrowSpan > 1) {\n                                currentRowIndex++;\n                                this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                                cellrowSpan--;\n                            }\n                        }\n                    }\n                }\n                row.maximumRowSpan = cellmaxSpan;\n            }\n        }\n    };\n    PdfGrid.prototype.measureColumnsWidth = function (bounds) {\n        if (typeof bounds !== 'undefined') {\n            this.isPageWidth = false;\n            var widths = this.columns.getDefaultWidths(bounds.width - bounds.x);\n            //let tempWidth : number = this.columns.getColumn(0).width;\n            for (var i = 0, count = this.columns.count; i < count; i++) {\n                // if (this.columns.getColumn(i).width < 0)\n                //     this.columns.getColumn(i).columnWidth = widths[i];\n                // else if (this.columns.getColumn(i).width > 0 && !this.columns.getColumn(i).isCustomWidth && widths[i]>0 && this.isComplete)\n                this.columns.getColumn(i).columnWidth = widths[i];\n                this.tempWidth = widths[i];\n            }\n            if (this.ParentCell != null && this.style.allowHorizontalOverflow == false && this.ParentCell.row.grid.style.allowHorizontalOverflow == false) {\n                var padding = 0;\n                var columnWidth = 0;\n                var columnCount = this.columns.count;\n                var childGridColumnWidth = 0;\n                if (this.ParentCell.style.cellPadding != null || typeof this.ParentCell.style.cellPadding !== 'undefined') {\n                    if (typeof this.ParentCell.style.cellPadding.left != 'undefined' && this.ParentCell.style.cellPadding.hasLeftPad) {\n                        padding += this.ParentCell.style.cellPadding.left;\n                    }\n                    if (typeof this.ParentCell.style.cellPadding.right != 'undefined' && this.ParentCell.style.cellPadding.hasRightPad) {\n                        padding += this.ParentCell.style.cellPadding.right;\n                    }\n                }\n                for (var i = 0; i < this.ParentCell.columnSpan; i++) {\n                    columnWidth += this.ParentCell.row.grid.columns.getColumn(this.parentCellIndex + i).width;\n                }\n                for (var j = 0; j < this.columns.count; j++) {\n                    if (this.gridColumns.getColumn(j).width > 0 && this.gridColumns.getColumn(j).isCustomWidth) {\n                        columnWidth -= this.gridColumns.getColumn(j).width;\n                        columnCount--;\n                    }\n                }\n                if ((this.ParentCell.row.grid.style.cellPadding != null || typeof this.ParentCell.row.grid.style.cellPadding != 'undefined')) {\n                    if (typeof this.ParentCell.row.grid.style.cellPadding.top != 'undefined' && this.ParentCell.row.grid.style.cellPadding.hasTopPad) {\n                        padding += this.ParentCell.row.grid.style.cellPadding.top;\n                    }\n                    if (typeof this.ParentCell.row.grid.style.cellPadding.bottom != 'undefined' && this.ParentCell.row.grid.style.cellPadding.hasBottomPad) {\n                        padding += this.ParentCell.row.grid.style.cellPadding.bottom;\n                    }\n                }\n                if (this.ParentCell.row.grid.style.cellSpacing != 0) {\n                    columnWidth -= this.ParentCell.row.grid.style.cellSpacing * 2;\n                }\n                if (columnWidth > padding) {\n                    childGridColumnWidth = (columnWidth - padding) / columnCount;\n                    this.tempWidth = childGridColumnWidth;\n                    if (this.ParentCell != null) {\n                        for (var j = 0; j < this.columns.count; j++) {\n                            if (!this.columns.getColumn(j).isCustomWidth)\n                                this.columns.getColumn(j).columnWidth = childGridColumnWidth;\n                        }\n                    }\n                }\n            }\n            // if (this.ParentCell != null && this.ParentCell.row.width > 0)\n            // {\n            //     if (this.isChildGrid && this.gridSize.width > this.ParentCell.row.width)\n            //     {\n            //         widths = this.columns.getDefaultWidths(bounds.width);\n            //         for (let i : number = 0; i < this.columns.count; i++)\n            //         {\n            //             this.columns.getColumn(i).width = widths[i];\n            //         }\n            //     }\n            // }\n        }\n        else {\n            var widths = [this.columns.count];\n            for (var n = 0; n < this.columns.count; n++) {\n                widths[n] = 0;\n            }\n            var cellWidth = 0;\n            var cellWidths = 0;\n            if ((typeof this.isChildGrid === 'undefined' && typeof this.gridLocation !== 'undefined') || (this.isChildGrid === null && typeof this.gridLocation !== 'undefined')) {\n                this.initialWidth = this.gridLocation.width;\n            }\n            if (this.headers.count > 0) {\n                var colCount_1 = this.headers.getHeader(0).cells.count;\n                var rowCount = this.headers.count;\n                for (var i = 0; i < colCount_1; i++) {\n                    cellWidth = 0;\n                    for (var j = 0; j < rowCount; j++) {\n                        var rowWidth = Math.min(this.initialWidth, this.headers.getHeader(j).cells.getCell(i).width);\n                        cellWidth = Math.max(cellWidth, rowWidth);\n                    }\n                    widths[i] = cellWidth;\n                }\n            }\n            // else {\n            //     let colCount : number = this.rows.getRow(0).cells.count;\n            //     let rowCount : number = this.rows.count;\n            //     for (let i : number = 0; i < colCount; i++) {\n            //         cellWidth = 0;\n            //         for (let j : number = 0; j < rowCount; j++) {\n            //             let rowWidth : number = Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width);\n            //             cellWidth = Math.max(cellWidth, rowWidth);\n            //         }\n            //         widths[i] = cellWidth;\n            //     }\n            // }\n            cellWidth = 0;\n            for (var i = 0, colCount_2 = this.columns.count; i < colCount_2; i++) {\n                for (var j = 0, rowCount = this.rows.count; j < rowCount; j++) {\n                    if ((this.rows.getRow(j).cells.getCell(i).columnSpan == 1 && !this.rows.getRow(j).cells.getCell(i).isCellMergeContinue) || this.rows.getRow(j).cells.getCell(i).value != null) {\n                        if (this.rows.getRow(j).cells.getCell(i).value != null && !this.rows.getRow(j).grid.style.allowHorizontalOverflow) {\n                            var value = this.rows.getRow(j).grid.style.cellPadding.right +\n                                this.rows.getRow(j).grid.style.cellPadding.left\n                                + this.rows.getRow(j).cells.getCell(i).style.borders.left.width / 2;\n                            //  if (this.initialWidth != 0 )\n                            //         (this.rows.getRow(j).cells.getCell(i).value as PdfGrid).initialWidth = this.initialWidth - value;\n                        }\n                        var rowWidth = 0;\n                        rowWidth = this.initialWidth > 0.0 ? Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width) : this.rows.getRow(j).cells.getCell(i).width;\n                        // let internalWidth : number = this.rows.getRow(j).cells.getCell(i).width;\n                        // internalWidth += this.rows.getRow(j).cells.getCell(i).style.borders.left.width;\n                        // internalWidth += this.rows.getRow(j).cells.getCell(i).style.borders.right.width;\n                        // let internalHeight : number = this.rows.getRow(j).cells.getCell(i).height;\n                        // internalHeight += (this.rows.getRow(j).cells.getCell(i).style.borders.top.width);\n                        // internalHeight += (this.rows.getRow(j).cells.getCell(i).style.borders.bottom.width);\n                        // let isCorrectWidth : boolean = (internalWidth + this.gridLocation.x) > this.currentGraphics.clientSize.width;\n                        // let isCorrectHeight : boolean = (internalHeight + this.gridLocation.y) > this.currentGraphics.clientSize.height;\n                        // if (isCorrectWidth || isCorrectHeight) {\n                        //     throw Error('Image size exceeds client size of the page. Can not insert this image');\n                        // }\n                        // rowWidth = Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width);\n                        cellWidth = Math.max(widths[i], Math.max(cellWidth, rowWidth));\n                        cellWidth = Math.max(this.columns.getColumn(i).width, cellWidth);\n                    }\n                }\n                if (this.rows.count != 0)\n                    widths[i] = cellWidth;\n                cellWidth = 0;\n            }\n            for (var i = 0, RowCount = this.rows.count; i < RowCount; i++) {\n                for (var j = 0, ColCount = this.columns.count; j < ColCount; j++) {\n                    if (this.rows.getRow(i).cells.getCell(j).columnSpan > 1) {\n                        var total = widths[j];\n                        for (var k = 1; k < this.rows.getRow(i).cells.getCell(j).columnSpan; k++) {\n                            total += widths[j + k];\n                        }\n                        // if (this.rows.getRow(i).cells.getCell(j).width > total)\n                        // {\n                        //     let extendedWidth : number = this.rows.getRow(i).cells.getCell(j).width - total;\n                        //     extendedWidth = extendedWidth / this.rows.getRow(i).cells.getCell(j).columnSpan;\n                        //     for (let k : number = j; k < j + this.rows.getRow(i).cells.getCell(j).columnSpan; k++)\n                        //         widths[k] += extendedWidth;\n                        // }\n                    }\n                }\n            }\n            // if (this.isChildGrid && this.initialWidth != 0)\n            // {\n            //     widths = this.columns.getDefaultWidths(this.initialWidth);\n            // }\n            for (var i = 0, count = this.columns.count; i < count; i++) {\n                if (this.columns.getColumn(i).width <= 0)\n                    this.columns.getColumn(i).columnWidth = widths[i];\n                else if (this.columns.getColumn(i).width > 0 && !this.columns.getColumn(i).isCustomWidth)\n                    this.columns.getColumn(i).columnWidth = widths[i];\n            }\n            var padding = 0;\n            var colWidth = 0;\n            var colCount = this.columns.count;\n            var childGridColWidth = 0;\n            colWidth = this.tempWidth;\n            for (var j = 0; j < this.columns.count; j++) {\n                if (this.gridColumns.getColumn(j).width > 0 && this.gridColumns.getColumn(j).isCustomWidth) {\n                    colWidth -= this.gridColumns.getColumn(j).width;\n                    colCount--;\n                }\n            }\n            // if (this.style.cellSpacing != 0){\n            //     colWidth -= this.style.cellSpacing * 2;\n            // }\n            if (colWidth > 0) {\n                if (this.ParentCell.row.grid.style.cellSpacing != 0) {\n                    colWidth -= this.ParentCell.row.grid.style.cellSpacing * 2;\n                }\n            }\n            if (colWidth > padding) {\n                childGridColWidth = (colWidth) / colCount;\n                if (this.ParentCell != null) {\n                    for (var j = 0; j < this.columns.count; j++) {\n                        if (!this.columns.getColumn(j).isCustomWidth)\n                            this.columns.getColumn(j).columnWidth = childGridColWidth;\n                    }\n                }\n            }\n        }\n    };\n    return PdfGrid;\n}(PdfLayoutElement));\nexport { PdfGrid };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}