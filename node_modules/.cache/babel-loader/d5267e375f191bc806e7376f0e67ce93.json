{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * Selection src file\n */\n\n\nimport { Browser } from '@syncfusion/ej2-base';\nimport { remove } from '@syncfusion/ej2-base';\nimport { extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { ChartLocation, RectOption, CircleOption, withInBounds, getDraggedRectLocation, removeElement, getElement } from '../../common/utils/helper';\nimport { Rect, PathOption } from '@syncfusion/ej2-svg-base';\nimport { Index } from '../../common/model/base';\nimport { dragComplete, selectionComplete } from '../../common/model/constants';\nimport { BaseSelection } from '../../common/user-interaction/selection'; // tslint:disable:no-string-literal\n\n/**\n * `Selection` module handles the selection for chart.\n * @private\n */\n\nvar Selection =\n/** @class */\nfunction (_super) {\n  __extends(Selection, _super);\n  /**\n   * Constructor for selection module.\n   * @private.\n   */\n\n\n  function Selection(chart) {\n    var _this = _super.call(this, chart) || this;\n\n    _this.isdrawRect = true;\n    _this.multiDataIndexes = [];\n    _this.pathIndex = 0;\n    _this.seriesIndex = 0;\n    _this.count = -1;\n    _this.dragRectArray = [];\n    _this.filterArray = [];\n    _this.totalSelectedPoints = [];\n    _this.chart = chart;\n    _this.renderer = chart.renderer;\n    var mode = chart.selectionMode;\n    _this.isMultiDrag = chart.isMultiSelect && mode.indexOf('Drag') > -1;\n\n    _this.addEventListener();\n\n    return _this;\n  }\n  /**\n   * Binding events for selection module.\n   */\n\n\n  Selection.prototype.addEventListener = function () {\n    if (this.chart.isDestroyed || this.chart.stockChart && this.chart.stockChart.onPanning) {\n      return;\n    }\n\n    var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n    this.chart.on(Browser.touchMoveEvent, this.mouseMove, this);\n    this.chart.on(cancelEvent, this.completeSelection, this);\n    this.chart.on('click', this.calculateSelectedElements, this);\n    this.chart.on(Browser.touchStartEvent, this.mousedown, this);\n    this.chart.on(Browser.touchEndEvent, this.completeSelection, this);\n  };\n  /**\n   * Chart mouse down\n   */\n\n\n  Selection.prototype.mousedown = function (e) {\n    var chart = this.chart;\n\n    if (chart.isPointMouseDown || chart.selectionMode === 'None' || chart.isChartDrag) {\n      return;\n    }\n\n    if (chart.isDoubleTap || !chart.isTouch || this.rectPoints) {\n      this.dragStart(chart, chart.chartAxisLayoutPanel.seriesClipRect, chart.mouseDownX, chart.mouseDownY, e);\n    }\n  };\n  /**\n   * UnBinding events for selection module.\n   */\n\n\n  Selection.prototype.removeEventListener = function () {\n    if (this.chart.isDestroyed) {\n      return;\n    }\n\n    this.chart.off(Browser.touchMoveEvent, this.mouseMove);\n    this.chart.off('pointerleave' || 'mouseleave', this.completeSelection);\n    this.chart.off('click', this.calculateSelectedElements);\n    this.chart.off(Browser.touchStartEvent, this.mousedown);\n    this.chart.off(Browser.touchEndEvent, this.completeSelection);\n  };\n  /**\n   * To find private variable values\n   */\n\n\n  Selection.prototype.initPrivateVariables = function (chart) {\n    this.styleId = chart.element.id + '_ej2_chart_selection';\n    this.unselected = chart.element.id + '_ej2_deselected';\n    this.closeIconId = chart.element.id + '_ej2_drag_close';\n    this.draggedRectGroup = chart.element.id + '_ej2_drag_group';\n    this.multiRectGroup = chart.element.id + '_ej2_drag_multi_group';\n    this.draggedRect = chart.element.id + '_ej2_drag_rect';\n    this.lassoPath = chart.element.id + '_ej2_drag_path';\n    this.selectedDataIndexes = [];\n    this.rectPoints = null;\n    this.isSeriesMode = chart.selectionMode === 'Series';\n  };\n  /**\n   * Method to select the point and series.\n   * @return {void}\n   */\n\n\n  Selection.prototype.invokeSelection = function (chart) {\n    this.initPrivateVariables(chart);\n    this.series = extend({}, chart.visibleSeries, null, true);\n    this.seriesStyles();\n    this.currentMode = chart.selectionMode;\n\n    if (!(chart.selectionMode.indexOf('Drag') > -1)) {\n      this.selectDataIndex(chart, this.concatIndexes(chart.selectedDataIndexes, this.selectedDataIndexes));\n    }\n  };\n\n  Selection.prototype.generateStyle = function (series) {\n    if (series) {\n      if (this.styleId.indexOf('selection') > 1 && this.chart.selectionMode !== 'None') {\n        this.unselected = series.unSelectedStyle || this.unselected;\n      }\n\n      if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightMode !== 'None') {\n        this.unselected = series.nonHighlightStyle || this.unselected;\n      }\n\n      return series.selectionStyle || this.styleId + '_series_' + series.index;\n    }\n\n    return 'undefined';\n  };\n  /**\n   *  Method to get the selected data index\n   * @private.\n   */\n\n\n  Selection.prototype.selectDataIndex = function (chart, indexes) {\n    for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {\n      var index = indexes_1[_i];\n      this.performSelection(index, chart, this.getElementByIndex(chart, index)[0]);\n    }\n  };\n  /**\n   *  Method to get the selected index element\n   * @private.\n   */\n\n\n  Selection.prototype.getElementByIndex = function (chart, index, suffix) {\n    if (suffix === void 0) {\n      suffix = '';\n    }\n\n    var elementId = chart.element.id + '_Series_' + index.series + '_Point' + '_' + index.point;\n    var series = chart.series[index.series];\n    elementId = !series.isRectSeries && series.type !== 'Scatter' && series.type !== 'Bubble' && series.marker.visible ? elementId + '_Symbol' + suffix : elementId;\n    return [getElement(elementId), series.type === 'RangeArea' && series.marker.visible ? getElement(elementId + '1') : null];\n  };\n  /**\n   *  Method to get the selected cluster element\n   * @private.\n   */\n\n\n  Selection.prototype.getClusterElements = function (chart, index) {\n    var clusters = [];\n    var seriesStyle;\n    var selectedElements;\n\n    for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n      var series = _a[_i];\n      index = new Index(series.index, index.point);\n      clusters.push(this.getElementByIndex(chart, index)[0]);\n      seriesStyle = this.generateStyle(chart.visibleSeries[index.series]);\n      selectedElements = document.querySelectorAll('.' + seriesStyle);\n      this.findTrackballElements(selectedElements, seriesStyle);\n\n      if (!chart.isMultiSelect && selectedElements.length > 0 && selectedElements[0].id !== clusters[index.series].id) {\n        this.removeSelection(chart, index.series, selectedElements, seriesStyle, true);\n      }\n    }\n\n    return clusters;\n  };\n  /**\n   *  Method to get trackball elements\n   * @private.\n   */\n\n\n  Selection.prototype.findTrackballElements = function (selectedElements, className) {\n    var trackballElements;\n    var elements;\n\n    for (var i = 0; i < selectedElements.length; i++) {\n      if (!isNullOrUndefined(selectedElements[i])) {\n        trackballElements = !isNullOrUndefined(selectedElements[i].parentNode) ? [].slice.call(selectedElements[0].parentNode.querySelectorAll('.' + className)) : [];\n\n        if (trackballElements.length > 0) {\n          elements = [];\n\n          for (var i_1 = 0; i_1 < trackballElements.length; i_1++) {\n            if (trackballElements[i_1].id.indexOf('Trackball') > -1) {\n              elements.push(trackballElements[i_1]);\n            }\n          }\n\n          this.removeStyles(elements);\n        }\n      }\n    }\n  };\n  /**\n   *  Method to get the selected element\n   * @private.\n   */\n\n\n  Selection.prototype.findElements = function (chart, series, index, suffix) {\n    if (suffix === void 0) {\n      suffix = '';\n    }\n\n    if (this.isSeriesMode) {\n      return this.getSeriesElements(series);\n    } else if (this.currentMode === 'Cluster') {\n      return this.getClusterElements(chart, index);\n    } else {\n      return this.getElementByIndex(chart, index, suffix);\n    }\n  };\n  /**\n   * To find the selected element.\n   * @return {void}\n   * @private\n   */\n\n\n  Selection.prototype.isAlreadySelected = function (event) {\n    var targetElem = event.target;\n\n    if (event.type === 'click') {\n      this.currentMode = this.chart.selectionMode;\n      this.styleId = this.chart.element.id + '_ej2_chart_selection';\n    } else if (event.type === 'mousemove') {\n      this.currentMode = this.chart.highlightMode;\n      this.highlightDataIndexes = [];\n      this.styleId = this.chart.element.id + '_ej2_chart_highlight';\n    }\n\n    if (this.chart.highlightMode !== 'None' && this.chart.selectionMode === 'None') {\n      if (event.type === 'click') {\n        return false;\n      }\n    }\n\n    if (this.chart.highlightMode !== 'None' && this.previousSelectedEle && this.previousSelectedEle[0]) {\n      var parentNodeId = targetElem.parentNode.id;\n      var isElement = void 0;\n\n      if (targetElem.parentNode) {\n        isElement = parentNodeId.indexOf('SeriesGroup') > 0 || parentNodeId.indexOf('SymbolGroup') > 0 ? true : false;\n      }\n\n      for (var i = 0; i < this.previousSelectedEle.length; i++) {\n        if (this.previousSelectedEle[i].hasAttribute('class')) {\n          if (this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1 && (isElement || event.type === 'click')) {\n            this.previousSelectedEle[i].removeAttribute('class');\n            this.addOrRemoveIndex(this.highlightDataIndexes, this.indexFinder(this.previousSelectedEle[i].id));\n          } else if (!isElement && this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1) {\n            this.performSelection(this.indexFinder(this.previousSelectedEle[i].id), this.chart, this.previousSelectedEle[i]);\n          }\n        }\n      }\n    }\n\n    return true;\n  };\n  /**\n   * To find the selected element.\n   * @return {void}\n   * @private\n   */\n\n\n  Selection.prototype.calculateSelectedElements = function (event) {\n    if (isNullOrUndefined(event.target)) {\n      return;\n    }\n\n    var targetElement = event.target;\n\n    if (this.chart.selectionMode === 'None' && this.chart.highlightMode === 'None' || targetElement.id.indexOf(this.chart.element.id + '_') === -1) {\n      return;\n    }\n\n    if (event.type === 'mousemove') {\n      if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 || targetElement.getAttribute('class').indexOf('selection') > -1)) {\n        return;\n      }\n\n      if (!isNullOrUndefined(targetElement.parentNode) && targetElement.parentNode.hasAttribute('class') && (targetElement.parentNode.getAttribute('class').indexOf('highlight') > 0 || targetElement.parentNode.getAttribute('class').indexOf('selection') > 0)) {\n        return;\n      }\n    }\n\n    this.isAlreadySelected(event);\n\n    if (targetElement.id.indexOf('_Series_') > -1) {\n      var element = void 0;\n\n      if (targetElement.id.indexOf('_Trackball_1') > -1) {\n        element = getElement(targetElement.id.split('_Trackball_')[0] + '_Symbol');\n        element = isNullOrUndefined(element) ? getElement(targetElement.id.split('_Trackball_')[0]) : element;\n      } else if (targetElement.id.indexOf('_Trackball_0') > -1) {\n        return null;\n      }\n\n      this.performSelection(this.indexFinder(targetElement.id), this.chart, element || targetElement);\n    }\n  };\n  /**\n   *  Method to perform the selection\n   * @private.\n   */\n\n\n  Selection.prototype.performSelection = function (index, chart, element) {\n    this.isSeriesMode = this.currentMode === 'Series';\n\n    if (chart.series[index.series].type === 'BoxAndWhisker' && element.id === chart.element.id + '_Series_' + index.series + '_Point_' + index.point + '_BoxPath') {\n      element = element.parentNode;\n    }\n\n    if (chart.series[index.series].type === 'Area' && (this.currentMode === 'Point' || this.currentMode === 'Cluster') && element.id === this.chart.element.id + '_Series_' + index.series) {\n      var className = this.generateStyle(chart.series[index.series]);\n      var selectionEle = document.querySelectorAll('.' + className);\n      this.findTrackballElements(selectionEle, className);\n      this.blurEffect(chart.element.id, chart.visibleSeries);\n    }\n\n    switch (this.currentMode) {\n      case 'Series':\n        this.selection(chart, index, this.getSeriesElements(chart.series[index.series]));\n        this.selectionComplete(chart, index, this.currentMode);\n        this.blurEffect(chart.element.id, chart.visibleSeries);\n        break;\n\n      case 'Point':\n        if (!isNaN(index.point)) {\n          this.selection(chart, index, [element]);\n          this.selectionComplete(chart, index, this.currentMode);\n          this.blurEffect(chart.element.id, chart.visibleSeries);\n        }\n\n        break;\n\n      case 'Cluster':\n        if (!isNaN(index.point)) {\n          this.clusterSelection(chart, index);\n          this.selectionComplete(chart, index, this.currentMode);\n          this.blurEffect(chart.element.id, chart.visibleSeries);\n        }\n\n        break;\n    }\n  };\n  /**\n   *  Method to get the selected data index\n   * @private.\n   */\n\n\n  Selection.prototype.selectionComplete = function (chart, index, selectionMode) {\n    var points;\n    var pointIndex;\n    var seriesIndex;\n    var selectedPointValues = [];\n    var yValue;\n    var selectedPointX;\n\n    if (selectionMode === 'Cluster') {\n      for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n        var series = _a[_i];\n\n        if (series.visible) {\n          for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n            pointIndex = chart.isMultiSelect ? this.selectedDataIndexes[i].point : index.point;\n            seriesIndex = series.index;\n            points = series.points;\n\n            if (!isNaN(pointIndex)) {\n              yValue = series.type !== 'RangeArea' ? points[pointIndex].yValue : points[pointIndex].regions[0].y;\n              selectedPointX = points[pointIndex].xValue;\n\n              if (chart.primaryXAxis.valueType === 'Category') {\n                selectedPointX = points[pointIndex].x.toLocaleString();\n              } else if (chart.primaryXAxis.valueType === 'DateTime') {\n                selectedPointX = new Date(points[pointIndex].xValue);\n              }\n\n              if (series.category !== 'Indicator') {\n                selectedPointValues.push({\n                  x: selectedPointX,\n                  y: yValue,\n                  seriesIndex: seriesIndex,\n                  pointIndex: pointIndex\n                });\n              }\n\n              if (series.type === 'RangeArea') {\n                selectedPointValues.push({\n                  x: selectedPointX,\n                  y: points[pointIndex].regions[0].y,\n                  seriesIndex: seriesIndex,\n                  pointIndex: pointIndex\n                });\n              }\n            }\n          }\n        }\n      }\n    } else if (selectionMode === 'Series') {\n      if (chart.isMultiSelect) {\n        for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n          seriesIndex = this.selectedDataIndexes[i].series;\n          selectedPointValues.push({\n            seriesIndex: seriesIndex\n          });\n        }\n      } else {\n        seriesIndex = this.selectedDataIndexes.length > 0 ? this.selectedDataIndexes[0].series : 0;\n        selectedPointValues.push({\n          seriesIndex: seriesIndex\n        });\n      }\n    } else if (selectionMode === 'Point') {\n      for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n        pointIndex = this.selectedDataIndexes[i].point;\n        seriesIndex = this.selectedDataIndexes[i].series;\n        var series = chart.series[seriesIndex];\n        points = series.points;\n\n        if (!isNaN(pointIndex)) {\n          selectedPointX = points[pointIndex].xValue;\n          yValue = series.type !== 'RangeArea' ? points[pointIndex].yValue : points[pointIndex].regions[0].y;\n\n          if (chart.primaryXAxis.valueType === 'Category') {\n            selectedPointX = points[pointIndex].x.toLocaleString();\n          } else if (chart.primaryXAxis.valueType === 'DateTime') {\n            selectedPointX = new Date(points[pointIndex].xValue);\n          }\n\n          selectedPointValues.push({\n            x: selectedPointX,\n            y: yValue,\n            seriesIndex: seriesIndex,\n            pointIndex: pointIndex\n          });\n        }\n      }\n    }\n\n    var args = {\n      name: selectionComplete,\n      selectedDataValues: selectedPointValues,\n      cancel: false\n    };\n    chart.trigger(selectionComplete, args);\n  };\n  /**\n   *  Method to perform selection\n   * @private.\n   */\n\n\n  Selection.prototype.selection = function (chart, index, selectedElements, legendClick) {\n    if (legendClick === void 0) {\n      legendClick = false;\n    }\n\n    if (!(this.currentMode === 'Lasso')) {\n      if (!chart.isMultiSelect && this.currentMode.indexOf('Drag') === -1 && this.styleId.indexOf('highlight') === -1 && chart.selectionMode !== 'None') {\n        this.removeMultiSelectElements(chart, this.selectedDataIndexes, index, chart.series);\n      }\n    }\n\n    if (!isNullOrUndefined(selectedElements[0])) {\n      var isAdd = void 0;\n      var className = selectedElements[0] && (selectedElements[0].getAttribute('class') || '');\n      var pClassName = selectedElements[0].parentNode && (selectedElements[0].parentNode.getAttribute('class') || '');\n\n      if (className !== '' && this.currentMode !== 'Cluster') {\n        this.findTrackballElements(selectedElements, className);\n      }\n\n      if (selectedElements[0] && className.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n        this.removeStyles(selectedElements);\n      } else if (selectedElements[0].parentNode && pClassName.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n        this.removeStyles([selectedElements[0].parentNode]);\n      } else {\n        this.previousSelectedEle = chart.highlightMode !== 'None' ? selectedElements : [];\n        this.applyStyles(selectedElements);\n        isAdd = true;\n      }\n\n      if (this.styleId.indexOf('highlight') > 0 && chart.highlightMode !== 'None') {\n        this.addOrRemoveIndex(this.highlightDataIndexes, index, isAdd);\n      } else {\n        this.addOrRemoveIndex(this.selectedDataIndexes, index, isAdd);\n      }\n    }\n  };\n  /**\n   *  Method to get the cluster selection element\n   * @private.\n   */\n\n\n  Selection.prototype.clusterSelection = function (chart, index) {\n    this.selection(chart, index, this.getClusterElements(chart, new Index(index.series, index.point)));\n  };\n  /**\n   * Method to remove the multi selected elements\n   * @private.\n   */\n\n\n  Selection.prototype.removeMultiSelectElements = function (chart, index, currentIndex, seriesCollection) {\n    var series;\n\n    for (var i = 0; i < index.length; i++) {\n      series = seriesCollection[index[i].series];\n\n      if (this.isSeriesMode && !this.toEquals(index[i], currentIndex, this.isSeriesMode) || this.currentMode === 'Cluster' && !this.toEquals(index[i], currentIndex, false) || !this.isSeriesMode && this.toEquals(index[i], currentIndex, true) && !this.toEquals(index[i], currentIndex, false)) {\n        this.removeStyles(this.findElements(chart, series, index[i]));\n        index.splice(i, 1);\n        i--;\n      }\n    }\n  };\n  /**\n   * Method to remove the selection\n   * @private.\n   */\n\n\n  Selection.prototype.blurEffect = function (chartId, visibleSeries, legendClick) {\n    if (legendClick === void 0) {\n      legendClick = false;\n    }\n\n    var visibility = this.checkVisibility(this.highlightDataIndexes) || this.checkVisibility(this.selectedDataIndexes); // legend click scenario\n\n    for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n      var series = visibleSeries_1[_i];\n\n      if (series.visible) {\n        this.checkSelectionElements(getElement(chartId + 'SeriesGroup' + series.index), this.generateStyle(series), visibility, legendClick, series.index);\n\n        if (!isNullOrUndefined(getElement(chartId + 'SymbolGroup' + series.index))) {\n          this.checkSelectionElements(getElement(chartId + 'SymbolGroup' + series.index), this.generateStyle(series), visibility, legendClick, series.index);\n        }\n      }\n    }\n  };\n  /**\n   * Method to add the add/remove class to element\n   * @private.\n   */\n\n\n  Selection.prototype.checkSelectionElements = function (element, className, visibility, legendClick, series) {\n    var children = this.isSeriesMode ? [element] : element.childNodes;\n\n    if (this.chart.selectionMode !== 'None' && this.chart.highlightMode !== 'None') {\n      children = element.children;\n    }\n\n    var elementClassName;\n    var parentClassName;\n    var legendShape;\n    var selectElement = element;\n\n    for (var i = 0; i < children.length; i++) {\n      elementClassName = children[i].getAttribute('class') || '';\n      parentClassName = children[i].parentNode.getAttribute('class') || '';\n\n      if (this.chart.selectionMode !== 'None' && this.chart.highlightMode !== 'None') {\n        className = elementClassName.indexOf('selection') > 0 || elementClassName.indexOf('highlight') > 0 ? elementClassName : className;\n        className = parentClassName.indexOf('selection') > 0 || parentClassName.indexOf('highlight') > 0 ? parentClassName : className;\n      }\n\n      if (elementClassName.indexOf(className) === -1 && parentClassName.indexOf(className) === -1 && visibility) {\n        this.addSvgClass(children[i], this.unselected);\n      } else {\n        selectElement = children[i];\n        this.removeSvgClass(children[i], this.unselected);\n        this.removeSvgClass(children[i].parentNode, this.unselected);\n      }\n\n      if (children[i].id.indexOf('Trackball') > 0 && selectElement.classList[0] === className) {\n        this.removeSvgClass(children[i], this.unselected);\n        this.removeSvgClass(children[i].parentNode, this.unselected);\n        this.addSvgClass(children[i], className);\n      }\n    }\n\n    if (element.id.indexOf('Symbol') > -1) {\n      if (element.querySelectorAll('.' + className)[0] && element.querySelectorAll('.' + className)[0].getAttribute('class') === className) {\n        var symbolEle = getElement(this.control.element.id + '_Series_' + element.id[element.id.length - 1]);\n        var seriesClassName = symbolEle && symbolEle.hasAttribute('class') ? symbolEle.getAttribute('class') : '';\n\n        if (seriesClassName.indexOf(this.unselected) > -1) {\n          this.removeSvgClass(symbolEle, this.unselected);\n        }\n      }\n    }\n\n    if (this.control.legendModule && this.control.legendSettings.visible) {\n      legendShape = getElement(this.control.element.id + '_chart_legend_shape_' + series);\n\n      if (legendShape) {\n        if (legendShape.hasAttribute('class')) {\n          this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\n        }\n\n        elementClassName = selectElement.getAttribute('class') || '';\n        parentClassName = selectElement.parentNode.getAttribute('class') || '';\n\n        if (elementClassName.indexOf(className) === -1 && parentClassName.indexOf(className) === -1 && visibility) {\n          this.addSvgClass(legendShape, this.unselected);\n          this.removeSvgClass(legendShape, className);\n        } else {\n          this.removeSvgClass(legendShape, this.unselected);\n          elementClassName === '' && parentClassName === '' || elementClassName.trim() === 'EJ2-Trackball' ? this.removeSvgClass(legendShape, className) : this.addSvgClass(legendShape, className);\n        }\n\n        if (legendClick && parentClassName.indexOf(className) > -1) {\n          this.addSvgClass(legendShape, className);\n        }\n      }\n    }\n  };\n  /**\n   *  Method to apply the styles\n   * @private.\n   */\n\n\n  Selection.prototype.applyStyles = function (elements) {\n    for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n      var element = elements_1[_i];\n\n      if (element) {\n        this.removeSvgClass(element.parentNode, this.unselected);\n        this.removeSvgClass(element, this.unselected);\n        this.addSvgClass(element, this.getSelectionClass(element.id));\n      }\n    }\n  };\n  /**\n   *  Method to get the selection class\n   * @private.\n   */\n\n\n  Selection.prototype.getSelectionClass = function (id) {\n    return this.generateStyle(this.control.series[this.indexFinder(id).series]);\n  };\n  /**\n   *  Method to remove styles\n   * @private.\n   */\n\n\n  Selection.prototype.removeStyles = function (elements) {\n    for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {\n      var element = elements_2[_i];\n\n      if (element) {\n        this.removeSvgClass(element, this.getSelectionClass(element.id));\n      }\n    }\n  };\n  /**\n   *  Method to remove the selected data index\n   * @private.\n   */\n\n\n  Selection.prototype.addOrRemoveIndex = function (indexes, index, isAdd) {\n    for (var i = 0; i < indexes.length; i++) {\n      if (this.toEquals(indexes[i], index, this.isSeriesMode)) {\n        indexes.splice(i, 1);\n        i--;\n      }\n    }\n\n    if (isAdd) {\n      indexes.push(index);\n    }\n  };\n  /**\n   *  Method to get the equal index\n   * @private.\n   */\n\n\n  Selection.prototype.toEquals = function (first, second, checkSeriesOnly) {\n    return (first.series === second.series || this.currentMode === 'Cluster' && !checkSeriesOnly) && (checkSeriesOnly || first.point === second.point);\n  };\n  /**\n   * To redraw the selected points.\n   * @return {void}\n   * @private\n   */\n\n\n  Selection.prototype.redrawSelection = function (chart, oldMode) {\n    this.isSeriesMode = oldMode === 'Series';\n    var selectedDataIndexes = extend([], this.selectedDataIndexes, null, true);\n    var highlightDataIndexes = extend([], this.highlightDataIndexes, null, true);\n\n    if (this.styleId.indexOf('highlight') > 0 && highlightDataIndexes.length > 0) {\n      this.removeSelectedElements(chart, this.highlightDataIndexes, chart.series);\n      selectedDataIndexes = highlightDataIndexes;\n    } else {\n      this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n    }\n\n    this.blurEffect(chart.element.id, chart.visibleSeries);\n    this.selectDataIndex(chart, selectedDataIndexes);\n  };\n  /** @private */\n\n\n  Selection.prototype.legendSelection = function (chart, series, event) {\n    var targetElement = event.target;\n\n    if (event.type === 'mousemove') {\n      if (event.target.id.indexOf('text') > 1) {\n        targetElement = getElement(event.target.id.replace('text', 'shape'));\n      }\n\n      if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 || targetElement.getAttribute('class').indexOf('selection') > -1)) {\n        return;\n      }\n\n      this.currentMode = this.chart.highlightMode;\n    }\n\n    var isPreSelected = this.isAlreadySelected(event);\n\n    if (isPreSelected) {\n      var seriesStyle = this.generateStyle(chart.visibleSeries[series]);\n      var selectedElements = document.querySelectorAll('.' + seriesStyle);\n      this.isSeriesMode = this.currentMode === 'Series';\n      var isBlurEffectNeeded = true;\n\n      if (selectedElements.length > 0) {\n        this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n      } else {\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n          var element = _a[_i];\n\n          if (element.index !== series && !chart.isMultiSelect) {\n            seriesStyle = this.generateStyle(chart.visibleSeries[element.index]);\n            selectedElements = document.querySelectorAll('.' + seriesStyle);\n            this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n          }\n        }\n\n        var seriesElements = this.getSeriesElements(chart.visibleSeries[series]);\n\n        for (var _b = 0, seriesElements_1 = seriesElements; _b < seriesElements_1.length; _b++) {\n          var seriesElement = seriesElements_1[_b];\n          this.checkSelectionElements(seriesElement, seriesStyle, false, true, series);\n        }\n\n        this.isSeriesMode = true;\n        this.selection(chart, new Index(series, NaN), seriesElements, true);\n        this.isSeriesMode = chart.selectionMode === 'Series';\n        this.blurEffect(chart.element.id, chart.visibleSeries, true);\n      }\n    }\n  };\n\n  Selection.prototype.removeSelection = function (chart, series, selectedElements, seriesStyle, isBlurEffectNeeded) {\n    if (selectedElements.length > 0) {\n      var elements = [];\n\n      for (var i = 0; i < selectedElements.length; i++) {\n        elements.push(selectedElements[i]);\n      }\n\n      this.removeStyles(elements);\n      this.isSeriesMode = true;\n      this.addOrRemoveIndex(this.selectedDataIndexes, new Index(series, NaN));\n\n      for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n        var value = _a[_i];\n        seriesStyle = this.generateStyle(value);\n\n        if (document.querySelectorAll('.' + seriesStyle).length > 0) {\n          for (var _b = 0, elements_3 = elements; _b < elements_3.length; _b++) {\n            var element = elements_3[_b];\n            this.checkSelectionElements(element, seriesStyle, true, true, series);\n          }\n\n          isBlurEffectNeeded = false;\n          break;\n        }\n      }\n\n      if (isBlurEffectNeeded) {\n        this.isSeriesMode = chart.selectionMode === 'Series';\n        this.blurEffect(chart.element.id, chart.visibleSeries);\n      }\n    }\n  };\n  /** @private */\n\n\n  Selection.prototype.getSeriesElements = function (series) {\n    var seriesElements = [series.seriesElement];\n\n    if (series.marker.visible && series.type !== 'Scatter' && series.type !== 'Bubble' && !series.isRectSeries) {\n      seriesElements.push(series.symbolElement);\n    }\n\n    return seriesElements;\n  };\n  /** @private */\n\n\n  Selection.prototype.indexFinder = function (id) {\n    var ids = ['NaN', 'NaN'];\n\n    if (id.indexOf('SeriesGroup') > -1) {\n      ids = id.split('SeriesGroup');\n      ids[0] = ids[1];\n    } else if (id.indexOf('SymbolGroup') > -1) {\n      ids = id.split('SymbolGroup');\n      ids[0] = ids[1];\n    } else if (id.indexOf('_Point_') > -1) {\n      ids = id.split('_Series_')[1].split('_Point_');\n    } else if (id.indexOf('_Series_') > -1) {\n      ids[0] = id.split('_Series_')[1];\n    } else if (id.indexOf('_chart_legend_shape_') > -1) {\n      ids = id.split('_chart_legend_shape_');\n      ids[0] = ids[1];\n    }\n\n    return new Index(parseInt(ids[0], 10), parseInt(ids[1], 10));\n  };\n  /**\n   * Drag selection that returns the selected data.\n   * @return {void}\n   * @private\n   */\n\n\n  Selection.prototype.calculateDragSelectedElements = function (chart, dragRect, isClose) {\n    this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n    var isLasso = chart.selectionMode === 'Lasso';\n    var rect = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n    var axisOffset = new ChartLocation(chart.chartAxisLayoutPanel.seriesClipRect.x, chart.chartAxisLayoutPanel.seriesClipRect.y);\n    this.removeOffset(rect, axisOffset);\n    var points;\n    var index;\n    var selectedPointValues = [];\n    var selectedSeriesValues = [];\n    this.isSeriesMode = false;\n    var isDragResize = chart.allowMultiSelection && (this.rectGrabbing || this.resizing);\n    this.rectPoints = this.dragRectArray[isDragResize ? this.targetIndex : this.count] = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n\n    if (dragRect.width && dragRect.height && !isClose) {\n      var rt = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n      this.removeOffset(rt, axisOffset);\n      this.filterArray[isDragResize ? this.targetIndex : this.count] = rt;\n    }\n\n    var _loop_1 = function _loop_1(series) {\n      if (series.visible) {\n        points = series.points;\n        selectedPointValues = [];\n        var xAxisOffset_1;\n        var yAxisOffset_1;\n\n        if ((chart.isTransposed || series.type.indexOf('Bar') !== -1) && !(chart.isTransposed && series.type.indexOf('Bar') !== -1)) {\n          xAxisOffset_1 = series.xAxis.rect.y - axisOffset.y;\n          yAxisOffset_1 = series.yAxis.rect.x - axisOffset.x;\n        } else {\n          xAxisOffset_1 = series.xAxis.rect.x - axisOffset.x;\n          yAxisOffset_1 = series.yAxis.rect.y - axisOffset.y;\n        }\n\n        for (var j = 0; j < points.length; j++) {\n          var yValue = series.type !== 'RangeArea' ? points[j].yValue : points[j].regions[0].y;\n          var isCurrentPoint = void 0;\n          var selectedPointX = points[j].xValue;\n\n          if (chart.primaryXAxis.valueType === 'Category') {\n            selectedPointX = points[j].x.toLocaleString();\n          } else if (chart.primaryXAxis.valueType === 'DateTime') {\n            selectedPointX = new Date(points[j].xValue);\n          }\n\n          if (series.type === 'BoxAndWhisker') {\n            isCurrentPoint = points[j].regions.some(function (region) {\n              return withInBounds(region.x + xAxisOffset_1, region.y + yAxisOffset_1, rect);\n            });\n          } else {\n            if (chart.selectionMode === 'Lasso') {\n              isCurrentPoint = points[j].isSelect;\n            } else {\n              isCurrentPoint = chart.allowMultiSelection ? this_1.isPointSelect(points[j], xAxisOffset_1, yAxisOffset_1, this_1.filterArray, axisOffset) : points[j].symbolLocations.some(function (location) {\n                return location && withInBounds(location.x + xAxisOffset_1, location.y + yAxisOffset_1, rect);\n              });\n            }\n          }\n\n          if (isCurrentPoint && series.category !== 'Indicator') {\n            index = new Index(series.index, points[j].index);\n            this_1.selection(chart, index, this_1.findElements(chart, series, index));\n            selectedPointValues.push({\n              x: selectedPointX,\n              y: yValue\n            });\n          }\n\n          if (isCurrentPoint && series.type === 'RangeArea') {\n            selectedPointValues.push({\n              x: selectedPointX,\n              y: points[j].regions[0].y\n            });\n          }\n        }\n\n        selectedSeriesValues.push(selectedPointValues);\n      }\n    };\n\n    var this_1 = this;\n\n    for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n      var series = _a[_i];\n\n      _loop_1(series);\n    }\n\n    this.blurEffect(chart.element.id, chart.visibleSeries);\n    var x = isLasso ? chart.mouseDownX : dragRect.x + dragRect.width;\n    var y = isLasso ? chart.mouseDownY : dragRect.y;\n\n    if (!isClose) {\n      this.createCloseButton(x, y);\n    }\n\n    var args = {\n      name: dragComplete,\n      selectedDataValues: selectedSeriesValues,\n      cancel: false\n    };\n    chart.trigger(dragComplete, args);\n  };\n\n  Selection.prototype.removeOffset = function (rect, clip) {\n    rect.x -= clip.x;\n    rect.y -= clip.y;\n  };\n\n  Selection.prototype.isPointSelect = function (points, xAxisOffset, yAxisOffset, rectCollection, axisOffset) {\n    var location = points.symbolLocations[0];\n\n    for (var _i = 0, rectCollection_1 = rectCollection; _i < rectCollection_1.length; _i++) {\n      var rect = rectCollection_1[_i];\n\n      if (rect && location && withInBounds(location.x + xAxisOffset, location.y + yAxisOffset, rect)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Method to draw dragging rect.\n   * @return {void}\n   * @private\n   */\n\n\n  Selection.prototype.drawDraggingRect = function (chart, dragRect, target) {\n    var cartesianLayout = chart.chartAxisLayoutPanel.seriesClipRect;\n    var border = chart.chartArea.border.width;\n    var rectFill = chart.themeStyle.selectionRectFill;\n    var rectStroke = chart.themeStyle.selectionRectStroke;\n    var isLasso = chart.selectionMode === 'Lasso';\n\n    if (this.isdrawRect) {\n      cartesianLayout.x = cartesianLayout.x - border / 2;\n      cartesianLayout.y = cartesianLayout.y - border / 2;\n      cartesianLayout.width = cartesianLayout.width + border;\n      cartesianLayout.height = cartesianLayout.height + border;\n      this.isdrawRect = false;\n    }\n\n    switch (chart.selectionMode) {\n      case 'DragX':\n        dragRect.y = cartesianLayout.y;\n        dragRect.height = cartesianLayout.height;\n        break;\n\n      case 'DragY':\n        dragRect.x = cartesianLayout.x;\n        dragRect.width = cartesianLayout.width;\n        break;\n    }\n\n    if ((dragRect.width < 5 || dragRect.height < 5) && !isLasso) {\n      return null;\n    }\n\n    var isDragMode = chart.selectionMode.indexOf('Drag') > -1 || chart.selectionMode === 'Lasso';\n\n    if (chart.allowMultiSelection && isDragMode) {\n      var element = void 0;\n      var dragGroup = void 0;\n      var multiGroup = getElement(this.multiRectGroup);\n\n      if (!multiGroup) {\n        multiGroup = chart.svgRenderer.createGroup({\n          id: this.multiRectGroup\n        });\n        chart.svgObject.appendChild(multiGroup);\n      }\n\n      if (this.rectGrabbing || this.resizing) {\n        var rectElement = void 0;\n        rectElement = getElement(this.draggedRect + this.targetIndex);\n\n        if (rectElement.nextSibling) {\n          remove(rectElement.nextSibling);\n        }\n\n        this.setAttributes(rectElement, dragRect);\n      } else if (!getElement(this.draggedRectGroup + this.count)) {\n        dragGroup = chart.svgRenderer.createGroup({\n          id: this.draggedRectGroup + this.count\n        });\n        var svgElement = document.getElementById(chart.element.id + '_series_svg');\n        chart.enableCanvas ? svgElement.appendChild(dragGroup) : multiGroup.appendChild(dragGroup);\n      }\n\n      if (!(chart.selectionMode === 'Lasso')) {\n        element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect + this.count, rectFill, {\n          color: rectStroke,\n          width: 1\n        }, 1, dragRect));\n        element.setAttribute('style', 'cursor:move;');\n      } else {\n        element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath + this.count, rectFill, 3, rectStroke, 1, '', this.path));\n      }\n\n      if (!dragGroup && !this.rectGrabbing && !this.resizing) {\n        getElement(this.draggedRectGroup + this.count).appendChild(element);\n      } else if (!this.rectGrabbing && !this.resizing) {\n        dragGroup.appendChild(element);\n      }\n    } else {\n      var element = isLasso ? getElement(this.lassoPath) : getElement(this.draggedRect);\n\n      if (this.closeIcon) {\n        removeElement(this.closeIconId);\n      }\n\n      if (element) {\n        if (isLasso) {\n          element.setAttribute('d', this.path);\n        } else {\n          this.setAttributes(element, dragRect);\n        }\n      } else {\n        var dragGroup = chart.svgRenderer.createGroup({\n          id: this.draggedRectGroup\n        });\n        var svgElement = document.getElementById(chart.element.id + '_series_svg');\n        chart.enableCanvas ? svgElement.appendChild(dragGroup) : chart.svgObject.appendChild(dragGroup);\n\n        if (!(chart.selectionMode === 'Lasso')) {\n          element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect, rectFill, {\n            color: rectStroke,\n            width: 1\n          }, 1, dragRect));\n        } else {\n          element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath, rectFill, 3, rectStroke, 1, '', this.path));\n        } //element.setAttribute('style', 'cursor:move;');\n\n\n        dragGroup.appendChild(element);\n      }\n    }\n  };\n  /**\n   * To get drag selected group element index from its id\n   * @param id\n   */\n\n\n  Selection.prototype.getIndex = function (id) {\n    var i;\n\n    for (i = id.length - 1; i > 0; i--) {\n      var x = Number(id[i]);\n\n      if (!isNaN(x)) {\n        continue;\n      } else {\n        break;\n      }\n    }\n\n    var index = +id.substr(i + 1, id.length - 1);\n    return index;\n  };\n\n  Selection.prototype.createCloseButton = function (x, y) {\n    var isMultiDrag = this.chart.allowMultiSelection;\n    var circleStroke = this.chart.themeStyle.selectionCircleStroke;\n    var isDrag = this.rectGrabbing || this.resizing;\n    var closeIcon = this.chart.svgRenderer.createGroup({\n      id: this.closeIconId + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''),\n      style: 'cursor:pointer; visibility: visible;'\n    });\n    closeIcon.appendChild(this.chart.svgRenderer.drawCircle(new CircleOption(this.closeIconId + '_circle' + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''), '#FFFFFF', {\n      color: circleStroke,\n      width: 1\n    }, 1, x, y, 10)));\n    var direction = 'M ' + (x - 4) + ' ' + (y - 4) + ' L ' + (x + 4) + ' ' + (y + 4) + ' M ' + (x - 4) + ' ' + (y + 4) + ' L ' + (x + 4) + ' ' + (y - 4);\n    closeIcon.appendChild(this.chart.svgRenderer.drawPath({\n      id: this.closeIconId + '_cross' + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''),\n      d: direction,\n      stroke: circleStroke,\n      'stroke-width': 2,\n      fill: circleStroke\n    }, null));\n    this.closeIcon = closeIcon;\n    var pathElement = getElement(this.draggedRectGroup + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''));\n\n    if (pathElement) {\n      pathElement.appendChild(closeIcon);\n    }\n  };\n  /**\n   * Method to remove dragged element.\n   * @return {void}\n   * @private\n   */\n\n\n  Selection.prototype.removeDraggedElements = function (chart, event) {\n    if (event.target.id.indexOf(this.closeIconId) > -1 && event.type.indexOf('move') === -1) {\n      var isSelectedvalues = true;\n\n      if (chart.allowMultiSelection) {\n        var index = this.getIndex(event.target.id);\n        var multiRectGroupElement = getElement(this.multiRectGroup);\n        remove(getElement(this.draggedRectGroup + index));\n        this.dragRectArray[index] = null;\n        this.filterArray[index] = null;\n        this.totalSelectedPoints[index] = null;\n\n        if (multiRectGroupElement && multiRectGroupElement.childElementCount === 0) {\n          removeElement(multiRectGroupElement);\n          this.dragRectArray = [];\n          this.filterArray = [];\n          this.totalSelectedPoints = [];\n        }\n\n        if (this.currentMode === 'Lasso') {\n          if (this.multiDataIndexes[index] != null) {\n            for (var i = 0; i < this.multiDataIndexes[index].length; i++) {\n              this.multiDataIndexes[index][i].isSelect = false;\n            }\n          }\n\n          this.multiDataIndexes[index] = null;\n\n          for (var j = 0; j < this.multiDataIndexes.length; j++) {\n            if (this.multiDataIndexes[j] != null) {\n              isSelectedvalues = false;\n\n              for (var k = 0; k < this.multiDataIndexes[j].length; k++) {\n                this.multiDataIndexes[j][k].isSelect = true;\n              }\n            }\n          }\n\n          this.calculateDragSelectedElements(chart, this.dragRect, true);\n        } else if (this.filterArray.length) {\n          for (var i = 0; i < this.filterArray.length; i++) {\n            if (this.filterArray[i]) {\n              isSelectedvalues = false;\n              this.calculateDragSelectedElements(chart, this.filterArray[i], true);\n            }\n          }\n        } else {\n          this.calculateDragSelectedElements(chart, new Rect(0, 0, 0, 0), true);\n        }\n      } else {\n        remove(getElement(this.draggedRectGroup));\n        this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n      }\n\n      this.blurEffect(chart.element.id, chart.visibleSeries);\n      this.changeCursorStyle(false, chart.svgObject, 'auto');\n\n      if (!chart.allowMultiSelection || isSelectedvalues) {\n        this.rectPoints = null;\n      }\n    }\n  };\n  /**\n   * Method to resize the drag rect.\n   * @return {void}\n   * @private\n   */\n\n\n  Selection.prototype.resizingSelectionRect = function (chart, location, tapped, target) {\n    var rect;\n\n    if (chart.allowMultiSelection && target.id.indexOf('_ej2_drag_rect') > -1 || this.dragRectArray[this.targetIndex]) {\n      if (target.id.indexOf('_ej2_drag_rect') > -1) {\n        this.targetIndex = this.getIndex(target.id);\n      }\n\n      var r = this.dragRectArray[this.targetIndex];\n      rect = new Rect(r.x, r.y, r.width, r.height);\n    }\n\n    if (!chart.allowMultiSelection) {\n      rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n    }\n\n    if (rect) {\n      var resize = this.findResizeMode(chart.svgObject, rect, location);\n\n      if (this.resizing) {\n        rect = getDraggedRectLocation(rect.x, rect.y, rect.x + rect.width, rect.y + rect.height, chart.chartAxisLayoutPanel.seriesClipRect);\n        this.drawDraggingRect(chart, rect);\n        this.dragRect = rect;\n      }\n\n      if (tapped) {\n        this.resizing = resize;\n      }\n    } else {\n      return;\n    }\n  };\n\n  Selection.prototype.findResizeMode = function (chartSvgObject, rect, location) {\n    var cursorStyle = 'se-resize';\n    var resize = false;\n\n    if (!this.resizing) {\n      var resizeEdges = [new Rect(rect.x, rect.y, rect.width - 5, 5), new Rect(rect.x, rect.y, 5, rect.height), new Rect(rect.x, rect.y + rect.height - 5, rect.width - 5, 5), new Rect(rect.x + rect.width - 5, rect.y + 5, 5, rect.height - 15), new Rect(rect.x + rect.width - 10, rect.y + rect.height - 10, 10, 10)]; //corner\n\n      for (var i = 0; i < resizeEdges.length; i++) {\n        if (withInBounds(location.x, location.y, resizeEdges[i])) {\n          cursorStyle = i === 4 ? cursorStyle : i % 2 === 0 ? 'ns-resize' : 'ew-resize';\n          resize = true;\n          this.resizeMode = i;\n          break;\n        }\n      }\n    } else {\n      var x = rect.x;\n      var y = rect.y;\n      var width = location.x - x;\n      var height = location.y - y;\n\n      switch (this.resizeMode) {\n        case 0:\n          height = Math.abs(rect.height + rect.y - location.y);\n          rect.y = Math.min(rect.height + rect.y, location.y);\n          rect.height = height;\n          break;\n\n        case 1:\n          width = Math.abs(rect.width + rect.x - location.x);\n          rect.x = Math.min(rect.width + rect.x, location.x);\n          rect.width = width;\n          break;\n\n        case 2:\n          rect.height = Math.abs(height);\n          rect.y = Math.min(location.y, y);\n          break;\n\n        case 3:\n          rect.width = Math.abs(width);\n          rect.x = Math.min(location.x, x);\n          break;\n\n        case 4:\n          rect.width = Math.abs(width);\n          rect.height = Math.abs(height);\n          rect.x = Math.min(location.x, x);\n          rect.y = Math.min(location.y, y);\n          break;\n      }\n    }\n\n    if (this.currentMode !== 'Lasso') {\n      this.changeCursorStyle(resize, getElement(this.chart.allowMultiSelection ? this.draggedRect + this.targetIndex : this.draggedRect), cursorStyle);\n    }\n\n    this.changeCursorStyle(resize, chartSvgObject, cursorStyle);\n    return resize;\n  };\n\n  Selection.prototype.changeCursorStyle = function (isResize, rectelement, cursorStyle) {\n    cursorStyle = isResize ? cursorStyle : this.control.svgObject === rectelement ? 'auto' : 'move';\n\n    if (rectelement) {\n      rectelement.setAttribute('style', 'cursor:' + cursorStyle + ';');\n    }\n  };\n\n  Selection.prototype.removeSelectedElements = function (chart, index, seriesCollection) {\n    index.splice(0, index.length);\n    var seriesElements;\n\n    for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {\n      var series = seriesCollection_1[_i];\n      seriesElements = this.getSeriesElements(series);\n      this.removeStyles(seriesElements);\n\n      for (var _a = 0, seriesElements_2 = seriesElements; _a < seriesElements_2.length; _a++) {\n        var seriesElement = seriesElements_2[_a];\n        this.removeStyles(this.getChildren(seriesElement));\n      }\n    }\n  };\n\n  Selection.prototype.setAttributes = function (ele, object) {\n    var keys = Object.keys(object);\n\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n      var key = keys_1[_i];\n      ele.setAttribute(key, object[key]);\n    }\n  };\n  /**\n   * Method to move the dragged rect.\n   * @return {void}\n   * @private\n   */\n\n\n  Selection.prototype.draggedRectMoved = function (chart, grabbedPoint, doDrawing, target) {\n    var rect;\n\n    if ((this.resizing || this.rectGrabbing) && chart.allowMultiSelection) {\n      var r = this.dragRectArray[this.targetIndex];\n      rect = new Rect(r.x, r.y, r.width, r.height);\n    } else {\n      rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n    }\n\n    rect.x -= grabbedPoint.x - chart.mouseX;\n    rect.y -= grabbedPoint.y - chart.mouseY;\n    rect = getDraggedRectLocation(rect.x, rect.y, rect.x + rect.width, rect.height + rect.y, chart.chartAxisLayoutPanel.seriesClipRect);\n\n    if (doDrawing) {\n      this.drawDraggingRect(chart, rect, target);\n    } else {\n      this.calculateDragSelectedElements(chart, rect);\n    }\n  };\n  /**\n   * To complete the selection.\n   * @return {void}\n   * @private\n   */\n\n\n  Selection.prototype.completeSelection = function (e) {\n    var chart = this.chart;\n\n    if (chart.selectionMode === 'None') {\n      return;\n    }\n\n    this.currentMode = chart.selectionMode;\n\n    if ((this.dragging || this.resizing) && this.dragRect.width > 5 && this.dragRect.height > 5) {\n      this.calculateDragSelectedElements(chart, this.dragRect);\n    } else if (!chart.allowMultiSelection && this.rectGrabbing && this.rectPoints.width && this.rectPoints.height) {\n      this.draggedRectMoved(chart, this.dragRect);\n    } else if (this.rectGrabbing && this.dragRectArray[this.targetIndex].width && this.dragRectArray[this.targetIndex].height) {\n      this.draggedRectMoved(chart, this.dragRect);\n    }\n\n    if (chart.selectionMode === 'Lasso' && this.dragging && this.path) {\n      if (this.path.indexOf('L') !== -1) {\n        if (!chart.allowMultiSelection) {\n          getElement(this.lassoPath).setAttribute('d', this.path + 'Z');\n          this.pointChecking(getElement(this.lassoPath));\n        } else if (getElement(this.lassoPath + this.count)) {\n          getElement(this.lassoPath + this.count).setAttribute('d', this.path + 'Z');\n          this.pointChecking(getElement(this.lassoPath + this.count));\n        }\n\n        if (this.dragging || this.resizing) {\n          this.calculateDragSelectedElements(chart, this.dragRect);\n        }\n      }\n    }\n\n    this.dragging = false;\n    this.rectGrabbing = false;\n    this.resizing = false;\n    this.removeDraggedElements(chart, e);\n  };\n\n  Selection.prototype.getDragRect = function (chart, seriesClipRect) {\n    return getDraggedRectLocation(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY, seriesClipRect);\n  };\n  /** @private */\n\n\n  Selection.prototype.dragStart = function (chart, seriesClipRect, mouseDownX, mouseDownY, event) {\n    var mode = chart.selectionMode;\n    this.currentMode = chart.selectionMode;\n    this.dragging = (mode.indexOf('Drag') > -1 || mode === 'Lasso') && (chart.isDoubleTap || !chart.isTouch) && chart.chartAreaType !== 'PolarRadar';\n    var target = event.target;\n    this.path = undefined;\n\n    if (this.dragging) {\n      this.count = getElement(this.multiRectGroup) ? this.count + 1 : 0;\n      this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n\n      if (chart.mouseDownX < seriesClipRect.x || chart.mouseDownX > seriesClipRect.x + seriesClipRect.width || chart.mouseDownY < seriesClipRect.y || chart.mouseDownY > seriesClipRect.y + seriesClipRect.height) {\n        this.dragging = false;\n      }\n    }\n\n    if (mode === 'Lasso') {\n      for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n        var series = _a[_i];\n\n        if (series.visible) {\n          for (var _b = 0, _c = series.points; _b < _c.length; _b++) {\n            var point = _c[_b];\n\n            if (!chart.allowMultiSelection) {\n              point.isSelect = false;\n            }\n          }\n        }\n      }\n    }\n\n    if (!(mode === 'Lasso')) {\n      if (this.rectPoints && !chart.allowMultiSelection) {\n        this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n        this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true);\n        this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.rectPoints);\n      }\n\n      if (chart.allowMultiSelection) {\n        var index = this.getIndex(target.id);\n        this.targetIndex = this.isDragRect(target.id) ? index : undefined;\n\n        if (this.dragRectArray.length && this.isDragRect(target.id)) {\n          this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true, target);\n          this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.dragRectArray[index]);\n        }\n      }\n    }\n  };\n\n  Selection.prototype.isDragRect = function (id) {\n    return id.indexOf('_ej2_drag_rect') > -1;\n  };\n  /** @private */\n\n\n  Selection.prototype.mouseMove = function (event) {\n    var chart = this.chart;\n    var target = event.target;\n\n    if (chart.highlightMode !== 'None') {\n      if (!isNullOrUndefined(target)) {\n        if (event.target.id.indexOf('text') > 1) {\n          target = getElement(event.target.id.replace('text', 'shape'));\n        }\n\n        if (target.hasAttribute('class') && (target.getAttribute('class').indexOf('highlight') > -1 || target.getAttribute('class').indexOf('selection') > -1)) {\n          return;\n        }\n\n        this.calculateSelectedElements(event);\n        return;\n      }\n    }\n\n    if (chart.selectionMode === 'None') {\n      return;\n    }\n\n    if (event.type === 'touchmove' && (Browser.isIos || Browser.isIos7) && this.dragging && event.preventDefault) {\n      event.preventDefault();\n    }\n\n    var insideMoving = withInBounds(chart.mouseX, chart.mouseY, chart.chartAxisLayoutPanel.seriesClipRect);\n\n    if (insideMoving) {\n      if (this.rectGrabbing && !this.resizing) {\n        this.draggedRectMoved(chart, this.dragRect, true, target);\n      } else if (this.dragging && !this.resizing) {\n        if (chart.selectionMode === 'Lasso') {\n          this.getPath(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY);\n          this.drawDraggingRect(chart, this.dragRect, target);\n        } else {\n          this.dragRect = this.getDragRect(chart, chart.chartAxisLayoutPanel.seriesClipRect);\n          this.drawDraggingRect(chart, this.dragRect, target);\n        }\n      }\n\n      if (this.rectPoints && !chart.allowMultiSelection) {\n        this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n      } else if (chart.allowMultiSelection && !this.dragging || this.resizing) {\n        this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n      }\n    } else {\n      this.completeSelection(event);\n    }\n  };\n\n  Selection.prototype.getPath = function (startX, startY, endX, endY) {\n    if (this.dragging) {\n      if (this.path) {\n        this.path = this.path + ' L' + endX + ' ' + endY;\n      } else {\n        this.path = 'M ' + startX + ' ' + startY;\n      }\n    }\n  };\n\n  Selection.prototype.pointChecking = function (path) {\n    var _this = this;\n\n    var chart = this.chart;\n    var element;\n    var svgRect = getElement(chart.svgId).getBoundingClientRect();\n    var offsetX = chart.chartAxisLayoutPanel.seriesClipRect.x + Math.max(svgRect.left, 0);\n    var offsetY = chart.chartAxisLayoutPanel.seriesClipRect.y + Math.max(svgRect.top, 0);\n    this.multiDataIndexes[this.count] = [];\n\n    for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n      var series = _a[_i];\n      series.points.filter(function (point) {\n        // To check whether the point have symbol location value or not.\n        if (point.symbolLocations && point.symbolLocations.length) {\n          element = document.elementFromPoint(point.symbolLocations[0].x + offsetX, point.symbolLocations[0].y + offsetY);\n        }\n\n        if (element === path) {\n          point.isSelect = true;\n\n          if (_this.chart.allowMultiSelection && _this.currentMode === 'Lasso') {\n            _this.multiDataIndexes[_this.count][_this.seriesIndex] = point;\n            _this.seriesIndex++;\n          }\n        } else if (!chart.allowMultiSelection) {\n          point.isSelect = false;\n        }\n      });\n    }\n\n    this.seriesIndex = 0;\n  };\n  /**\n   * Get module name.\n   * @private\n   */\n\n\n  Selection.prototype.getModuleName = function () {\n    return 'Selection';\n  };\n  /**\n   * To destroy the selection.\n   * @return {void}\n   * @private\n   */\n\n\n  Selection.prototype.destroy = function (chart) {\n    this.removeEventListener(); // Destroy method performed here\n  };\n\n  return Selection;\n}(BaseSelection);\n\nexport { Selection };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Browser","remove","extend","isNullOrUndefined","ChartLocation","RectOption","CircleOption","withInBounds","getDraggedRectLocation","removeElement","getElement","Rect","PathOption","Index","dragComplete","selectionComplete","BaseSelection","Selection","_super","chart","_this","call","isdrawRect","multiDataIndexes","pathIndex","seriesIndex","count","dragRectArray","filterArray","totalSelectedPoints","renderer","mode","selectionMode","isMultiDrag","isMultiSelect","indexOf","addEventListener","isDestroyed","stockChart","onPanning","cancelEvent","isPointer","on","touchMoveEvent","mouseMove","completeSelection","calculateSelectedElements","touchStartEvent","mousedown","touchEndEvent","e","isPointMouseDown","isChartDrag","isDoubleTap","isTouch","rectPoints","dragStart","chartAxisLayoutPanel","seriesClipRect","mouseDownX","mouseDownY","removeEventListener","off","initPrivateVariables","styleId","element","id","unselected","closeIconId","draggedRectGroup","multiRectGroup","draggedRect","lassoPath","selectedDataIndexes","isSeriesMode","invokeSelection","series","visibleSeries","seriesStyles","currentMode","selectDataIndex","concatIndexes","generateStyle","unSelectedStyle","highlightMode","nonHighlightStyle","selectionStyle","index","indexes","_i","indexes_1","length","performSelection","getElementByIndex","suffix","elementId","point","isRectSeries","type","marker","visible","getClusterElements","clusters","seriesStyle","selectedElements","_a","push","document","querySelectorAll","findTrackballElements","removeSelection","className","trackballElements","elements","i","parentNode","slice","i_1","removeStyles","findElements","getSeriesElements","isAlreadySelected","event","targetElem","target","highlightDataIndexes","previousSelectedEle","parentNodeId","isElement","hasAttribute","getAttribute","removeAttribute","addOrRemoveIndex","indexFinder","targetElement","split","selectionEle","blurEffect","selection","isNaN","clusterSelection","points","pointIndex","selectedPointValues","yValue","selectedPointX","regions","y","xValue","primaryXAxis","valueType","x","toLocaleString","Date","category","args","name","selectedDataValues","cancel","trigger","legendClick","removeMultiSelectElements","isAdd","pClassName","getSelectionClass","applyStyles","currentIndex","seriesCollection","toEquals","splice","chartId","visibility","checkVisibility","visibleSeries_1","checkSelectionElements","children","childNodes","elementClassName","parentClassName","legendShape","selectElement","addSvgClass","removeSvgClass","classList","symbolEle","control","seriesClassName","legendModule","legendSettings","trim","elements_1","elements_2","first","second","checkSeriesOnly","redrawSelection","oldMode","removeSelectedElements","legendSelection","replace","isPreSelected","isBlurEffectNeeded","seriesElements","_b","seriesElements_1","seriesElement","NaN","value","elements_3","symbolElement","ids","parseInt","calculateDragSelectedElements","dragRect","isClose","isLasso","rect","width","height","axisOffset","removeOffset","selectedSeriesValues","isDragResize","allowMultiSelection","rectGrabbing","resizing","targetIndex","rt","_loop_1","xAxisOffset_1","yAxisOffset_1","isTransposed","xAxis","yAxis","j","isCurrentPoint","some","region","isSelect","this_1","isPointSelect","symbolLocations","location","createCloseButton","clip","xAxisOffset","yAxisOffset","rectCollection","rectCollection_1","drawDraggingRect","cartesianLayout","border","chartArea","rectFill","themeStyle","selectionRectFill","rectStroke","selectionRectStroke","isDragMode","dragGroup","multiGroup","svgRenderer","createGroup","svgObject","appendChild","rectElement","nextSibling","setAttributes","svgElement","getElementById","enableCanvas","drawRectangle","color","setAttribute","drawPath","path","closeIcon","getIndex","Number","substr","circleStroke","selectionCircleStroke","isDrag","style","drawCircle","direction","stroke","fill","pathElement","removeDraggedElements","isSelectedvalues","multiRectGroupElement","childElementCount","k","changeCursorStyle","resizingSelectionRect","tapped","r","resize","findResizeMode","chartSvgObject","cursorStyle","resizeEdges","resizeMode","Math","abs","min","isResize","rectelement","seriesCollection_1","seriesElements_2","getChildren","ele","object","keys","keys_1","key","draggedRectMoved","grabbedPoint","doDrawing","mouseX","mouseY","dragging","pointChecking","getDragRect","chartAreaType","undefined","_c","isDragRect","isIos","isIos7","preventDefault","insideMoving","getPath","startX","startY","endX","endY","svgRect","svgId","getBoundingClientRect","offsetX","max","left","offsetY","top","filter","elementFromPoint","getModuleName","destroy"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-charts/src/chart/user-interaction/selection.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * Selection src file\n */\nimport { Browser } from '@syncfusion/ej2-base';\nimport { remove } from '@syncfusion/ej2-base';\nimport { extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { ChartLocation, RectOption, CircleOption, withInBounds, getDraggedRectLocation, removeElement, getElement } from '../../common/utils/helper';\nimport { Rect, PathOption } from '@syncfusion/ej2-svg-base';\nimport { Index } from '../../common/model/base';\nimport { dragComplete, selectionComplete } from '../../common/model/constants';\nimport { BaseSelection } from '../../common/user-interaction/selection';\n// tslint:disable:no-string-literal\n/**\n * `Selection` module handles the selection for chart.\n * @private\n */\nvar Selection = /** @class */ (function (_super) {\n    __extends(Selection, _super);\n    /**\n     * Constructor for selection module.\n     * @private.\n     */\n    function Selection(chart) {\n        var _this = _super.call(this, chart) || this;\n        _this.isdrawRect = true;\n        _this.multiDataIndexes = [];\n        _this.pathIndex = 0;\n        _this.seriesIndex = 0;\n        _this.count = -1;\n        _this.dragRectArray = [];\n        _this.filterArray = [];\n        _this.totalSelectedPoints = [];\n        _this.chart = chart;\n        _this.renderer = chart.renderer;\n        var mode = chart.selectionMode;\n        _this.isMultiDrag = chart.isMultiSelect && (mode.indexOf('Drag') > -1);\n        _this.addEventListener();\n        return _this;\n    }\n    /**\n     * Binding events for selection module.\n     */\n    Selection.prototype.addEventListener = function () {\n        if (this.chart.isDestroyed || (this.chart.stockChart && this.chart.stockChart.onPanning)) {\n            return;\n        }\n        var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n        this.chart.on(Browser.touchMoveEvent, this.mouseMove, this);\n        this.chart.on(cancelEvent, this.completeSelection, this);\n        this.chart.on('click', this.calculateSelectedElements, this);\n        this.chart.on(Browser.touchStartEvent, this.mousedown, this);\n        this.chart.on(Browser.touchEndEvent, this.completeSelection, this);\n    };\n    /**\n     * Chart mouse down\n     */\n    Selection.prototype.mousedown = function (e) {\n        var chart = this.chart;\n        if (chart.isPointMouseDown || chart.selectionMode === 'None' || chart.isChartDrag) {\n            return;\n        }\n        if (chart.isDoubleTap || !chart.isTouch || this.rectPoints) {\n            this.dragStart(chart, chart.chartAxisLayoutPanel.seriesClipRect, chart.mouseDownX, chart.mouseDownY, e);\n        }\n    };\n    /**\n     * UnBinding events for selection module.\n     */\n    Selection.prototype.removeEventListener = function () {\n        if (this.chart.isDestroyed) {\n            return;\n        }\n        this.chart.off(Browser.touchMoveEvent, this.mouseMove);\n        this.chart.off('pointerleave' || 'mouseleave', this.completeSelection);\n        this.chart.off('click', this.calculateSelectedElements);\n        this.chart.off(Browser.touchStartEvent, this.mousedown);\n        this.chart.off(Browser.touchEndEvent, this.completeSelection);\n    };\n    /**\n     * To find private variable values\n     */\n    Selection.prototype.initPrivateVariables = function (chart) {\n        this.styleId = chart.element.id + '_ej2_chart_selection';\n        this.unselected = chart.element.id + '_ej2_deselected';\n        this.closeIconId = chart.element.id + '_ej2_drag_close';\n        this.draggedRectGroup = chart.element.id + '_ej2_drag_group';\n        this.multiRectGroup = chart.element.id + '_ej2_drag_multi_group';\n        this.draggedRect = chart.element.id + '_ej2_drag_rect';\n        this.lassoPath = chart.element.id + '_ej2_drag_path';\n        this.selectedDataIndexes = [];\n        this.rectPoints = null;\n        this.isSeriesMode = chart.selectionMode === 'Series';\n    };\n    /**\n     * Method to select the point and series.\n     * @return {void}\n     */\n    Selection.prototype.invokeSelection = function (chart) {\n        this.initPrivateVariables(chart);\n        this.series = extend({}, chart.visibleSeries, null, true);\n        this.seriesStyles();\n        this.currentMode = chart.selectionMode;\n        if (!(chart.selectionMode.indexOf('Drag') > -1)) {\n            this.selectDataIndex(chart, this.concatIndexes(chart.selectedDataIndexes, this.selectedDataIndexes));\n        }\n    };\n    Selection.prototype.generateStyle = function (series) {\n        if (series) {\n            if (this.styleId.indexOf('selection') > 1 && this.chart.selectionMode !== 'None') {\n                this.unselected = series.unSelectedStyle || this.unselected;\n            }\n            if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightMode !== 'None') {\n                this.unselected = series.nonHighlightStyle || this.unselected;\n            }\n            return (series.selectionStyle || this.styleId + '_series_' + series.index);\n        }\n        return 'undefined';\n    };\n    /**\n     *  Method to get the selected data index\n     * @private.\n     */\n    Selection.prototype.selectDataIndex = function (chart, indexes) {\n        for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {\n            var index = indexes_1[_i];\n            this.performSelection(index, chart, this.getElementByIndex(chart, index)[0]);\n        }\n    };\n    /**\n     *  Method to get the selected index element\n     * @private.\n     */\n    Selection.prototype.getElementByIndex = function (chart, index, suffix) {\n        if (suffix === void 0) { suffix = ''; }\n        var elementId = chart.element.id + '_Series_' + index.series + '_Point' + '_' + index.point;\n        var series = chart.series[index.series];\n        elementId = (!series.isRectSeries && series.type !== 'Scatter' && series.type !== 'Bubble' &&\n            series.marker.visible) ? (elementId + '_Symbol' + suffix) : elementId;\n        return [getElement(elementId), (series.type === 'RangeArea' && series.marker.visible) ? getElement(elementId + '1') : null];\n    };\n    /**\n     *  Method to get the selected cluster element\n     * @private.\n     */\n    Selection.prototype.getClusterElements = function (chart, index) {\n        var clusters = [];\n        var seriesStyle;\n        var selectedElements;\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            index = new Index(series.index, index.point);\n            clusters.push(this.getElementByIndex(chart, index)[0]);\n            seriesStyle = this.generateStyle(chart.visibleSeries[index.series]);\n            selectedElements = document.querySelectorAll('.' + seriesStyle);\n            this.findTrackballElements(selectedElements, seriesStyle);\n            if (!chart.isMultiSelect && selectedElements.length > 0 && selectedElements[0].id !== clusters[index.series].id) {\n                this.removeSelection(chart, index.series, selectedElements, seriesStyle, true);\n            }\n        }\n        return clusters;\n    };\n    /**\n     *  Method to get trackball elements\n     * @private.\n     */\n    Selection.prototype.findTrackballElements = function (selectedElements, className) {\n        var trackballElements;\n        var elements;\n        for (var i = 0; i < selectedElements.length; i++) {\n            if (!isNullOrUndefined(selectedElements[i])) {\n                trackballElements = !isNullOrUndefined(selectedElements[i].parentNode) ?\n                    [].slice.call(selectedElements[0].parentNode.querySelectorAll('.' + className)) : [];\n                if (trackballElements.length > 0) {\n                    elements = [];\n                    for (var i_1 = 0; i_1 < trackballElements.length; i_1++) {\n                        if (trackballElements[i_1].id.indexOf('Trackball') > -1) {\n                            elements.push(trackballElements[i_1]);\n                        }\n                    }\n                    this.removeStyles(elements);\n                }\n            }\n        }\n    };\n    /**\n     *  Method to get the selected element\n     * @private.\n     */\n    Selection.prototype.findElements = function (chart, series, index, suffix) {\n        if (suffix === void 0) { suffix = ''; }\n        if (this.isSeriesMode) {\n            return this.getSeriesElements(series);\n        }\n        else if (this.currentMode === 'Cluster') {\n            return this.getClusterElements(chart, index);\n        }\n        else {\n            return this.getElementByIndex(chart, index, suffix);\n        }\n    };\n    /**\n     * To find the selected element.\n     * @return {void}\n     * @private\n     */\n    Selection.prototype.isAlreadySelected = function (event) {\n        var targetElem = event.target;\n        if (event.type === 'click') {\n            this.currentMode = this.chart.selectionMode;\n            this.styleId = this.chart.element.id + '_ej2_chart_selection';\n        }\n        else if (event.type === 'mousemove') {\n            this.currentMode = this.chart.highlightMode;\n            this.highlightDataIndexes = [];\n            this.styleId = this.chart.element.id + '_ej2_chart_highlight';\n        }\n        if (this.chart.highlightMode !== 'None' && this.chart.selectionMode === 'None') {\n            if (event.type === 'click') {\n                return false;\n            }\n        }\n        if ((this.chart.highlightMode !== 'None' && this.previousSelectedEle && this.previousSelectedEle[0])) {\n            var parentNodeId = targetElem.parentNode.id;\n            var isElement = void 0;\n            if (targetElem.parentNode) {\n                isElement = (parentNodeId.indexOf('SeriesGroup') > 0 || parentNodeId.indexOf('SymbolGroup') > 0) ? true : false;\n            }\n            for (var i = 0; i < this.previousSelectedEle.length; i++) {\n                if (this.previousSelectedEle[i].hasAttribute('class')) {\n                    if (this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1 &&\n                        (isElement || event.type === 'click')) {\n                        this.previousSelectedEle[i].removeAttribute('class');\n                        this.addOrRemoveIndex(this.highlightDataIndexes, this.indexFinder(this.previousSelectedEle[i].id));\n                    }\n                    else if (!isElement && this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1) {\n                        this.performSelection(this.indexFinder(this.previousSelectedEle[i].id), this.chart, this.previousSelectedEle[i]);\n                    }\n                }\n            }\n        }\n        return true;\n    };\n    /**\n     * To find the selected element.\n     * @return {void}\n     * @private\n     */\n    Selection.prototype.calculateSelectedElements = function (event) {\n        if (isNullOrUndefined(event.target)) {\n            return;\n        }\n        var targetElement = event.target;\n        if ((this.chart.selectionMode === 'None' && this.chart.highlightMode === 'None') ||\n            targetElement.id.indexOf(this.chart.element.id + '_') === -1) {\n            return;\n        }\n        if (event.type === 'mousemove') {\n            if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 ||\n                targetElement.getAttribute('class').indexOf('selection') > -1)) {\n                return;\n            }\n            if (!isNullOrUndefined(targetElement.parentNode) && targetElement.parentNode.hasAttribute('class') &&\n                (targetElement.parentNode.getAttribute('class').indexOf('highlight') > 0 ||\n                    targetElement.parentNode.getAttribute('class').indexOf('selection') > 0)) {\n                return;\n            }\n        }\n        this.isAlreadySelected(event);\n        if (targetElement.id.indexOf('_Series_') > -1) {\n            var element = void 0;\n            if (targetElement.id.indexOf('_Trackball_1') > -1) {\n                element = getElement(targetElement.id.split('_Trackball_')[0] + '_Symbol');\n                element = isNullOrUndefined(element) ? getElement(targetElement.id.split('_Trackball_')[0]) : element;\n            }\n            else if (targetElement.id.indexOf('_Trackball_0') > -1) {\n                return null;\n            }\n            this.performSelection(this.indexFinder(targetElement.id), this.chart, element || targetElement);\n        }\n    };\n    /**\n     *  Method to perform the selection\n     * @private.\n     */\n    Selection.prototype.performSelection = function (index, chart, element) {\n        this.isSeriesMode = this.currentMode === 'Series';\n        if (chart.series[index.series].type === 'BoxAndWhisker' &&\n            element.id === chart.element.id + '_Series_' + index.series + '_Point_' + index.point + '_BoxPath') {\n            element = element.parentNode;\n        }\n        if (chart.series[index.series].type === 'Area' && (this.currentMode === 'Point' || this.currentMode === 'Cluster') &&\n            (element.id === this.chart.element.id + '_Series_' + index.series)) {\n            var className = this.generateStyle(chart.series[index.series]);\n            var selectionEle = document.querySelectorAll('.' + className);\n            this.findTrackballElements(selectionEle, className);\n            this.blurEffect(chart.element.id, chart.visibleSeries);\n        }\n        switch (this.currentMode) {\n            case 'Series':\n                this.selection(chart, index, this.getSeriesElements(chart.series[index.series]));\n                this.selectionComplete(chart, index, this.currentMode);\n                this.blurEffect(chart.element.id, chart.visibleSeries);\n                break;\n            case 'Point':\n                if (!isNaN(index.point)) {\n                    this.selection(chart, index, [element]);\n                    this.selectionComplete(chart, index, this.currentMode);\n                    this.blurEffect(chart.element.id, chart.visibleSeries);\n                }\n                break;\n            case 'Cluster':\n                if (!isNaN(index.point)) {\n                    this.clusterSelection(chart, index);\n                    this.selectionComplete(chart, index, this.currentMode);\n                    this.blurEffect(chart.element.id, chart.visibleSeries);\n                }\n                break;\n        }\n    };\n    /**\n     *  Method to get the selected data index\n     * @private.\n     */\n    Selection.prototype.selectionComplete = function (chart, index, selectionMode) {\n        var points;\n        var pointIndex;\n        var seriesIndex;\n        var selectedPointValues = [];\n        var yValue;\n        var selectedPointX;\n        if (selectionMode === 'Cluster') {\n            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                var series = _a[_i];\n                if (series.visible) {\n                    for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n                        pointIndex = chart.isMultiSelect ? this.selectedDataIndexes[i].point : index.point;\n                        seriesIndex = series.index;\n                        points = series.points;\n                        if (!isNaN(pointIndex)) {\n                            yValue = series.type !== 'RangeArea' ? points[pointIndex].yValue :\n                                points[pointIndex].regions[0].y;\n                            selectedPointX = points[pointIndex].xValue;\n                            if (chart.primaryXAxis.valueType === 'Category') {\n                                selectedPointX = points[pointIndex].x.toLocaleString();\n                            }\n                            else if (chart.primaryXAxis.valueType === 'DateTime') {\n                                selectedPointX = new Date(points[pointIndex].xValue);\n                            }\n                            if (series.category !== 'Indicator') {\n                                selectedPointValues.push({\n                                    x: selectedPointX, y: yValue, seriesIndex: seriesIndex,\n                                    pointIndex: pointIndex\n                                });\n                            }\n                            if (series.type === 'RangeArea') {\n                                selectedPointValues.push({\n                                    x: selectedPointX, y: points[pointIndex].regions[0].y,\n                                    seriesIndex: seriesIndex, pointIndex: pointIndex\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else if (selectionMode === 'Series') {\n            if (chart.isMultiSelect) {\n                for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n                    seriesIndex = this.selectedDataIndexes[i].series;\n                    selectedPointValues.push({\n                        seriesIndex: seriesIndex,\n                    });\n                }\n            }\n            else {\n                seriesIndex = (this.selectedDataIndexes.length > 0) ? this.selectedDataIndexes[0].series : 0;\n                selectedPointValues.push({\n                    seriesIndex: seriesIndex,\n                });\n            }\n        }\n        else if (selectionMode === 'Point') {\n            for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n                pointIndex = this.selectedDataIndexes[i].point;\n                seriesIndex = this.selectedDataIndexes[i].series;\n                var series = chart.series[seriesIndex];\n                points = series.points;\n                if (!isNaN(pointIndex)) {\n                    selectedPointX = points[pointIndex].xValue;\n                    yValue = series.type !== 'RangeArea' ? points[pointIndex].yValue :\n                        points[pointIndex].regions[0].y;\n                    if (chart.primaryXAxis.valueType === 'Category') {\n                        selectedPointX = points[pointIndex].x.toLocaleString();\n                    }\n                    else if (chart.primaryXAxis.valueType === 'DateTime') {\n                        selectedPointX = new Date(points[pointIndex].xValue);\n                    }\n                    selectedPointValues.push({\n                        x: selectedPointX, y: yValue, seriesIndex: seriesIndex,\n                        pointIndex: pointIndex\n                    });\n                }\n            }\n        }\n        var args = {\n            name: selectionComplete,\n            selectedDataValues: selectedPointValues,\n            cancel: false\n        };\n        chart.trigger(selectionComplete, args);\n    };\n    /**\n     *  Method to perform selection\n     * @private.\n     */\n    Selection.prototype.selection = function (chart, index, selectedElements, legendClick) {\n        if (legendClick === void 0) { legendClick = false; }\n        if (!(this.currentMode === 'Lasso')) {\n            if (!chart.isMultiSelect && (this.currentMode.indexOf('Drag') === -1 && this.styleId.indexOf('highlight') === -1 &&\n                chart.selectionMode !== 'None')) {\n                this.removeMultiSelectElements(chart, this.selectedDataIndexes, index, chart.series);\n            }\n        }\n        if (!isNullOrUndefined(selectedElements[0])) {\n            var isAdd = void 0;\n            var className = selectedElements[0] && (selectedElements[0].getAttribute('class') || '');\n            var pClassName = selectedElements[0].parentNode &&\n                (selectedElements[0].parentNode.getAttribute('class') || '');\n            if (className !== '' && this.currentMode !== 'Cluster') {\n                this.findTrackballElements(selectedElements, className);\n            }\n            if (selectedElements[0] && className.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n                this.removeStyles(selectedElements);\n            }\n            else if (selectedElements[0].parentNode && pClassName.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n                this.removeStyles([selectedElements[0].parentNode]);\n            }\n            else {\n                this.previousSelectedEle = chart.highlightMode !== 'None' ? selectedElements : [];\n                this.applyStyles(selectedElements);\n                isAdd = true;\n            }\n            if (this.styleId.indexOf('highlight') > 0 && chart.highlightMode !== 'None') {\n                this.addOrRemoveIndex(this.highlightDataIndexes, index, isAdd);\n            }\n            else {\n                this.addOrRemoveIndex(this.selectedDataIndexes, index, isAdd);\n            }\n        }\n    };\n    /**\n     *  Method to get the cluster selection element\n     * @private.\n     */\n    Selection.prototype.clusterSelection = function (chart, index) {\n        this.selection(chart, index, this.getClusterElements(chart, new Index(index.series, index.point)));\n    };\n    /**\n     * Method to remove the multi selected elements\n     * @private.\n     */\n    Selection.prototype.removeMultiSelectElements = function (chart, index, currentIndex, seriesCollection) {\n        var series;\n        for (var i = 0; i < index.length; i++) {\n            series = seriesCollection[index[i].series];\n            if ((this.isSeriesMode && !this.toEquals(index[i], currentIndex, this.isSeriesMode)) ||\n                (this.currentMode === 'Cluster' && !this.toEquals(index[i], currentIndex, false)) ||\n                (!this.isSeriesMode && this.toEquals(index[i], currentIndex, true) && !this.toEquals(index[i], currentIndex, false))) {\n                this.removeStyles(this.findElements(chart, series, index[i]));\n                index.splice(i, 1);\n                i--;\n            }\n        }\n    };\n    /**\n     * Method to remove the selection\n     * @private.\n     */\n    Selection.prototype.blurEffect = function (chartId, visibleSeries, legendClick) {\n        if (legendClick === void 0) { legendClick = false; }\n        var visibility = (this.checkVisibility(this.highlightDataIndexes) ||\n            this.checkVisibility(this.selectedDataIndexes)); // legend click scenario\n        for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n            var series = visibleSeries_1[_i];\n            if (series.visible) {\n                this.checkSelectionElements(getElement(chartId + 'SeriesGroup' + series.index), this.generateStyle(series), visibility, legendClick, series.index);\n                if (!isNullOrUndefined(getElement(chartId + 'SymbolGroup' + series.index))) {\n                    this.checkSelectionElements(getElement(chartId + 'SymbolGroup' + series.index), this.generateStyle(series), visibility, legendClick, series.index);\n                }\n            }\n        }\n    };\n    /**\n     * Method to add the add/remove class to element\n     * @private.\n     */\n    Selection.prototype.checkSelectionElements = function (element, className, visibility, legendClick, series) {\n        var children = (this.isSeriesMode ? [element] : element.childNodes);\n        if (this.chart.selectionMode !== 'None' && this.chart.highlightMode !== 'None') {\n            children = (element.children);\n        }\n        var elementClassName;\n        var parentClassName;\n        var legendShape;\n        var selectElement = element;\n        for (var i = 0; i < children.length; i++) {\n            elementClassName = children[i].getAttribute('class') || '';\n            parentClassName = children[i].parentNode.getAttribute('class') || '';\n            if (this.chart.selectionMode !== 'None' && this.chart.highlightMode !== 'None') {\n                className = elementClassName.indexOf('selection') > 0 ||\n                    elementClassName.indexOf('highlight') > 0 ? elementClassName : className;\n                className = (parentClassName.indexOf('selection') > 0 ||\n                    parentClassName.indexOf('highlight') > 0) ? parentClassName : className;\n            }\n            if (elementClassName.indexOf(className) === -1 &&\n                parentClassName.indexOf(className) === -1 && visibility) {\n                this.addSvgClass(children[i], this.unselected);\n            }\n            else {\n                selectElement = children[i];\n                this.removeSvgClass(children[i], this.unselected);\n                this.removeSvgClass(children[i].parentNode, this.unselected);\n            }\n            if (children[i].id.indexOf('Trackball') > 0 && selectElement.classList[0] === className) {\n                this.removeSvgClass(children[i], this.unselected);\n                this.removeSvgClass(children[i].parentNode, this.unselected);\n                this.addSvgClass(children[i], className);\n            }\n        }\n        if (element.id.indexOf('Symbol') > -1) {\n            if ((element.querySelectorAll('.' + className)[0]) && element.querySelectorAll('.' + className)[0].getAttribute('class')\n                === className) {\n                var symbolEle = getElement(this.control.element.id + '_Series_' + element.id[element.id.length - 1]);\n                var seriesClassName = symbolEle && symbolEle.hasAttribute('class') ? symbolEle.getAttribute('class') : '';\n                if (seriesClassName.indexOf(this.unselected) > -1) {\n                    this.removeSvgClass(symbolEle, this.unselected);\n                }\n            }\n        }\n        if (this.control.legendModule && this.control.legendSettings.visible) {\n            legendShape = getElement(this.control.element.id + '_chart_legend_shape_' + series);\n            if (legendShape) {\n                if (legendShape.hasAttribute('class')) {\n                    this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\n                }\n                elementClassName = selectElement.getAttribute('class') || '';\n                parentClassName = selectElement.parentNode.getAttribute('class') || '';\n                if (elementClassName.indexOf(className) === -1 && parentClassName.indexOf(className) === -1 && visibility) {\n                    this.addSvgClass(legendShape, this.unselected);\n                    this.removeSvgClass(legendShape, className);\n                }\n                else {\n                    this.removeSvgClass(legendShape, this.unselected);\n                    ((elementClassName === '' && parentClassName === '') || elementClassName.trim() === 'EJ2-Trackball') ?\n                        this.removeSvgClass(legendShape, className) : this.addSvgClass(legendShape, className);\n                }\n                if (legendClick && parentClassName.indexOf(className) > -1) {\n                    this.addSvgClass(legendShape, className);\n                }\n            }\n        }\n    };\n    /**\n     *  Method to apply the styles\n     * @private.\n     */\n    Selection.prototype.applyStyles = function (elements) {\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var element = elements_1[_i];\n            if (element) {\n                this.removeSvgClass(element.parentNode, this.unselected);\n                this.removeSvgClass(element, this.unselected);\n                this.addSvgClass(element, this.getSelectionClass(element.id));\n            }\n        }\n    };\n    /**\n     *  Method to get the selection class\n     * @private.\n     */\n    Selection.prototype.getSelectionClass = function (id) {\n        return this.generateStyle(this.control.series[this.indexFinder(id).series]);\n    };\n    /**\n     *  Method to remove styles\n     * @private.\n     */\n    Selection.prototype.removeStyles = function (elements) {\n        for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {\n            var element = elements_2[_i];\n            if (element) {\n                this.removeSvgClass(element, this.getSelectionClass(element.id));\n            }\n        }\n    };\n    /**\n     *  Method to remove the selected data index\n     * @private.\n     */\n    Selection.prototype.addOrRemoveIndex = function (indexes, index, isAdd) {\n        for (var i = 0; i < indexes.length; i++) {\n            if (this.toEquals(indexes[i], index, this.isSeriesMode)) {\n                indexes.splice(i, 1);\n                i--;\n            }\n        }\n        if (isAdd) {\n            indexes.push(index);\n        }\n    };\n    /**\n     *  Method to get the equal index\n     * @private.\n     */\n    Selection.prototype.toEquals = function (first, second, checkSeriesOnly) {\n        return ((first.series === second.series || (this.currentMode === 'Cluster' && !checkSeriesOnly))\n            && (checkSeriesOnly || (first.point === second.point)));\n    };\n    /**\n     * To redraw the selected points.\n     * @return {void}\n     * @private\n     */\n    Selection.prototype.redrawSelection = function (chart, oldMode) {\n        this.isSeriesMode = oldMode === 'Series';\n        var selectedDataIndexes = extend([], this.selectedDataIndexes, null, true);\n        var highlightDataIndexes = extend([], this.highlightDataIndexes, null, true);\n        if (this.styleId.indexOf('highlight') > 0 && highlightDataIndexes.length > 0) {\n            this.removeSelectedElements(chart, this.highlightDataIndexes, chart.series);\n            selectedDataIndexes = highlightDataIndexes;\n        }\n        else {\n            this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n        }\n        this.blurEffect(chart.element.id, chart.visibleSeries);\n        this.selectDataIndex(chart, selectedDataIndexes);\n    };\n    /** @private */\n    Selection.prototype.legendSelection = function (chart, series, event) {\n        var targetElement = event.target;\n        if (event.type === 'mousemove') {\n            if (event.target.id.indexOf('text') > 1) {\n                targetElement = getElement(event.target.id.replace('text', 'shape'));\n            }\n            if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 ||\n                targetElement.getAttribute('class').indexOf('selection') > -1)) {\n                return;\n            }\n            this.currentMode = this.chart.highlightMode;\n        }\n        var isPreSelected = this.isAlreadySelected(event);\n        if (isPreSelected) {\n            var seriesStyle = this.generateStyle(chart.visibleSeries[series]);\n            var selectedElements = (document.querySelectorAll('.' + seriesStyle));\n            this.isSeriesMode = this.currentMode === 'Series';\n            var isBlurEffectNeeded = true;\n            if (selectedElements.length > 0) {\n                this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n            }\n            else {\n                for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                    var element = _a[_i];\n                    if (element.index !== series && !chart.isMultiSelect) {\n                        seriesStyle = this.generateStyle(chart.visibleSeries[element.index]);\n                        selectedElements = document.querySelectorAll('.' + seriesStyle);\n                        this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n                    }\n                }\n                var seriesElements = this.getSeriesElements(chart.visibleSeries[series]);\n                for (var _b = 0, seriesElements_1 = seriesElements; _b < seriesElements_1.length; _b++) {\n                    var seriesElement = seriesElements_1[_b];\n                    this.checkSelectionElements(seriesElement, seriesStyle, false, true, series);\n                }\n                this.isSeriesMode = true;\n                this.selection(chart, new Index(series, NaN), seriesElements, true);\n                this.isSeriesMode = chart.selectionMode === 'Series';\n                this.blurEffect(chart.element.id, chart.visibleSeries, true);\n            }\n        }\n    };\n    Selection.prototype.removeSelection = function (chart, series, selectedElements, seriesStyle, isBlurEffectNeeded) {\n        if (selectedElements.length > 0) {\n            var elements = [];\n            for (var i = 0; i < selectedElements.length; i++) {\n                elements.push(selectedElements[i]);\n            }\n            this.removeStyles(elements);\n            this.isSeriesMode = true;\n            this.addOrRemoveIndex(this.selectedDataIndexes, new Index(series, NaN));\n            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                var value = _a[_i];\n                seriesStyle = this.generateStyle(value);\n                if (document.querySelectorAll('.' + seriesStyle).length > 0) {\n                    for (var _b = 0, elements_3 = elements; _b < elements_3.length; _b++) {\n                        var element = elements_3[_b];\n                        this.checkSelectionElements(element, seriesStyle, true, true, series);\n                    }\n                    isBlurEffectNeeded = false;\n                    break;\n                }\n            }\n            if (isBlurEffectNeeded) {\n                this.isSeriesMode = chart.selectionMode === 'Series';\n                this.blurEffect(chart.element.id, chart.visibleSeries);\n            }\n        }\n    };\n    /** @private */\n    Selection.prototype.getSeriesElements = function (series) {\n        var seriesElements = [series.seriesElement];\n        if (series.marker.visible && series.type !== 'Scatter' && series.type !== 'Bubble' && !series.isRectSeries) {\n            seriesElements.push(series.symbolElement);\n        }\n        return seriesElements;\n    };\n    /** @private */\n    Selection.prototype.indexFinder = function (id) {\n        var ids = ['NaN', 'NaN'];\n        if (id.indexOf('SeriesGroup') > -1) {\n            ids = id.split('SeriesGroup');\n            ids[0] = ids[1];\n        }\n        else if (id.indexOf('SymbolGroup') > -1) {\n            ids = id.split('SymbolGroup');\n            ids[0] = ids[1];\n        }\n        else if (id.indexOf('_Point_') > -1) {\n            ids = id.split('_Series_')[1].split('_Point_');\n        }\n        else if (id.indexOf('_Series_') > -1) {\n            ids[0] = id.split('_Series_')[1];\n        }\n        else if (id.indexOf('_chart_legend_shape_') > -1) {\n            ids = id.split('_chart_legend_shape_');\n            ids[0] = ids[1];\n        }\n        return new Index(parseInt(ids[0], 10), parseInt(ids[1], 10));\n    };\n    /**\n     * Drag selection that returns the selected data.\n     * @return {void}\n     * @private\n     */\n    Selection.prototype.calculateDragSelectedElements = function (chart, dragRect, isClose) {\n        this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n        var isLasso = chart.selectionMode === 'Lasso';\n        var rect = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n        var axisOffset = new ChartLocation(chart.chartAxisLayoutPanel.seriesClipRect.x, chart.chartAxisLayoutPanel.seriesClipRect.y);\n        this.removeOffset(rect, axisOffset);\n        var points;\n        var index;\n        var selectedPointValues = [];\n        var selectedSeriesValues = [];\n        this.isSeriesMode = false;\n        var isDragResize = (chart.allowMultiSelection) && (this.rectGrabbing || this.resizing);\n        this.rectPoints = this.dragRectArray[isDragResize ? this.targetIndex : this.count] =\n            new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n        if (dragRect.width && dragRect.height && !isClose) {\n            var rt = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n            this.removeOffset(rt, axisOffset);\n            this.filterArray[isDragResize ? this.targetIndex : this.count] = rt;\n        }\n        var _loop_1 = function (series) {\n            if (series.visible) {\n                points = series.points;\n                selectedPointValues = [];\n                var xAxisOffset_1;\n                var yAxisOffset_1;\n                if ((chart.isTransposed || series.type.indexOf('Bar') !== -1) &&\n                    !(chart.isTransposed && series.type.indexOf('Bar') !== -1)) {\n                    xAxisOffset_1 = series.xAxis.rect.y - axisOffset.y;\n                    yAxisOffset_1 = series.yAxis.rect.x - axisOffset.x;\n                }\n                else {\n                    xAxisOffset_1 = series.xAxis.rect.x - axisOffset.x;\n                    yAxisOffset_1 = series.yAxis.rect.y - axisOffset.y;\n                }\n                for (var j = 0; j < points.length; j++) {\n                    var yValue = series.type !== 'RangeArea' ? points[j].yValue :\n                        points[j].regions[0].y;\n                    var isCurrentPoint = void 0;\n                    var selectedPointX = points[j].xValue;\n                    if (chart.primaryXAxis.valueType === 'Category') {\n                        selectedPointX = points[j].x.toLocaleString();\n                    }\n                    else if (chart.primaryXAxis.valueType === 'DateTime') {\n                        selectedPointX = new Date(points[j].xValue);\n                    }\n                    if (series.type === 'BoxAndWhisker') {\n                        isCurrentPoint = points[j].regions.some(function (region) {\n                            return withInBounds(region.x + xAxisOffset_1, region.y + yAxisOffset_1, rect);\n                        });\n                    }\n                    else {\n                        if (chart.selectionMode === 'Lasso') {\n                            isCurrentPoint = points[j].isSelect;\n                        }\n                        else {\n                            isCurrentPoint = (chart.allowMultiSelection) ?\n                                this_1.isPointSelect(points[j], xAxisOffset_1, yAxisOffset_1, this_1.filterArray, axisOffset) :\n                                points[j].symbolLocations.some(function (location) {\n                                    return location && withInBounds(location.x + xAxisOffset_1, location.y + yAxisOffset_1, rect);\n                                });\n                        }\n                    }\n                    if (isCurrentPoint && series.category !== 'Indicator') {\n                        index = new Index(series.index, points[j].index);\n                        this_1.selection(chart, index, this_1.findElements(chart, series, index));\n                        selectedPointValues.push({ x: selectedPointX, y: yValue });\n                    }\n                    if (isCurrentPoint && series.type === 'RangeArea') {\n                        selectedPointValues.push({ x: selectedPointX, y: points[j].regions[0].y });\n                    }\n                }\n                selectedSeriesValues.push(selectedPointValues);\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            _loop_1(series);\n        }\n        this.blurEffect(chart.element.id, chart.visibleSeries);\n        var x = isLasso ? chart.mouseDownX : (dragRect.x + dragRect.width);\n        var y = isLasso ? chart.mouseDownY : dragRect.y;\n        if (!isClose) {\n            this.createCloseButton(x, y);\n        }\n        var args = {\n            name: dragComplete,\n            selectedDataValues: selectedSeriesValues,\n            cancel: false\n        };\n        chart.trigger(dragComplete, args);\n    };\n    Selection.prototype.removeOffset = function (rect, clip) {\n        rect.x -= clip.x;\n        rect.y -= clip.y;\n    };\n    Selection.prototype.isPointSelect = function (points, xAxisOffset, yAxisOffset, rectCollection, axisOffset) {\n        var location = points.symbolLocations[0];\n        for (var _i = 0, rectCollection_1 = rectCollection; _i < rectCollection_1.length; _i++) {\n            var rect = rectCollection_1[_i];\n            if (rect && location && withInBounds(location.x + xAxisOffset, location.y + yAxisOffset, rect)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Method to draw dragging rect.\n     * @return {void}\n     * @private\n     */\n    Selection.prototype.drawDraggingRect = function (chart, dragRect, target) {\n        var cartesianLayout = chart.chartAxisLayoutPanel.seriesClipRect;\n        var border = chart.chartArea.border.width;\n        var rectFill = chart.themeStyle.selectionRectFill;\n        var rectStroke = chart.themeStyle.selectionRectStroke;\n        var isLasso = chart.selectionMode === 'Lasso';\n        if (this.isdrawRect) {\n            cartesianLayout.x = cartesianLayout.x - border / 2;\n            cartesianLayout.y = cartesianLayout.y - border / 2;\n            cartesianLayout.width = cartesianLayout.width + border;\n            cartesianLayout.height = cartesianLayout.height + border;\n            this.isdrawRect = false;\n        }\n        switch (chart.selectionMode) {\n            case 'DragX':\n                dragRect.y = cartesianLayout.y;\n                dragRect.height = cartesianLayout.height;\n                break;\n            case 'DragY':\n                dragRect.x = cartesianLayout.x;\n                dragRect.width = cartesianLayout.width;\n                break;\n        }\n        if ((dragRect.width < 5 || dragRect.height < 5) && !isLasso) {\n            return null;\n        }\n        var isDragMode = chart.selectionMode.indexOf('Drag') > -1 || chart.selectionMode === 'Lasso';\n        if ((chart.allowMultiSelection) && isDragMode) {\n            var element = void 0;\n            var dragGroup = void 0;\n            var multiGroup = getElement(this.multiRectGroup);\n            if (!multiGroup) {\n                multiGroup = chart.svgRenderer.createGroup({ id: this.multiRectGroup });\n                chart.svgObject.appendChild(multiGroup);\n            }\n            if (this.rectGrabbing || this.resizing) {\n                var rectElement = void 0;\n                rectElement = getElement(this.draggedRect + this.targetIndex);\n                if (rectElement.nextSibling) {\n                    remove(rectElement.nextSibling);\n                }\n                this.setAttributes(rectElement, dragRect);\n            }\n            else if (!getElement(this.draggedRectGroup + this.count)) {\n                dragGroup = chart.svgRenderer.createGroup({ id: this.draggedRectGroup + this.count });\n                var svgElement = document.getElementById(chart.element.id + '_series_svg');\n                chart.enableCanvas ? svgElement.appendChild(dragGroup) : multiGroup.appendChild(dragGroup);\n            }\n            if (!(chart.selectionMode === 'Lasso')) {\n                element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect + this.count, rectFill, { color: rectStroke, width: 1 }, 1, dragRect));\n                element.setAttribute('style', 'cursor:move;');\n            }\n            else {\n                element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath + this.count, rectFill, 3, rectStroke, 1, '', this.path));\n            }\n            if (!dragGroup && !this.rectGrabbing && !this.resizing) {\n                getElement(this.draggedRectGroup + this.count).appendChild(element);\n            }\n            else if (!this.rectGrabbing && !this.resizing) {\n                dragGroup.appendChild(element);\n            }\n        }\n        else {\n            var element = isLasso ?\n                getElement(this.lassoPath) : getElement(this.draggedRect);\n            if (this.closeIcon) {\n                removeElement(this.closeIconId);\n            }\n            if (element) {\n                if (isLasso) {\n                    element.setAttribute('d', this.path);\n                }\n                else {\n                    this.setAttributes(element, dragRect);\n                }\n            }\n            else {\n                var dragGroup = chart.svgRenderer.createGroup({ id: this.draggedRectGroup });\n                var svgElement = document.getElementById(chart.element.id + '_series_svg');\n                chart.enableCanvas ? svgElement.appendChild(dragGroup) : chart.svgObject.appendChild(dragGroup);\n                if (!(chart.selectionMode === 'Lasso')) {\n                    element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect, rectFill, { color: rectStroke, width: 1 }, 1, dragRect));\n                }\n                else {\n                    element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath, rectFill, 3, rectStroke, 1, '', this.path));\n                }\n                //element.setAttribute('style', 'cursor:move;');\n                dragGroup.appendChild(element);\n            }\n        }\n    };\n    /**\n     * To get drag selected group element index from its id\n     * @param id\n     */\n    Selection.prototype.getIndex = function (id) {\n        var i;\n        for (i = id.length - 1; i > 0; i--) {\n            var x = Number(id[i]);\n            if (!isNaN(x)) {\n                continue;\n            }\n            else {\n                break;\n            }\n        }\n        var index = +id.substr(i + 1, id.length - 1);\n        return index;\n    };\n    Selection.prototype.createCloseButton = function (x, y) {\n        var isMultiDrag = this.chart.allowMultiSelection;\n        var circleStroke = this.chart.themeStyle.selectionCircleStroke;\n        var isDrag = this.rectGrabbing || this.resizing;\n        var closeIcon = this.chart.svgRenderer.createGroup({\n            id: this.closeIconId + (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''),\n            style: 'cursor:pointer; visibility: visible;'\n        });\n        closeIcon.appendChild(this.chart.svgRenderer.drawCircle(new CircleOption(this.closeIconId + '_circle' + (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''), '#FFFFFF', { color: circleStroke, width: 1 }, 1, x, y, 10)));\n        var direction = 'M ' + (x - 4) + ' ' + (y - 4) + ' L ' + (x + 4) + ' ' + (y + 4) + ' M ' + (x - 4) + ' ' + (y + 4) +\n            ' L ' + (x + 4) + ' ' + (y - 4);\n        closeIcon.appendChild(this.chart.svgRenderer.drawPath({\n            id: this.closeIconId + '_cross' +\n                (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''), d: direction,\n            stroke: circleStroke, 'stroke-width': 2, fill: circleStroke\n        }, null));\n        this.closeIcon = closeIcon;\n        var pathElement = getElement(this.draggedRectGroup + (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''));\n        if (pathElement) {\n            pathElement.appendChild(closeIcon);\n        }\n    };\n    /**\n     * Method to remove dragged element.\n     * @return {void}\n     * @private\n     */\n    Selection.prototype.removeDraggedElements = function (chart, event) {\n        if ((event.target.id.indexOf(this.closeIconId) > -1) && (event.type.indexOf('move') === -1)) {\n            var isSelectedvalues = true;\n            if ((chart.allowMultiSelection)) {\n                var index = this.getIndex(event.target.id);\n                var multiRectGroupElement = getElement(this.multiRectGroup);\n                remove(getElement(this.draggedRectGroup + index));\n                this.dragRectArray[index] = null;\n                this.filterArray[index] = null;\n                this.totalSelectedPoints[index] = null;\n                if (multiRectGroupElement && multiRectGroupElement.childElementCount === 0) {\n                    removeElement(multiRectGroupElement);\n                    this.dragRectArray = [];\n                    this.filterArray = [];\n                    this.totalSelectedPoints = [];\n                }\n                if (this.currentMode === 'Lasso') {\n                    if (this.multiDataIndexes[index] != null) {\n                        for (var i = 0; i < this.multiDataIndexes[index].length; i++) {\n                            this.multiDataIndexes[index][i].isSelect = false;\n                        }\n                    }\n                    this.multiDataIndexes[index] = null;\n                    for (var j = 0; j < this.multiDataIndexes.length; j++) {\n                        if (this.multiDataIndexes[j] != null) {\n                            isSelectedvalues = false;\n                            for (var k = 0; k < this.multiDataIndexes[j].length; k++) {\n                                this.multiDataIndexes[j][k].isSelect = true;\n                            }\n                        }\n                    }\n                    this.calculateDragSelectedElements(chart, this.dragRect, true);\n                }\n                else if (this.filterArray.length) {\n                    for (var i = 0; i < this.filterArray.length; i++) {\n                        if (this.filterArray[i]) {\n                            isSelectedvalues = false;\n                            this.calculateDragSelectedElements(chart, this.filterArray[i], true);\n                        }\n                    }\n                }\n                else {\n                    this.calculateDragSelectedElements(chart, new Rect(0, 0, 0, 0), true);\n                }\n            }\n            else {\n                remove(getElement(this.draggedRectGroup));\n                this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n            }\n            this.blurEffect(chart.element.id, chart.visibleSeries);\n            this.changeCursorStyle(false, chart.svgObject, 'auto');\n            if (!(chart.allowMultiSelection) || isSelectedvalues) {\n                this.rectPoints = null;\n            }\n        }\n    };\n    /**\n     * Method to resize the drag rect.\n     * @return {void}\n     * @private\n     */\n    Selection.prototype.resizingSelectionRect = function (chart, location, tapped, target) {\n        var rect;\n        if (((chart.allowMultiSelection) && (target.id.indexOf('_ej2_drag_rect') > -1)) ||\n            this.dragRectArray[this.targetIndex]) {\n            if (target.id.indexOf('_ej2_drag_rect') > -1) {\n                this.targetIndex = this.getIndex(target.id);\n            }\n            var r = this.dragRectArray[this.targetIndex];\n            rect = new Rect(r.x, r.y, r.width, r.height);\n        }\n        if (!(chart.allowMultiSelection)) {\n            rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n        }\n        if (rect) {\n            var resize = this.findResizeMode(chart.svgObject, rect, location);\n            if (this.resizing) {\n                rect = getDraggedRectLocation(rect.x, rect.y, (rect.x + rect.width), (rect.y + rect.height), chart.chartAxisLayoutPanel.seriesClipRect);\n                this.drawDraggingRect(chart, rect);\n                this.dragRect = rect;\n            }\n            if (tapped) {\n                this.resizing = resize;\n            }\n        }\n        else {\n            return;\n        }\n    };\n    Selection.prototype.findResizeMode = function (chartSvgObject, rect, location) {\n        var cursorStyle = 'se-resize';\n        var resize = false;\n        if (!this.resizing) {\n            var resizeEdges = [new Rect(rect.x, (rect.y), rect.width - 5, 5),\n                new Rect((rect.x), rect.y, 5, rect.height),\n                new Rect(rect.x, (rect.y + rect.height - 5), rect.width - 5, 5),\n                new Rect((rect.x + rect.width - 5), rect.y + 5, 5, rect.height - 15),\n                new Rect((rect.x + rect.width - 10), (rect.y + rect.height - 10), 10, 10)]; //corner\n            for (var i = 0; i < resizeEdges.length; i++) {\n                if (withInBounds(location.x, location.y, resizeEdges[i])) {\n                    cursorStyle = (i === 4) ? cursorStyle : (i % 2 === 0) ? 'ns-resize' : 'ew-resize';\n                    resize = true;\n                    this.resizeMode = i;\n                    break;\n                }\n            }\n        }\n        else {\n            var x = rect.x;\n            var y = rect.y;\n            var width = (location.x - x);\n            var height = (location.y - y);\n            switch (this.resizeMode) {\n                case 0:\n                    height = Math.abs((rect.height + rect.y) - location.y);\n                    rect.y = Math.min((rect.height + rect.y), location.y);\n                    rect.height = height;\n                    break;\n                case 1:\n                    width = Math.abs((rect.width + rect.x) - location.x);\n                    rect.x = Math.min((rect.width + rect.x), location.x);\n                    rect.width = width;\n                    break;\n                case 2:\n                    rect.height = Math.abs(height);\n                    rect.y = Math.min(location.y, y);\n                    break;\n                case 3:\n                    rect.width = Math.abs(width);\n                    rect.x = Math.min(location.x, x);\n                    break;\n                case 4:\n                    rect.width = Math.abs(width);\n                    rect.height = Math.abs(height);\n                    rect.x = Math.min(location.x, x);\n                    rect.y = Math.min(location.y, y);\n                    break;\n            }\n        }\n        if (this.currentMode !== 'Lasso') {\n            this.changeCursorStyle(resize, getElement((this.chart.allowMultiSelection) ? this.draggedRect +\n                this.targetIndex : this.draggedRect), cursorStyle);\n        }\n        this.changeCursorStyle(resize, chartSvgObject, cursorStyle);\n        return resize;\n    };\n    Selection.prototype.changeCursorStyle = function (isResize, rectelement, cursorStyle) {\n        cursorStyle = isResize ? cursorStyle : (this.control.svgObject === rectelement) ? 'auto' : 'move';\n        if (rectelement) {\n            rectelement.setAttribute('style', 'cursor:' + cursorStyle + ';');\n        }\n    };\n    Selection.prototype.removeSelectedElements = function (chart, index, seriesCollection) {\n        index.splice(0, index.length);\n        var seriesElements;\n        for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {\n            var series = seriesCollection_1[_i];\n            seriesElements = this.getSeriesElements(series);\n            this.removeStyles(seriesElements);\n            for (var _a = 0, seriesElements_2 = seriesElements; _a < seriesElements_2.length; _a++) {\n                var seriesElement = seriesElements_2[_a];\n                this.removeStyles(this.getChildren(seriesElement));\n            }\n        }\n    };\n    Selection.prototype.setAttributes = function (ele, object) {\n        var keys = Object.keys(object);\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var key = keys_1[_i];\n            ele.setAttribute(key, object[key]);\n        }\n    };\n    /**\n     * Method to move the dragged rect.\n     * @return {void}\n     * @private\n     */\n    Selection.prototype.draggedRectMoved = function (chart, grabbedPoint, doDrawing, target) {\n        var rect;\n        if ((this.resizing || this.rectGrabbing) && (chart.allowMultiSelection)) {\n            var r = this.dragRectArray[this.targetIndex];\n            rect = new Rect(r.x, r.y, r.width, r.height);\n        }\n        else {\n            rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n        }\n        rect.x -= (grabbedPoint.x - chart.mouseX);\n        rect.y -= (grabbedPoint.y - chart.mouseY);\n        rect = getDraggedRectLocation(rect.x, rect.y, rect.x + rect.width, rect.height + rect.y, chart.chartAxisLayoutPanel.seriesClipRect);\n        if (doDrawing) {\n            this.drawDraggingRect(chart, rect, target);\n        }\n        else {\n            this.calculateDragSelectedElements(chart, rect);\n        }\n    };\n    /**\n     * To complete the selection.\n     * @return {void}\n     * @private\n     */\n    Selection.prototype.completeSelection = function (e) {\n        var chart = this.chart;\n        if (chart.selectionMode === 'None') {\n            return;\n        }\n        this.currentMode = chart.selectionMode;\n        if ((this.dragging || this.resizing) && this.dragRect.width > 5 && this.dragRect.height > 5) {\n            this.calculateDragSelectedElements(chart, this.dragRect);\n        }\n        else if (!(chart.allowMultiSelection) && this.rectGrabbing &&\n            this.rectPoints.width && this.rectPoints.height) {\n            this.draggedRectMoved(chart, this.dragRect);\n        }\n        else if (this.rectGrabbing && this.dragRectArray[this.targetIndex].width && this.dragRectArray[this.targetIndex].height) {\n            this.draggedRectMoved(chart, this.dragRect);\n        }\n        if (chart.selectionMode === 'Lasso' && this.dragging && this.path) {\n            if (this.path.indexOf('L') !== -1) {\n                if (!(chart.allowMultiSelection)) {\n                    getElement(this.lassoPath).setAttribute('d', this.path + 'Z');\n                    this.pointChecking(getElement(this.lassoPath));\n                }\n                else if (getElement(this.lassoPath + this.count)) {\n                    getElement(this.lassoPath + this.count).setAttribute('d', this.path + 'Z');\n                    this.pointChecking(getElement(this.lassoPath + this.count));\n                }\n                if (this.dragging || this.resizing) {\n                    this.calculateDragSelectedElements(chart, this.dragRect);\n                }\n            }\n        }\n        this.dragging = false;\n        this.rectGrabbing = false;\n        this.resizing = false;\n        this.removeDraggedElements(chart, e);\n    };\n    Selection.prototype.getDragRect = function (chart, seriesClipRect) {\n        return getDraggedRectLocation(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY, seriesClipRect);\n    };\n    /** @private */\n    Selection.prototype.dragStart = function (chart, seriesClipRect, mouseDownX, mouseDownY, event) {\n        var mode = chart.selectionMode;\n        this.currentMode = chart.selectionMode;\n        this.dragging = (mode.indexOf('Drag') > -1 || mode === 'Lasso') && (chart.isDoubleTap || !chart.isTouch) &&\n            chart.chartAreaType !== 'PolarRadar';\n        var target = event.target;\n        this.path = undefined;\n        if (this.dragging) {\n            this.count = getElement(this.multiRectGroup) ? (this.count + 1) : 0;\n            this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n            if (chart.mouseDownX < seriesClipRect.x || chart.mouseDownX > (seriesClipRect.x + seriesClipRect.width) ||\n                chart.mouseDownY < seriesClipRect.y || chart.mouseDownY > (seriesClipRect.y + seriesClipRect.height)) {\n                this.dragging = false;\n            }\n        }\n        if (mode === 'Lasso') {\n            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                var series = _a[_i];\n                if (series.visible) {\n                    for (var _b = 0, _c = series.points; _b < _c.length; _b++) {\n                        var point = _c[_b];\n                        if (!(chart.allowMultiSelection)) {\n                            point.isSelect = false;\n                        }\n                    }\n                }\n            }\n        }\n        if (!(mode === 'Lasso')) {\n            if (this.rectPoints && !(chart.allowMultiSelection)) {\n                this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n                this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true);\n                this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.rectPoints);\n            }\n            if ((chart.allowMultiSelection)) {\n                var index = this.getIndex(target.id);\n                this.targetIndex = this.isDragRect(target.id) ? index : undefined;\n                if (this.dragRectArray.length && this.isDragRect(target.id)) {\n                    this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true, target);\n                    this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.dragRectArray[index]);\n                }\n            }\n        }\n    };\n    Selection.prototype.isDragRect = function (id) {\n        return id.indexOf('_ej2_drag_rect') > -1;\n    };\n    /** @private */\n    Selection.prototype.mouseMove = function (event) {\n        var chart = this.chart;\n        var target = event.target;\n        if (chart.highlightMode !== 'None') {\n            if (!isNullOrUndefined(target)) {\n                if (event.target.id.indexOf('text') > 1) {\n                    target = getElement(event.target.id.replace('text', 'shape'));\n                }\n                if ((target).hasAttribute('class') && ((target).getAttribute('class').indexOf('highlight') > -1 ||\n                    target.getAttribute('class').indexOf('selection') > -1)) {\n                    return;\n                }\n                this.calculateSelectedElements(event);\n                return;\n            }\n        }\n        if (chart.selectionMode === 'None') {\n            return;\n        }\n        if (event.type === 'touchmove' && (Browser.isIos || Browser.isIos7) && this.dragging && event.preventDefault) {\n            event.preventDefault();\n        }\n        var insideMoving = withInBounds(chart.mouseX, chart.mouseY, chart.chartAxisLayoutPanel.seriesClipRect);\n        if (insideMoving) {\n            if (this.rectGrabbing && !this.resizing) {\n                this.draggedRectMoved(chart, this.dragRect, true, target);\n            }\n            else if (this.dragging && !this.resizing) {\n                if (chart.selectionMode === 'Lasso') {\n                    this.getPath(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY);\n                    this.drawDraggingRect(chart, this.dragRect, target);\n                }\n                else {\n                    this.dragRect = this.getDragRect(chart, chart.chartAxisLayoutPanel.seriesClipRect);\n                    this.drawDraggingRect(chart, this.dragRect, target);\n                }\n            }\n            if (this.rectPoints && !(chart.allowMultiSelection)) {\n                this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n            }\n            else if (((chart.allowMultiSelection) && !this.dragging) || this.resizing) {\n                this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n            }\n        }\n        else {\n            this.completeSelection(event);\n        }\n    };\n    Selection.prototype.getPath = function (startX, startY, endX, endY) {\n        if (this.dragging) {\n            if (this.path) {\n                this.path = this.path + ' L' + endX + ' ' + endY;\n            }\n            else {\n                this.path = 'M ' + startX + ' ' + startY;\n            }\n        }\n    };\n    Selection.prototype.pointChecking = function (path) {\n        var _this = this;\n        var chart = this.chart;\n        var element;\n        var svgRect = getElement(chart.svgId).getBoundingClientRect();\n        var offsetX = chart.chartAxisLayoutPanel.seriesClipRect.x + Math.max(svgRect.left, 0);\n        var offsetY = chart.chartAxisLayoutPanel.seriesClipRect.y + Math.max(svgRect.top, 0);\n        this.multiDataIndexes[this.count] = [];\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            series.points.filter(function (point) {\n                // To check whether the point have symbol location value or not.\n                if (point.symbolLocations && point.symbolLocations.length) {\n                    element = document.elementFromPoint(point.symbolLocations[0].x + offsetX, point.symbolLocations[0].y + offsetY);\n                }\n                if (element === path) {\n                    point.isSelect = true;\n                    if ((_this.chart.allowMultiSelection) && _this.currentMode === 'Lasso') {\n                        _this.multiDataIndexes[_this.count][_this.seriesIndex] = point;\n                        _this.seriesIndex++;\n                    }\n                }\n                else if (!(chart.allowMultiSelection)) {\n                    point.isSelect = false;\n                }\n            });\n        }\n        this.seriesIndex = 0;\n    };\n    /**\n     * Get module name.\n     * @private\n     */\n    Selection.prototype.getModuleName = function () {\n        return 'Selection';\n    };\n    /**\n     * To destroy the selection.\n     * @return {void}\n     * @private\n     */\n    Selection.prototype.destroy = function (chart) {\n        this.removeEventListener();\n        // Destroy method performed here\n    };\n    return Selection;\n}(BaseSelection));\nexport { Selection };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}