{"ast":null,"code":"import { SizeF } from './../../drawing/pdf-drawing';\nimport { PdfGraphicsUnit } from './../enum';\nimport { PdfUnitConverter } from './../unit-convertor';\n/**\n * `PdfImage` class represents the base class for images and provides functionality for the 'PdfBitmap' class.\n * @private\n */\n\nvar PdfImage =\n/** @class */\nfunction () {\n  function PdfImage() {}\n\n  Object.defineProperty(PdfImage.prototype, \"width\", {\n    /**\n     * Gets and Sets the `width` of an image.\n     * @private\n     */\n    get: function () {\n      return this.imageWidth;\n    },\n    set: function (value) {\n      this.imageWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfImage.prototype, \"height\", {\n    /**\n     * Gets and Sets the `height` of an image.\n     * @private\n     */\n    get: function () {\n      return this.imageHeight;\n    },\n    set: function (value) {\n      this.imageHeight = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfImage.prototype, \"size\", {\n    /**\n     * Gets or sets the size of the image.\n     * @private\n     */\n    set: function (value) {\n      this.width = value.width;\n      this.height = value.height;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfImage.prototype, \"physicalDimension\", {\n    /**\n     * Gets the `physical dimension` of an image.\n     * @private\n     */\n    get: function () {\n      this.imagePhysicalDimension = this.getPointSize(this.width, this.height, this.horizontalResolution, this.verticalResolution);\n      return new SizeF(this.width, this.height);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfImage.prototype, \"element\", {\n    // /**\n    //  * Gets the `image stream as string`.\n    //  * @private\n    //  */\n    // public static fromString(string : string) : PdfImage {\n    //     let image : PdfImage = new PdfBitmap(string);\n    //     return image;\n    // }\n\n    /**\n     * Gets the `element` image stream.\n     * @private\n     */\n    get: function () {\n      return this.imageStream;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfImage.prototype.getPointSize = function (width, height, horizontalResolution, verticalResolution) {\n    if (typeof horizontalResolution === 'undefined') {\n      var dpiX = PdfUnitConverter.horizontalResolution;\n      var dpiY = PdfUnitConverter.verticalResolution;\n      var size = this.getPointSize(width, height, dpiX, dpiY);\n      return size;\n    } else {\n      var ucX = new PdfUnitConverter(horizontalResolution);\n      var ucY = new PdfUnitConverter(verticalResolution);\n      var ptWidth = ucX.convertUnits(width, PdfGraphicsUnit.Pixel, PdfGraphicsUnit.Point);\n      var ptHeight = ucY.convertUnits(height, PdfGraphicsUnit.Pixel, PdfGraphicsUnit.Point);\n      var size = new SizeF(ptWidth, ptHeight);\n      return size;\n    }\n  };\n\n  return PdfImage;\n}();\n\nexport { PdfImage };","map":{"version":3,"names":["SizeF","PdfGraphicsUnit","PdfUnitConverter","PdfImage","Object","defineProperty","prototype","get","imageWidth","set","value","enumerable","configurable","imageHeight","width","height","imagePhysicalDimension","getPointSize","horizontalResolution","verticalResolution","imageStream","dpiX","dpiY","size","ucX","ucY","ptWidth","convertUnits","Pixel","Point","ptHeight"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/images/pdf-image.js"],"sourcesContent":["import { SizeF } from './../../drawing/pdf-drawing';\nimport { PdfGraphicsUnit } from './../enum';\nimport { PdfUnitConverter } from './../unit-convertor';\n/**\n * `PdfImage` class represents the base class for images and provides functionality for the 'PdfBitmap' class.\n * @private\n */\nvar PdfImage = /** @class */ (function () {\n    function PdfImage() {\n    }\n    Object.defineProperty(PdfImage.prototype, \"width\", {\n        /**\n         * Gets and Sets the `width` of an image.\n         * @private\n         */\n        get: function () {\n            return this.imageWidth;\n        },\n        set: function (value) {\n            this.imageWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfImage.prototype, \"height\", {\n        /**\n         * Gets and Sets the `height` of an image.\n         * @private\n         */\n        get: function () {\n            return this.imageHeight;\n        },\n        set: function (value) {\n            this.imageHeight = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfImage.prototype, \"size\", {\n        /**\n         * Gets or sets the size of the image.\n         * @private\n         */\n        set: function (value) {\n            this.width = value.width;\n            this.height = value.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfImage.prototype, \"physicalDimension\", {\n        /**\n         * Gets the `physical dimension` of an image.\n         * @private\n         */\n        get: function () {\n            this.imagePhysicalDimension = this.getPointSize(this.width, this.height, this.horizontalResolution, this.verticalResolution);\n            return new SizeF(this.width, this.height);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfImage.prototype, \"element\", {\n        // /**\n        //  * Gets the `image stream as string`.\n        //  * @private\n        //  */\n        // public static fromString(string : string) : PdfImage {\n        //     let image : PdfImage = new PdfBitmap(string);\n        //     return image;\n        // }\n        /**\n         * Gets the `element` image stream.\n         * @private\n         */\n        get: function () {\n            return this.imageStream;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfImage.prototype.getPointSize = function (width, height, horizontalResolution, verticalResolution) {\n        if (typeof horizontalResolution === 'undefined') {\n            var dpiX = PdfUnitConverter.horizontalResolution;\n            var dpiY = PdfUnitConverter.verticalResolution;\n            var size = this.getPointSize(width, height, dpiX, dpiY);\n            return size;\n        }\n        else {\n            var ucX = new PdfUnitConverter(horizontalResolution);\n            var ucY = new PdfUnitConverter(verticalResolution);\n            var ptWidth = ucX.convertUnits(width, PdfGraphicsUnit.Pixel, PdfGraphicsUnit.Point);\n            var ptHeight = ucY.convertUnits(height, PdfGraphicsUnit.Pixel, PdfGraphicsUnit.Point);\n            var size = new SizeF(ptWidth, ptHeight);\n            return size;\n        }\n    };\n    return PdfImage;\n}());\nexport { PdfImage };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}