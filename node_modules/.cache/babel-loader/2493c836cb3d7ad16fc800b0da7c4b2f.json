{"ast":null,"code":"/**\n * Save class provide method to save file\n * ```typescript\n * let blob : Blob = new Blob([''], { type: 'text/plain' });\n * Save.save('fileName.txt',blob);\n */\nvar Save =\n/** @class */\nfunction () {\n  /**\n   * Initialize new instance of {save}\n   */\n  function Save() {// tslint:disable\n  }\n  /**\n   * Saves the file with specified name and sends the file to client browser\n   * @param  {string} fileName- file name to save.\n   * @param  {Blob} buffer- the content to write in file\n   * @param  {boolean} isMicrosoftBrowser- specify whether microsoft browser or not\n   * @returns {void}\n   */\n\n\n  Save.save = function (fileName, buffer) {\n    if (fileName === null || fileName === undefined || fileName === '') {\n      throw new Error('ArgumentException: fileName cannot be undefined, null or empty');\n    }\n\n    var extension = fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length);\n    var mimeType = this.getMimeType(extension);\n\n    if (mimeType !== '') {\n      buffer = new Blob([buffer], {\n        type: mimeType\n      });\n    }\n\n    if (this.isMicrosoftBrowser) {\n      navigator.msSaveBlob(buffer, fileName);\n    } else {\n      var downloadLink = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');\n      this.saveInternal(fileName, extension, buffer, downloadLink, 'download' in downloadLink);\n    }\n  };\n\n  Save.saveInternal = function (fileName, extension, buffer, downloadLink, hasDownloadAttribute) {\n    if (hasDownloadAttribute) {\n      downloadLink.download = fileName;\n      var dataUrl_1 = window.URL.createObjectURL(buffer);\n      downloadLink.href = dataUrl_1;\n      var event_1 = document.createEvent('MouseEvent');\n      event_1.initEvent('click', true, true);\n      downloadLink.dispatchEvent(event_1);\n      setTimeout(function () {\n        window.URL.revokeObjectURL(dataUrl_1);\n        dataUrl_1 = undefined;\n      });\n    } else {\n      if (extension !== 'docx' && extension !== 'xlsx') {\n        var url = window.URL.createObjectURL(buffer);\n        var isPopupBlocked = window.open(url, '_blank');\n\n        if (!isPopupBlocked) {\n          window.location.href = url;\n        }\n      } else {\n        var reader_1 = new FileReader();\n\n        reader_1.onloadend = function () {\n          var isPopupBlocked = window.open(reader_1.result, '_blank');\n\n          if (!isPopupBlocked) {\n            window.location.href = reader_1.result;\n          }\n        };\n\n        reader_1.readAsDataURL(buffer);\n      }\n    }\n  };\n  /**\n   *\n   * @param {string} extension - get mime type of the specified extension\n   * @private\n   */\n\n\n  Save.getMimeType = function (extension) {\n    var mimeType = '';\n\n    switch (extension) {\n      case 'html':\n        mimeType = 'text/html';\n        break;\n\n      case 'pdf':\n        mimeType = 'application/pdf';\n        break;\n\n      case 'docx':\n        mimeType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\n        break;\n\n      case 'xlsx':\n        mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n        break;\n\n      case 'txt':\n        mimeType = 'text/plain';\n        break;\n    }\n\n    return mimeType;\n  };\n\n  return Save;\n}();\n\nexport { Save };","map":{"version":3,"names":["Save","save","fileName","buffer","undefined","Error","extension","substring","lastIndexOf","length","mimeType","getMimeType","Blob","type","isMicrosoftBrowser","navigator","msSaveBlob","downloadLink","document","createElementNS","saveInternal","hasDownloadAttribute","download","dataUrl_1","window","URL","createObjectURL","href","event_1","createEvent","initEvent","dispatchEvent","setTimeout","revokeObjectURL","url","isPopupBlocked","open","location","reader_1","FileReader","onloadend","result","readAsDataURL"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-file-utils/src/save.js"],"sourcesContent":["/**\n * Save class provide method to save file\n * ```typescript\n * let blob : Blob = new Blob([''], { type: 'text/plain' });\n * Save.save('fileName.txt',blob);\n */\nvar Save = /** @class */ (function () {\n    /**\n     * Initialize new instance of {save}\n     */\n    function Save() {\n        // tslint:disable\n    }\n    /**\n     * Saves the file with specified name and sends the file to client browser\n     * @param  {string} fileName- file name to save.\n     * @param  {Blob} buffer- the content to write in file\n     * @param  {boolean} isMicrosoftBrowser- specify whether microsoft browser or not\n     * @returns {void}\n     */\n    Save.save = function (fileName, buffer) {\n        if (fileName === null || fileName === undefined || fileName === '') {\n            throw new Error('ArgumentException: fileName cannot be undefined, null or empty');\n        }\n        var extension = fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length);\n        var mimeType = this.getMimeType(extension);\n        if (mimeType !== '') {\n            buffer = new Blob([buffer], { type: mimeType });\n        }\n        if (this.isMicrosoftBrowser) {\n            navigator.msSaveBlob(buffer, fileName);\n        }\n        else {\n            var downloadLink = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');\n            this.saveInternal(fileName, extension, buffer, downloadLink, 'download' in downloadLink);\n        }\n    };\n    Save.saveInternal = function (fileName, extension, buffer, downloadLink, hasDownloadAttribute) {\n        if (hasDownloadAttribute) {\n            downloadLink.download = fileName;\n            var dataUrl_1 = window.URL.createObjectURL(buffer);\n            downloadLink.href = dataUrl_1;\n            var event_1 = document.createEvent('MouseEvent');\n            event_1.initEvent('click', true, true);\n            downloadLink.dispatchEvent(event_1);\n            setTimeout(function () {\n                window.URL.revokeObjectURL(dataUrl_1);\n                dataUrl_1 = undefined;\n            });\n        }\n        else {\n            if (extension !== 'docx' && extension !== 'xlsx') {\n                var url = window.URL.createObjectURL(buffer);\n                var isPopupBlocked = window.open(url, '_blank');\n                if (!isPopupBlocked) {\n                    window.location.href = url;\n                }\n            }\n            else {\n                var reader_1 = new FileReader();\n                reader_1.onloadend = function () {\n                    var isPopupBlocked = window.open(reader_1.result, '_blank');\n                    if (!isPopupBlocked) {\n                        window.location.href = reader_1.result;\n                    }\n                };\n                reader_1.readAsDataURL(buffer);\n            }\n        }\n    };\n    /**\n     *\n     * @param {string} extension - get mime type of the specified extension\n     * @private\n     */\n    Save.getMimeType = function (extension) {\n        var mimeType = '';\n        switch (extension) {\n            case 'html':\n                mimeType = 'text/html';\n                break;\n            case 'pdf':\n                mimeType = 'application/pdf';\n                break;\n            case 'docx':\n                mimeType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\n                break;\n            case 'xlsx':\n                mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n                break;\n            case 'txt':\n                mimeType = 'text/plain';\n                break;\n        }\n        return mimeType;\n    };\n    return Save;\n}());\nexport { Save };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}