{"ast":null,"code":"/**\n * PdfStringFormat.ts class for EJ2-PDF\n */\nimport { PdfVerticalAlignment } from './../../graphics/enum';\nimport { PdfSubSuperScript, PdfWordWrapType } from './../../graphics/fonts/enum';\n/**\n * `PdfStringFormat` class represents the text layout information on PDF.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a pages to the document\n * let page1 : PdfPage = document.pages.add();\n * // set font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // set brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * //\n * // set the format for string\n * let stringFormat : PdfStringFormat = new PdfStringFormat();\n * // set the text alignment\n * stringFormat.alignment = PdfTextAlignment.Center;\n * // set the vertical alignment\n * stringFormat.lineAlignment = PdfVerticalAlignment.Middle;\n * //\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\n\nvar PdfStringFormat =\n/** @class */\nfunction () {\n  function PdfStringFormat(arg1, arg2) {\n    /**\n     * The `scaling factor` of the text being drawn.\n     * @private\n     */\n    this.scalingFactor = 100.0;\n    /**\n     * Indicates text `wrapping` type.\n     * @private\n     */\n\n    this.wordWrapType = PdfWordWrapType.Word;\n    this.internalLineLimit = true;\n    this.wordWrapType = PdfWordWrapType.Word;\n\n    if (typeof arg1 !== 'undefined' && typeof arg1 !== 'string') {\n      this.textAlignment = arg1;\n    }\n\n    if (typeof arg2 !== 'undefined') {\n      this.verticalAlignment = arg2;\n    }\n  }\n\n  Object.defineProperty(PdfStringFormat.prototype, \"alignment\", {\n    //Properties\n\n    /**\n     * Gets or sets the `horizontal` text alignment\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * //\n     * // set the format for string\n     * let stringFormat : PdfStringFormat = new PdfStringFormat();\n     * // set the text alignment\n     * stringFormat.alignment = PdfTextAlignment.Center;\n     * //\n     * // draw the text\n     * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function get() {\n      return this.textAlignment;\n    },\n    set: function set(value) {\n      this.textAlignment = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"textDirection\", {\n    get: function get() {\n      return this.direction;\n    },\n    set: function set(value) {\n      this.direction = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"lineAlignment\", {\n    /**\n     * Gets or sets the `vertical` text alignment.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * //\n     * // set the format for string\n     * let stringFormat : PdfStringFormat = new PdfStringFormat();\n     * // set the vertical alignment\n     * stringFormat.lineAlignment = PdfVerticalAlignment.Middle;\n     * //\n     * // draw the text\n     * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function get() {\n      if (typeof this.verticalAlignment === 'undefined' || this.verticalAlignment == null) {\n        return PdfVerticalAlignment.Top;\n      } else {\n        return this.verticalAlignment;\n      }\n    },\n    set: function set(value) {\n      this.verticalAlignment = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"rightToLeft\", {\n    /**\n     * Gets or sets the value that indicates text `direction` mode.\n     * @private\n     */\n    get: function get() {\n      if (typeof this.isRightToLeft === 'undefined' || this.isRightToLeft == null) {\n        return false;\n      } else {\n        return this.isRightToLeft;\n      }\n    },\n    set: function set(value) {\n      this.isRightToLeft = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"characterSpacing\", {\n    /**\n     * Gets or sets value that indicates a `size` among the characters in the text.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * //\n     * // set the format for string\n     * let stringFormat : PdfStringFormat = new PdfStringFormat();\n     * // set character spacing\n     * stringFormat.characterSpacing = 10;\n     * //\n     * // draw the text\n     * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function get() {\n      if (typeof this.internalCharacterSpacing === 'undefined' || this.internalCharacterSpacing == null) {\n        return 0;\n      } else {\n        return this.internalCharacterSpacing;\n      }\n    },\n    set: function set(value) {\n      this.internalCharacterSpacing = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"wordSpacing\", {\n    /**\n     * Gets or sets value that indicates a `size` among the words in the text.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * //\n     * // set the format for string\n     * let stringFormat : PdfStringFormat = new PdfStringFormat();\n     * // set word spacing\n     * stringFormat.wordSpacing = 10;\n     * //\n     * // draw the text\n     * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function get() {\n      if (typeof this.internalWordSpacing === 'undefined' || this.internalWordSpacing == null) {\n        return 0;\n      } else {\n        return this.internalWordSpacing;\n      }\n    },\n    set: function set(value) {\n      this.internalWordSpacing = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"lineSpacing\", {\n    /**\n     * Gets or sets value that indicates the `vertical distance` between the baselines of adjacent lines of text.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * // set string\n     * let text : string = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n     * incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitati';\n     * // set rectangle bounds\n     * let rectangle : RectangleF = new RectangleF({x : 0, y : 0}, {width : 300, height : 100})\n     * //\n     * // set the format for string\n     * let stringFormat : PdfStringFormat = new PdfStringFormat();\n     * // set line spacing\n     * stringFormat.lineSpacing = 10;\n     * //\n     * // draw the text\n     * page1.graphics.drawString(text, font, blackBrush, rectangle, stringFormat);\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function get() {\n      if (typeof this.leading === 'undefined' || this.leading == null) {\n        return 0;\n      } else {\n        return this.leading;\n      }\n    },\n    set: function set(value) {\n      this.leading = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"clipPath\", {\n    /**\n     * Gets or sets a value indicating whether the text is `clipped` or not.\n     * @private\n     */\n    get: function get() {\n      if (typeof this.clip === 'undefined' || this.clip == null) {\n        return false;\n      } else {\n        return this.clip;\n      }\n    },\n    set: function set(value) {\n      this.clip = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"subSuperScript\", {\n    /**\n     * Gets or sets value indicating whether the text is in `subscript or superscript` mode.\n     * @private\n     */\n    get: function get() {\n      if (typeof this.pdfSubSuperScript === 'undefined' || this.pdfSubSuperScript == null) {\n        return PdfSubSuperScript.None;\n      } else {\n        return this.pdfSubSuperScript;\n      }\n    },\n    set: function set(value) {\n      this.pdfSubSuperScript = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"paragraphIndent\", {\n    /**\n     * Gets or sets the `indent` of the first line in the paragraph.\n     * @private\n     */\n    get: function get() {\n      if (typeof this.internalParagraphIndent === 'undefined' || this.internalParagraphIndent == null) {\n        return 0;\n      } else {\n        return this.internalParagraphIndent;\n      }\n    },\n    set: function set(value) {\n      this.internalParagraphIndent = value;\n      this.firstLineIndent = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"lineLimit\", {\n    /**\n     * Gets or sets a value indicating whether [`line limit`].\n     * @private\n     */\n    get: function get() {\n      return this.internalLineLimit;\n    },\n    set: function set(value) {\n      this.internalLineLimit = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"measureTrailingSpaces\", {\n    /**\n     * Gets or sets a value indicating whether [`measure trailing spaces`].\n     * @private\n     */\n    get: function get() {\n      if (typeof this.trailingSpaces === 'undefined' || this.trailingSpaces == null) {\n        return false;\n      } else {\n        return this.trailingSpaces;\n      }\n    },\n    set: function set(value) {\n      this.trailingSpaces = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"noClip\", {\n    /**\n     * Gets or sets a value indicating whether [`no clip`].\n     * @private\n     */\n    get: function get() {\n      if (typeof this.isNoClip === 'undefined' || this.isNoClip == null) {\n        return false;\n      } else {\n        return this.isNoClip;\n      }\n    },\n    set: function set(value) {\n      this.isNoClip = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"wordWrap\", {\n    /**\n     * Gets or sets value indicating type of the text `wrapping`.\n     * @private\n     */\n    get: function get() {\n      // if (typeof this.wrapType === 'undefined' || this.wrapType == null) {\n      //     return PdfWordWrapType.Word;\n      // } else {\n      return this.wordWrapType; // }\n    },\n    set: function set(value) {\n      this.wordWrapType = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"horizontalScalingFactor\", {\n    /**\n     * Gets or sets the `scaling factor`.\n     * @private\n     */\n    get: function get() {\n      // if (typeof this.scalingFactor === 'undefined' || this.scalingFactor == null) {\n      //     return 100;\n      // } else {\n      return this.scalingFactor; // }\n    },\n    set: function set(value) {\n      if (value <= 0) {\n        throw new Error('ArgumentOutOfRangeException:The scaling factor cant be less of equal to zero, ScalingFactor');\n      }\n\n      this.scalingFactor = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"firstLineIndent\", {\n    /**\n     * Gets or sets the `indent` of the first line in the text.\n     * @private\n     */\n    get: function get() {\n      if (typeof this.initialLineIndent === 'undefined' || this.initialLineIndent == null) {\n        return 0;\n      } else {\n        return this.initialLineIndent;\n      }\n    },\n    set: function set(value) {\n      this.initialLineIndent = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * `Clones` the object.\n   * @private\n   */\n  //IClonable implementation\n\n  PdfStringFormat.prototype.clone = function () {\n    var format = this;\n    return format;\n  };\n\n  return PdfStringFormat;\n}();\n\nexport { PdfStringFormat };","map":{"version":3,"names":["PdfVerticalAlignment","PdfSubSuperScript","PdfWordWrapType","PdfStringFormat","arg1","arg2","scalingFactor","wordWrapType","Word","internalLineLimit","textAlignment","verticalAlignment","Object","defineProperty","prototype","get","set","value","enumerable","configurable","direction","Top","isRightToLeft","internalCharacterSpacing","internalWordSpacing","leading","clip","pdfSubSuperScript","None","internalParagraphIndent","firstLineIndent","trailingSpaces","isNoClip","Error","initialLineIndent","clone","format"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-string-format.js"],"sourcesContent":["/**\n * PdfStringFormat.ts class for EJ2-PDF\n */\nimport { PdfVerticalAlignment } from './../../graphics/enum';\nimport { PdfSubSuperScript, PdfWordWrapType } from './../../graphics/fonts/enum';\n/**\n * `PdfStringFormat` class represents the text layout information on PDF.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a pages to the document\n * let page1 : PdfPage = document.pages.add();\n * // set font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // set brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * //\n * // set the format for string\n * let stringFormat : PdfStringFormat = new PdfStringFormat();\n * // set the text alignment\n * stringFormat.alignment = PdfTextAlignment.Center;\n * // set the vertical alignment\n * stringFormat.lineAlignment = PdfVerticalAlignment.Middle;\n * //\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nvar PdfStringFormat = /** @class */ (function () {\n    function PdfStringFormat(arg1, arg2) {\n        /**\n         * The `scaling factor` of the text being drawn.\n         * @private\n         */\n        this.scalingFactor = 100.0;\n        /**\n         * Indicates text `wrapping` type.\n         * @private\n         */\n        this.wordWrapType = PdfWordWrapType.Word;\n        this.internalLineLimit = true;\n        this.wordWrapType = PdfWordWrapType.Word;\n        if ((typeof arg1 !== 'undefined') && (typeof arg1 !== 'string')) {\n            this.textAlignment = arg1;\n        }\n        if (typeof arg2 !== 'undefined') {\n            this.verticalAlignment = arg2;\n        }\n    }\n    Object.defineProperty(PdfStringFormat.prototype, \"alignment\", {\n        //Properties\n        /**\n         * Gets or sets the `horizontal` text alignment\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // add a pages to the document\n         * let page1 : PdfPage = document.pages.add();\n         * // set font\n         * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n         * // set brush\n         * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n         * //\n         * // set the format for string\n         * let stringFormat : PdfStringFormat = new PdfStringFormat();\n         * // set the text alignment\n         * stringFormat.alignment = PdfTextAlignment.Center;\n         * //\n         * // draw the text\n         * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n         * // save the document\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this.textAlignment;\n        },\n        set: function (value) {\n            this.textAlignment = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"textDirection\", {\n        get: function () {\n            return this.direction;\n        },\n        set: function (value) {\n            this.direction = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"lineAlignment\", {\n        /**\n         * Gets or sets the `vertical` text alignment.\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // add a pages to the document\n         * let page1 : PdfPage = document.pages.add();\n         * // set font\n         * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n         * // set brush\n         * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n         * //\n         * // set the format for string\n         * let stringFormat : PdfStringFormat = new PdfStringFormat();\n         * // set the vertical alignment\n         * stringFormat.lineAlignment = PdfVerticalAlignment.Middle;\n         * //\n         * // draw the text\n         * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n         * // save the document\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this.verticalAlignment === 'undefined' || this.verticalAlignment == null) {\n                return PdfVerticalAlignment.Top;\n            }\n            else {\n                return this.verticalAlignment;\n            }\n        },\n        set: function (value) {\n            this.verticalAlignment = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"rightToLeft\", {\n        /**\n         * Gets or sets the value that indicates text `direction` mode.\n         * @private\n         */\n        get: function () {\n            if (typeof this.isRightToLeft === 'undefined' || this.isRightToLeft == null) {\n                return false;\n            }\n            else {\n                return this.isRightToLeft;\n            }\n        },\n        set: function (value) {\n            this.isRightToLeft = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"characterSpacing\", {\n        /**\n         * Gets or sets value that indicates a `size` among the characters in the text.\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // add a pages to the document\n         * let page1 : PdfPage = document.pages.add();\n         * // set font\n         * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n         * // set brush\n         * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n         * //\n         * // set the format for string\n         * let stringFormat : PdfStringFormat = new PdfStringFormat();\n         * // set character spacing\n         * stringFormat.characterSpacing = 10;\n         * //\n         * // draw the text\n         * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n         * // save the document\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this.internalCharacterSpacing === 'undefined' || this.internalCharacterSpacing == null) {\n                return 0;\n            }\n            else {\n                return this.internalCharacterSpacing;\n            }\n        },\n        set: function (value) {\n            this.internalCharacterSpacing = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"wordSpacing\", {\n        /**\n         * Gets or sets value that indicates a `size` among the words in the text.\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // add a pages to the document\n         * let page1 : PdfPage = document.pages.add();\n         * // set font\n         * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n         * // set brush\n         * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n         * //\n         * // set the format for string\n         * let stringFormat : PdfStringFormat = new PdfStringFormat();\n         * // set word spacing\n         * stringFormat.wordSpacing = 10;\n         * //\n         * // draw the text\n         * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n         * // save the document\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this.internalWordSpacing === 'undefined' || this.internalWordSpacing == null) {\n                return 0;\n            }\n            else {\n                return this.internalWordSpacing;\n            }\n        },\n        set: function (value) {\n            this.internalWordSpacing = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"lineSpacing\", {\n        /**\n         * Gets or sets value that indicates the `vertical distance` between the baselines of adjacent lines of text.\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // add a pages to the document\n         * let page1 : PdfPage = document.pages.add();\n         * // set font\n         * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n         * // set brush\n         * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n         * // set string\n         * let text : string = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n         * incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitati';\n         * // set rectangle bounds\n         * let rectangle : RectangleF = new RectangleF({x : 0, y : 0}, {width : 300, height : 100})\n         * //\n         * // set the format for string\n         * let stringFormat : PdfStringFormat = new PdfStringFormat();\n         * // set line spacing\n         * stringFormat.lineSpacing = 10;\n         * //\n         * // draw the text\n         * page1.graphics.drawString(text, font, blackBrush, rectangle, stringFormat);\n         * // save the document\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this.leading === 'undefined' || this.leading == null) {\n                return 0;\n            }\n            else {\n                return this.leading;\n            }\n        },\n        set: function (value) {\n            this.leading = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"clipPath\", {\n        /**\n         * Gets or sets a value indicating whether the text is `clipped` or not.\n         * @private\n         */\n        get: function () {\n            if (typeof this.clip === 'undefined' || this.clip == null) {\n                return false;\n            }\n            else {\n                return this.clip;\n            }\n        },\n        set: function (value) {\n            this.clip = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"subSuperScript\", {\n        /**\n         * Gets or sets value indicating whether the text is in `subscript or superscript` mode.\n         * @private\n         */\n        get: function () {\n            if (typeof this.pdfSubSuperScript === 'undefined' || this.pdfSubSuperScript == null) {\n                return PdfSubSuperScript.None;\n            }\n            else {\n                return this.pdfSubSuperScript;\n            }\n        },\n        set: function (value) {\n            this.pdfSubSuperScript = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"paragraphIndent\", {\n        /**\n         * Gets or sets the `indent` of the first line in the paragraph.\n         * @private\n         */\n        get: function () {\n            if (typeof this.internalParagraphIndent === 'undefined' || this.internalParagraphIndent == null) {\n                return 0;\n            }\n            else {\n                return this.internalParagraphIndent;\n            }\n        },\n        set: function (value) {\n            this.internalParagraphIndent = value;\n            this.firstLineIndent = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"lineLimit\", {\n        /**\n         * Gets or sets a value indicating whether [`line limit`].\n         * @private\n         */\n        get: function () {\n            return this.internalLineLimit;\n        },\n        set: function (value) {\n            this.internalLineLimit = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"measureTrailingSpaces\", {\n        /**\n         * Gets or sets a value indicating whether [`measure trailing spaces`].\n         * @private\n         */\n        get: function () {\n            if (typeof this.trailingSpaces === 'undefined' || this.trailingSpaces == null) {\n                return false;\n            }\n            else {\n                return this.trailingSpaces;\n            }\n        },\n        set: function (value) {\n            this.trailingSpaces = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"noClip\", {\n        /**\n         * Gets or sets a value indicating whether [`no clip`].\n         * @private\n         */\n        get: function () {\n            if (typeof this.isNoClip === 'undefined' || this.isNoClip == null) {\n                return false;\n            }\n            else {\n                return this.isNoClip;\n            }\n        },\n        set: function (value) {\n            this.isNoClip = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"wordWrap\", {\n        /**\n         * Gets or sets value indicating type of the text `wrapping`.\n         * @private\n         */\n        get: function () {\n            // if (typeof this.wrapType === 'undefined' || this.wrapType == null) {\n            //     return PdfWordWrapType.Word;\n            // } else {\n            return this.wordWrapType;\n            // }\n        },\n        set: function (value) {\n            this.wordWrapType = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"horizontalScalingFactor\", {\n        /**\n         * Gets or sets the `scaling factor`.\n         * @private\n         */\n        get: function () {\n            // if (typeof this.scalingFactor === 'undefined' || this.scalingFactor == null) {\n            //     return 100;\n            // } else {\n            return this.scalingFactor;\n            // }\n        },\n        set: function (value) {\n            if (value <= 0) {\n                throw new Error('ArgumentOutOfRangeException:The scaling factor cant be less of equal to zero, ScalingFactor');\n            }\n            this.scalingFactor = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"firstLineIndent\", {\n        /**\n         * Gets or sets the `indent` of the first line in the text.\n         * @private\n         */\n        get: function () {\n            if (typeof this.initialLineIndent === 'undefined' || this.initialLineIndent == null) {\n                return 0;\n            }\n            else {\n                return this.initialLineIndent;\n            }\n        },\n        set: function (value) {\n            this.initialLineIndent = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * `Clones` the object.\n     * @private\n     */\n    //IClonable implementation\n    PdfStringFormat.prototype.clone = function () {\n        var format = this;\n        return format;\n    };\n    return PdfStringFormat;\n}());\nexport { PdfStringFormat };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}