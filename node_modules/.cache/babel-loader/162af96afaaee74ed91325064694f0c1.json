{"ast":null,"code":"/**\n * Functions related to dom operations.\n */\nimport { EventHandler } from './event-handler';\nimport { isNullOrUndefined, getValue, setValue, isObject, extend } from './util';\nimport { VirtualDOM } from './virtual-dom';\nvar SVG_REG = /^svg|^path|^g/;\n/**\n * Function to create Html element.\n * @param tagName - Name of the tag, id and class names.\n * @param properties - Object to set properties in the element.\n * @param properties.id - To set the id to the created element.\n * @param properties.className - To add classes to the element.\n * @param properties.innerHTML - To set the innerHTML to element.\n * @param properties.styles - To set the some custom styles to element.\n * @param properties.attrs - To set the attributes to element.\n * @private\n */\n\nexport function createElement(tagName, properties) {\n  //tslint:disable-next-line\n  var element = SVG_REG.test(tagName) ? document.createElementNS('http://www.w3.org/2000/svg', tagName) : document.createElement(tagName);\n\n  if (typeof properties === 'undefined') {\n    return element;\n  }\n\n  element.innerHTML = properties.innerHTML ? properties.innerHTML : '';\n\n  if (properties.className !== undefined) {\n    element.className = properties.className;\n  }\n\n  if (properties.id !== undefined) {\n    element.id = properties.id;\n  }\n\n  if (properties.styles !== undefined) {\n    element.setAttribute('style', properties.styles);\n  }\n\n  if (properties.attrs !== undefined) {\n    attributes(element, properties.attrs);\n  }\n\n  return element;\n}\n/**\n * The function used to add the classes to array of elements\n * @param  {Element[]|NodeList} elements - An array of elements that need to add a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @private\n */\n\nexport function addClass(elements, classes) {\n  var classList = getClassList(classes);\n\n  for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n    var ele = _a[_i];\n\n    if (ele && classList) {\n      for (var _b = 0, classList_1 = classList; _b < classList_1.length; _b++) {\n        var className = classList_1[_b];\n\n        if (isObject(ele)) {\n          var curClass = getValue('attributes.className', ele);\n\n          if (isNullOrUndefined(curClass)) {\n            setValue('attributes.className', className, ele);\n          } else if (!new RegExp('\\\\b' + className + '\\\\b', 'i').test(curClass)) {\n            setValue('attributes.className', curClass + ' ' + className, ele);\n          }\n        } else {\n          if (!ele.classList.contains(className)) {\n            ele.classList.add(className);\n          }\n        }\n      }\n    }\n  }\n\n  return elements;\n}\n/**\n * The function used to add the classes to array of elements\n * @param  {Element[]|NodeList} elements - An array of elements that need to remove a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @private\n */\n\nexport function removeClass(elements, classes) {\n  var classList = getClassList(classes);\n\n  for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n    var ele = _a[_i];\n\n    if (ele && classList) {\n      var flag = isObject(ele);\n      var canRemove = flag ? getValue('attributes.className', ele) : ele.className !== '';\n\n      if (canRemove) {\n        for (var _b = 0, classList_2 = classList; _b < classList_2.length; _b++) {\n          var className = classList_2[_b];\n\n          if (flag) {\n            var classes_1 = getValue('attributes.className', ele);\n            var classArr = classes_1.split(' ');\n            var index = classArr.indexOf(className);\n\n            if (index !== -1) {\n              classArr.splice(index, 1);\n            }\n\n            setValue('attributes.className', classArr.join(' '), ele);\n          } else {\n            ele.classList.remove(className);\n          }\n        }\n      }\n    }\n  }\n\n  return elements;\n}\n\nfunction getClassList(classes) {\n  var classList = [];\n\n  if (typeof classes === 'string') {\n    classList.push(classes);\n  } else {\n    classList = classes;\n  }\n\n  return classList;\n}\n/**\n * The function used to check element is visible or not.\n * @param  {Element|Node} element - An element the need to check visibility\n * @private\n */\n\n\nexport function isVisible(element) {\n  var ele = element;\n  return ele.style.visibility === '' && ele.offsetWidth > 0;\n}\n/**\n * The function used to insert an array of elements into a first of the element.\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to prepend.\n * @param  {Element} toElement - An element that is going to prepend.\n * @private\n */\n\nexport function prepend(fromElements, toElement, isEval) {\n  //tslint:disable:no-any\n  if (isObject(toElement)) {\n    VirtualDOM.prepend(fromElements, toElement);\n  } else {\n    var docFrag = document.createDocumentFragment();\n\n    for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n      var ele = _a[_i];\n      docFrag.appendChild(ele);\n    }\n\n    toElement.insertBefore(docFrag, toElement.firstElementChild);\n\n    if (isEval) {\n      executeScript(toElement);\n    }\n  }\n\n  return fromElements;\n}\n/**\n * The function used to insert an array of elements into last of the element.\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to append.\n * @param  {Element} toElement - An element that is going to prepend.\n * @private\n */\n\nexport function append(fromElements, toElement, isEval) {\n  if (isObject(toElement)) {\n    VirtualDOM.append(fromElements, toElement);\n  } else {\n    var docFrag = document.createDocumentFragment();\n\n    for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n      var ele = _a[_i];\n      docFrag.appendChild(ele);\n    }\n\n    toElement.appendChild(docFrag);\n\n    if (isEval) {\n      executeScript(toElement);\n    }\n  }\n\n  return fromElements;\n}\n/**\n * The function is used to evaluate script from Ajax request\n * @param ele - An element is going to evaluate the script\n */\n\nfunction executeScript(ele) {\n  var eleArray = ele.querySelectorAll('script');\n  eleArray.forEach(function (element) {\n    var script = document.createElement('script');\n    script.text = element.innerHTML;\n    document.head.appendChild(script);\n    detach(script);\n  });\n}\n/**\n * The function used to remove the element from the\n * @param  {Element|Node|HTMLElement} element - An element that is going to detach from the Dom\n * @private\n */\n\n\nexport function detach(element) {\n  if (isObject(element)) {\n    return VirtualDOM.detach(element);\n  } else {\n    var parentNode = element.parentNode;\n\n    if (parentNode) {\n      return parentNode.removeChild(element);\n    }\n  }\n} //tslint: enable:no-any\n\n/**\n * The function used to remove the element from Dom also clear the bounded events\n * @param  {Element|Node|HTMLElement} element - An element remove from the Dom\n * @private\n */\n\nexport function remove(element) {\n  if (isObject(element)) {\n    VirtualDOM.detach(element);\n  } else {\n    var parentNode = element.parentNode;\n    EventHandler.clearEvents(element);\n    parentNode.removeChild(element);\n  }\n}\n/**\n * The function helps to set multiple attributes to an element\n * @param  {Element|Node} element - An element that need to set attributes.\n * @param  {{[key:string]:string}} attributes - JSON Object that is going to as attributes.\n * @private\n */\n\nexport function attributes(element, attributes) {\n  var keys = Object.keys(attributes);\n  var ele = element;\n\n  if (ele) {\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n      var key = keys_1[_i];\n\n      if (isObject(ele)) {\n        var iKey = key;\n\n        if (key === 'tabindex') {\n          iKey = 'tabIndex';\n        }\n\n        ele.attributes[iKey] = attributes[key];\n      } else {\n        ele.setAttribute(key, attributes[key]);\n      }\n    }\n  }\n\n  return ele;\n}\n/**\n * The function selects the element from giving context.\n * @param  {string} selector - Selector string need fetch element from the\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\n * @private\n */\n//tslint:disable-next-line\n\nexport function select(selector, context, needsVDOM) {\n  if (context === void 0) {\n    context = document;\n  }\n\n  if (isObject(context) && needsVDOM) {\n    //tslint:disable-next-line\n    return VirtualDOM.vDomSelector({\n      ele: context,\n      selector: selector,\n      selectAll: false\n    });\n  } else {\n    selector = querySelectId(selector);\n    return context.querySelector(selector);\n  }\n}\n/**\n * The function selects an array of element from the given context.\n * @param  {string} selector - Selector string need fetch element from the\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\n * @private\n */\n\nexport function selectAll(selector, context, needsVDOM) {\n  if (context === void 0) {\n    context = document;\n  }\n\n  if (isObject(context) && !needsVDOM) {\n    //tslint:disable-next-line\n    return VirtualDOM.vDomSelector({\n      ele: context,\n      selector: selector,\n      selectAll: true\n    });\n  } else {\n    selector = querySelectId(selector);\n    var nodeList = context.querySelectorAll(selector);\n    return nodeList;\n  }\n}\n\nfunction querySelectId(selector) {\n  var charRegex = /(!|\"|\\$|%|&|'|\\(|\\)|\\*|\\/|:|;|<|=|\\?|@|\\]|\\^|`|{|}|\\||\\+|~)/g;\n\n  if (selector.match(/#[0-9]/g) || selector.match(charRegex)) {\n    var idList = selector.split(',');\n\n    for (var i = 0; i < idList.length; i++) {\n      var list = idList[i].split(' ');\n\n      for (var j = 0; j < list.length; j++) {\n        if (list[j].indexOf('#') > -1) {\n          if (!list[j].match(/\\[.*\\]/)) {\n            var splitId = list[j].split('#');\n\n            if (splitId[1].match(/^\\d/) || splitId[1].match(charRegex)) {\n              var setId = list[j].split('.');\n              setId[0] = setId[0].replace(/#/, '[id=\\'') + '\\']';\n              list[j] = setId.join('.');\n            }\n          }\n        }\n      }\n\n      idList[i] = list.join(' ');\n    }\n\n    return idList.join(',');\n  }\n\n  return selector;\n}\n/**\n * Returns single closest parent element based on class selector.\n * @param  {Element} element - An element that need to find the closest element.\n * @param  {string} selector - A classSelector of closest element.\n * @private\n */\n\n\nexport function closest(element, selector) {\n  var el = element;\n\n  if (typeof el.closest === 'function') {\n    return el.closest(selector);\n  }\n\n  while (el && el.nodeType === 1) {\n    if (matches(el, selector)) {\n      return el;\n    }\n\n    el = el.parentNode;\n  }\n\n  return null;\n}\n/**\n * Returns all sibling elements of the given element.\n * @param  {Element|Node} element - An element that need to get siblings.\n * @private\n */\n\nexport function siblings(element) {\n  var siblings = [];\n  var childNodes = Array.prototype.slice.call(element.parentNode.childNodes);\n\n  for (var _i = 0, childNodes_1 = childNodes; _i < childNodes_1.length; _i++) {\n    var curNode = childNodes_1[_i];\n\n    if (curNode.nodeType === Node.ELEMENT_NODE && element !== curNode) {\n      siblings.push(curNode);\n    }\n  }\n\n  return siblings;\n}\n/**\n * set the value if not exist. Otherwise set the existing value\n * @param  {HTMLElement} element - An element to which we need to set value.\n * @param  {string} property - Property need to get or set.\n * @param  {string} value - value need to set.\n * @private\n */\n\nexport function getAttributeOrDefault(element, property, value) {\n  var attrVal;\n  var isObj = isObject(element);\n\n  if (isObj) {\n    attrVal = getValue('attributes.' + property, element);\n  } else {\n    attrVal = element.getAttribute(property);\n  }\n\n  if (isNullOrUndefined(attrVal) && value) {\n    if (!isObj) {\n      element.setAttribute(property, value.toString());\n    } else {\n      element.attributes[property] = value;\n    }\n\n    attrVal = value;\n  }\n\n  return attrVal;\n}\n/**\n * Set the style attributes to Html element.\n * @param {HTMLElement} element - Element which we want to set attributes\n * @param {any} attrs - Set the given attributes to element\n * @return {void}\n * @private\n */\n\nexport function setStyleAttribute(element, attrs) {\n  if (attrs !== undefined) {\n    if (isObject(element)) {\n      // tslint:disable-next-line:no-any\n      VirtualDOM.setStyleAttribute(element, attrs);\n    } else {\n      Object.keys(attrs).forEach(function (key) {\n        // tslint:disable-next-line:no-any\n        element.style[key] = attrs[key];\n      });\n    }\n  }\n}\n/**\n * Method for add and remove classes to a dom element.\n * @param {Element} element - Element for add and remove classes\n * @param {string[]} addClasses - List of classes need to be add to the element\n * @param {string[]} removeClasses - List of classes need to be remove from the element\n * @return {void}\n * @private\n */\n\nexport function classList(element, addClasses, removeClasses) {\n  addClass([element], addClasses);\n  removeClass([element], removeClasses);\n}\n/**\n * Method to check whether the element matches the given selector.\n * @param {Element} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @return {void}\n * @private\n */\n\nexport function matches(element, selector) {\n  //tslint:disable-next-line\n  var matches = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;\n\n  if (matches) {\n    return matches.call(element, selector);\n  } else {\n    return [].indexOf.call(document.querySelectorAll(selector), element) !== -1;\n  }\n}\nexport function includeInnerHTML(ele, innerHTML) {\n  if (isObject(ele)) {\n    if (innerHTML === '') {\n      ele.children = [];\n    } else {\n      var res = VirtualDOM.ConvertHTMLToJSon(innerHTML);\n\n      if (res.length) {\n        VirtualDOM.assignParent(res, ele);\n        ele.children = res;\n      }\n    }\n  } else {\n    ele.innerHTML = innerHTML;\n  }\n} //tslint:disable-next-line\n\nexport function containsClass(ele, className) {\n  if (isObject(ele)) {\n    // tslint:disable-next-line:no-any\n    return new RegExp('\\\\b' + className + '\\\\b', 'i').test(ele.attributes.className);\n  } else {\n    return ele.classList.contains(className);\n  }\n}\n/**\n * Method to check whether the element matches the given selector.\n * @param {} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @return {Element | VirtualObject}\n * @private\n */\n//tslint:disable:no-any\n\nexport function cloneNode(element, deep) {\n  if (isObject(element)) {\n    if (deep) {\n      return extend({}, {}, element, true);\n    } else {\n      return {\n        tagName: element.tagName,\n        attributes: element.attributes\n      };\n    }\n  } else {\n    return element.cloneNode(deep);\n  }\n}","map":{"version":3,"names":["EventHandler","isNullOrUndefined","getValue","setValue","isObject","extend","VirtualDOM","SVG_REG","createElement","tagName","properties","element","test","document","createElementNS","innerHTML","className","undefined","id","styles","setAttribute","attrs","attributes","addClass","elements","classes","classList","getClassList","_i","_a","length","ele","_b","classList_1","curClass","RegExp","contains","add","removeClass","flag","canRemove","classList_2","classes_1","classArr","split","index","indexOf","splice","join","remove","push","isVisible","style","visibility","offsetWidth","prepend","fromElements","toElement","isEval","docFrag","createDocumentFragment","appendChild","insertBefore","firstElementChild","executeScript","append","eleArray","querySelectorAll","forEach","script","text","head","detach","parentNode","removeChild","clearEvents","keys","Object","keys_1","key","iKey","select","selector","context","needsVDOM","vDomSelector","selectAll","querySelectId","querySelector","nodeList","charRegex","match","idList","i","list","j","splitId","setId","replace","closest","el","nodeType","matches","siblings","childNodes","Array","prototype","slice","call","childNodes_1","curNode","Node","ELEMENT_NODE","getAttributeOrDefault","property","value","attrVal","isObj","getAttribute","toString","setStyleAttribute","addClasses","removeClasses","msMatchesSelector","webkitMatchesSelector","includeInnerHTML","children","res","ConvertHTMLToJSon","assignParent","containsClass","cloneNode","deep"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-base/src/dom.js"],"sourcesContent":["/**\n * Functions related to dom operations.\n */\nimport { EventHandler } from './event-handler';\nimport { isNullOrUndefined, getValue, setValue, isObject, extend } from './util';\nimport { VirtualDOM } from './virtual-dom';\nvar SVG_REG = /^svg|^path|^g/;\n/**\n * Function to create Html element.\n * @param tagName - Name of the tag, id and class names.\n * @param properties - Object to set properties in the element.\n * @param properties.id - To set the id to the created element.\n * @param properties.className - To add classes to the element.\n * @param properties.innerHTML - To set the innerHTML to element.\n * @param properties.styles - To set the some custom styles to element.\n * @param properties.attrs - To set the attributes to element.\n * @private\n */\nexport function createElement(tagName, properties) {\n    //tslint:disable-next-line\n    var element = (SVG_REG.test(tagName) ? document.createElementNS('http://www.w3.org/2000/svg', tagName) : document.createElement(tagName));\n    if (typeof (properties) === 'undefined') {\n        return element;\n    }\n    element.innerHTML = (properties.innerHTML ? properties.innerHTML : '');\n    if (properties.className !== undefined) {\n        element.className = properties.className;\n    }\n    if (properties.id !== undefined) {\n        element.id = properties.id;\n    }\n    if (properties.styles !== undefined) {\n        element.setAttribute('style', properties.styles);\n    }\n    if (properties.attrs !== undefined) {\n        attributes(element, properties.attrs);\n    }\n    return element;\n}\n/**\n * The function used to add the classes to array of elements\n * @param  {Element[]|NodeList} elements - An array of elements that need to add a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @private\n */\nexport function addClass(elements, classes) {\n    var classList = getClassList(classes);\n    for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n        var ele = _a[_i];\n        if (ele && classList) {\n            for (var _b = 0, classList_1 = classList; _b < classList_1.length; _b++) {\n                var className = classList_1[_b];\n                if (isObject(ele)) {\n                    var curClass = getValue('attributes.className', ele);\n                    if (isNullOrUndefined(curClass)) {\n                        setValue('attributes.className', className, ele);\n                    }\n                    else if (!new RegExp('\\\\b' + className + '\\\\b', 'i').test(curClass)) {\n                        setValue('attributes.className', curClass + ' ' + className, ele);\n                    }\n                }\n                else {\n                    if (!ele.classList.contains(className)) {\n                        ele.classList.add(className);\n                    }\n                }\n            }\n        }\n    }\n    return elements;\n}\n/**\n * The function used to add the classes to array of elements\n * @param  {Element[]|NodeList} elements - An array of elements that need to remove a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @private\n */\nexport function removeClass(elements, classes) {\n    var classList = getClassList(classes);\n    for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n        var ele = _a[_i];\n        if (ele && classList) {\n            var flag = isObject(ele);\n            var canRemove = flag ? getValue('attributes.className', ele) : ele.className !== '';\n            if (canRemove) {\n                for (var _b = 0, classList_2 = classList; _b < classList_2.length; _b++) {\n                    var className = classList_2[_b];\n                    if (flag) {\n                        var classes_1 = getValue('attributes.className', ele);\n                        var classArr = classes_1.split(' ');\n                        var index = classArr.indexOf(className);\n                        if (index !== -1) {\n                            classArr.splice(index, 1);\n                        }\n                        setValue('attributes.className', classArr.join(' '), ele);\n                    }\n                    else {\n                        ele.classList.remove(className);\n                    }\n                }\n            }\n        }\n    }\n    return elements;\n}\nfunction getClassList(classes) {\n    var classList = [];\n    if (typeof classes === 'string') {\n        classList.push(classes);\n    }\n    else {\n        classList = classes;\n    }\n    return classList;\n}\n/**\n * The function used to check element is visible or not.\n * @param  {Element|Node} element - An element the need to check visibility\n * @private\n */\nexport function isVisible(element) {\n    var ele = element;\n    return (ele.style.visibility === '' && ele.offsetWidth > 0);\n}\n/**\n * The function used to insert an array of elements into a first of the element.\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to prepend.\n * @param  {Element} toElement - An element that is going to prepend.\n * @private\n */\nexport function prepend(fromElements, toElement, isEval) {\n    //tslint:disable:no-any\n    if (isObject(toElement)) {\n        VirtualDOM.prepend(fromElements, toElement);\n    }\n    else {\n        var docFrag = document.createDocumentFragment();\n        for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n            var ele = _a[_i];\n            docFrag.appendChild(ele);\n        }\n        toElement.insertBefore(docFrag, toElement.firstElementChild);\n        if (isEval) {\n            executeScript(toElement);\n        }\n    }\n    return fromElements;\n}\n/**\n * The function used to insert an array of elements into last of the element.\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to append.\n * @param  {Element} toElement - An element that is going to prepend.\n * @private\n */\nexport function append(fromElements, toElement, isEval) {\n    if (isObject(toElement)) {\n        VirtualDOM.append(fromElements, toElement);\n    }\n    else {\n        var docFrag = document.createDocumentFragment();\n        for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n            var ele = _a[_i];\n            docFrag.appendChild(ele);\n        }\n        toElement.appendChild(docFrag);\n        if (isEval) {\n            executeScript(toElement);\n        }\n    }\n    return fromElements;\n}\n/**\n * The function is used to evaluate script from Ajax request\n * @param ele - An element is going to evaluate the script\n */\nfunction executeScript(ele) {\n    var eleArray = ele.querySelectorAll('script');\n    eleArray.forEach(function (element) {\n        var script = document.createElement('script');\n        script.text = element.innerHTML;\n        document.head.appendChild(script);\n        detach(script);\n    });\n}\n/**\n * The function used to remove the element from the\n * @param  {Element|Node|HTMLElement} element - An element that is going to detach from the Dom\n * @private\n */\nexport function detach(element) {\n    if (isObject(element)) {\n        return VirtualDOM.detach(element);\n    }\n    else {\n        var parentNode = element.parentNode;\n        if (parentNode) {\n            return parentNode.removeChild(element);\n        }\n    }\n}\n//tslint: enable:no-any\n/**\n * The function used to remove the element from Dom also clear the bounded events\n * @param  {Element|Node|HTMLElement} element - An element remove from the Dom\n * @private\n */\nexport function remove(element) {\n    if (isObject(element)) {\n        VirtualDOM.detach(element);\n    }\n    else {\n        var parentNode = element.parentNode;\n        EventHandler.clearEvents(element);\n        parentNode.removeChild(element);\n    }\n}\n/**\n * The function helps to set multiple attributes to an element\n * @param  {Element|Node} element - An element that need to set attributes.\n * @param  {{[key:string]:string}} attributes - JSON Object that is going to as attributes.\n * @private\n */\nexport function attributes(element, attributes) {\n    var keys = Object.keys(attributes);\n    var ele = element;\n    if (ele) {\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var key = keys_1[_i];\n            if (isObject(ele)) {\n                var iKey = key;\n                if (key === 'tabindex') {\n                    iKey = 'tabIndex';\n                }\n                ele.attributes[iKey] = attributes[key];\n            }\n            else {\n                ele.setAttribute(key, attributes[key]);\n            }\n        }\n    }\n    return ele;\n}\n/**\n * The function selects the element from giving context.\n * @param  {string} selector - Selector string need fetch element from the\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\n * @private\n */\n//tslint:disable-next-line\nexport function select(selector, context, needsVDOM) {\n    if (context === void 0) { context = document; }\n    if (isObject(context) && needsVDOM) {\n        //tslint:disable-next-line\n        return VirtualDOM.vDomSelector({ ele: context, selector: selector, selectAll: false });\n    }\n    else {\n        selector = querySelectId(selector);\n        return context.querySelector(selector);\n    }\n}\n/**\n * The function selects an array of element from the given context.\n * @param  {string} selector - Selector string need fetch element from the\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\n * @private\n */\nexport function selectAll(selector, context, needsVDOM) {\n    if (context === void 0) { context = document; }\n    if (isObject(context) && !needsVDOM) {\n        //tslint:disable-next-line\n        return VirtualDOM.vDomSelector({ ele: context, selector: selector, selectAll: true });\n    }\n    else {\n        selector = querySelectId(selector);\n        var nodeList = context.querySelectorAll(selector);\n        return nodeList;\n    }\n}\nfunction querySelectId(selector) {\n    var charRegex = /(!|\"|\\$|%|&|'|\\(|\\)|\\*|\\/|:|;|<|=|\\?|@|\\]|\\^|`|{|}|\\||\\+|~)/g;\n    if (selector.match(/#[0-9]/g) || selector.match(charRegex)) {\n        var idList = selector.split(',');\n        for (var i = 0; i < idList.length; i++) {\n            var list = idList[i].split(' ');\n            for (var j = 0; j < list.length; j++) {\n                if (list[j].indexOf('#') > -1) {\n                    if (!list[j].match(/\\[.*\\]/)) {\n                        var splitId = list[j].split('#');\n                        if (splitId[1].match(/^\\d/) || splitId[1].match(charRegex)) {\n                            var setId = list[j].split('.');\n                            setId[0] = setId[0].replace(/#/, '[id=\\'') + '\\']';\n                            list[j] = setId.join('.');\n                        }\n                    }\n                }\n            }\n            idList[i] = list.join(' ');\n        }\n        return idList.join(',');\n    }\n    return selector;\n}\n/**\n * Returns single closest parent element based on class selector.\n * @param  {Element} element - An element that need to find the closest element.\n * @param  {string} selector - A classSelector of closest element.\n * @private\n */\nexport function closest(element, selector) {\n    var el = element;\n    if (typeof el.closest === 'function') {\n        return el.closest(selector);\n    }\n    while (el && el.nodeType === 1) {\n        if (matches(el, selector)) {\n            return el;\n        }\n        el = el.parentNode;\n    }\n    return null;\n}\n/**\n * Returns all sibling elements of the given element.\n * @param  {Element|Node} element - An element that need to get siblings.\n * @private\n */\nexport function siblings(element) {\n    var siblings = [];\n    var childNodes = Array.prototype.slice.call(element.parentNode.childNodes);\n    for (var _i = 0, childNodes_1 = childNodes; _i < childNodes_1.length; _i++) {\n        var curNode = childNodes_1[_i];\n        if (curNode.nodeType === Node.ELEMENT_NODE && element !== curNode) {\n            siblings.push(curNode);\n        }\n    }\n    return siblings;\n}\n/**\n * set the value if not exist. Otherwise set the existing value\n * @param  {HTMLElement} element - An element to which we need to set value.\n * @param  {string} property - Property need to get or set.\n * @param  {string} value - value need to set.\n * @private\n */\nexport function getAttributeOrDefault(element, property, value) {\n    var attrVal;\n    var isObj = isObject(element);\n    if (isObj) {\n        attrVal = getValue('attributes.' + property, element);\n    }\n    else {\n        attrVal = element.getAttribute(property);\n    }\n    if (isNullOrUndefined(attrVal) && value) {\n        if (!isObj) {\n            element.setAttribute(property, value.toString());\n        }\n        else {\n            element.attributes[property] = value;\n        }\n        attrVal = value;\n    }\n    return attrVal;\n}\n/**\n * Set the style attributes to Html element.\n * @param {HTMLElement} element - Element which we want to set attributes\n * @param {any} attrs - Set the given attributes to element\n * @return {void}\n * @private\n */\nexport function setStyleAttribute(element, attrs) {\n    if (attrs !== undefined) {\n        if (isObject(element)) {\n            // tslint:disable-next-line:no-any\n            VirtualDOM.setStyleAttribute(element, attrs);\n        }\n        else {\n            Object.keys(attrs).forEach(function (key) {\n                // tslint:disable-next-line:no-any\n                element.style[key] = attrs[key];\n            });\n        }\n    }\n}\n/**\n * Method for add and remove classes to a dom element.\n * @param {Element} element - Element for add and remove classes\n * @param {string[]} addClasses - List of classes need to be add to the element\n * @param {string[]} removeClasses - List of classes need to be remove from the element\n * @return {void}\n * @private\n */\nexport function classList(element, addClasses, removeClasses) {\n    addClass([element], addClasses);\n    removeClass([element], removeClasses);\n}\n/**\n * Method to check whether the element matches the given selector.\n * @param {Element} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @return {void}\n * @private\n */\nexport function matches(element, selector) {\n    //tslint:disable-next-line\n    var matches = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;\n    if (matches) {\n        return matches.call(element, selector);\n    }\n    else {\n        return [].indexOf.call(document.querySelectorAll(selector), element) !== -1;\n    }\n}\nexport function includeInnerHTML(ele, innerHTML) {\n    if (isObject(ele)) {\n        if (innerHTML === '') {\n            ele.children = [];\n        }\n        else {\n            var res = VirtualDOM.ConvertHTMLToJSon(innerHTML);\n            if (res.length) {\n                VirtualDOM.assignParent(res, ele);\n                ele.children = res;\n            }\n        }\n    }\n    else {\n        ele.innerHTML = innerHTML;\n    }\n}\n//tslint:disable-next-line\nexport function containsClass(ele, className) {\n    if (isObject(ele)) {\n        // tslint:disable-next-line:no-any\n        return new RegExp('\\\\b' + className + '\\\\b', 'i').test(ele.attributes.className);\n    }\n    else {\n        return ele.classList.contains(className);\n    }\n}\n/**\n * Method to check whether the element matches the given selector.\n * @param {} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @return {Element | VirtualObject}\n * @private\n */\n//tslint:disable:no-any\nexport function cloneNode(element, deep) {\n    if (isObject(element)) {\n        if (deep) {\n            return extend({}, {}, element, true);\n        }\n        else {\n            return { tagName: element.tagName, attributes: element.attributes };\n        }\n    }\n    else {\n        return element.cloneNode(deep);\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,iBAA7B;AACA,SAASC,iBAAT,EAA4BC,QAA5B,EAAsCC,QAAtC,EAAgDC,QAAhD,EAA0DC,MAA1D,QAAwE,QAAxE;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,IAAIC,OAAO,GAAG,eAAd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAuBC,OAAvB,EAAgCC,UAAhC,EAA4C;EAC/C;EACA,IAAIC,OAAO,GAAIJ,OAAO,CAACK,IAAR,CAAaH,OAAb,IAAwBI,QAAQ,CAACC,eAAT,CAAyB,4BAAzB,EAAuDL,OAAvD,CAAxB,GAA0FI,QAAQ,CAACL,aAAT,CAAuBC,OAAvB,CAAzG;;EACA,IAAI,OAAQC,UAAR,KAAwB,WAA5B,EAAyC;IACrC,OAAOC,OAAP;EACH;;EACDA,OAAO,CAACI,SAAR,GAAqBL,UAAU,CAACK,SAAX,GAAuBL,UAAU,CAACK,SAAlC,GAA8C,EAAnE;;EACA,IAAIL,UAAU,CAACM,SAAX,KAAyBC,SAA7B,EAAwC;IACpCN,OAAO,CAACK,SAAR,GAAoBN,UAAU,CAACM,SAA/B;EACH;;EACD,IAAIN,UAAU,CAACQ,EAAX,KAAkBD,SAAtB,EAAiC;IAC7BN,OAAO,CAACO,EAAR,GAAaR,UAAU,CAACQ,EAAxB;EACH;;EACD,IAAIR,UAAU,CAACS,MAAX,KAAsBF,SAA1B,EAAqC;IACjCN,OAAO,CAACS,YAAR,CAAqB,OAArB,EAA8BV,UAAU,CAACS,MAAzC;EACH;;EACD,IAAIT,UAAU,CAACW,KAAX,KAAqBJ,SAAzB,EAAoC;IAChCK,UAAU,CAACX,OAAD,EAAUD,UAAU,CAACW,KAArB,CAAV;EACH;;EACD,OAAOV,OAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASY,QAAT,CAAkBC,QAAlB,EAA4BC,OAA5B,EAAqC;EACxC,IAAIC,SAAS,GAAGC,YAAY,CAACF,OAAD,CAA5B;;EACA,KAAK,IAAIG,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGL,QAAtB,EAAgCI,EAAE,GAAGC,EAAE,CAACC,MAAxC,EAAgDF,EAAE,EAAlD,EAAsD;IAClD,IAAIG,GAAG,GAAGF,EAAE,CAACD,EAAD,CAAZ;;IACA,IAAIG,GAAG,IAAIL,SAAX,EAAsB;MAClB,KAAK,IAAIM,EAAE,GAAG,CAAT,EAAYC,WAAW,GAAGP,SAA/B,EAA0CM,EAAE,GAAGC,WAAW,CAACH,MAA3D,EAAmEE,EAAE,EAArE,EAAyE;QACrE,IAAIhB,SAAS,GAAGiB,WAAW,CAACD,EAAD,CAA3B;;QACA,IAAI5B,QAAQ,CAAC2B,GAAD,CAAZ,EAAmB;UACf,IAAIG,QAAQ,GAAGhC,QAAQ,CAAC,sBAAD,EAAyB6B,GAAzB,CAAvB;;UACA,IAAI9B,iBAAiB,CAACiC,QAAD,CAArB,EAAiC;YAC7B/B,QAAQ,CAAC,sBAAD,EAAyBa,SAAzB,EAAoCe,GAApC,CAAR;UACH,CAFD,MAGK,IAAI,CAAC,IAAII,MAAJ,CAAW,QAAQnB,SAAR,GAAoB,KAA/B,EAAsC,GAAtC,EAA2CJ,IAA3C,CAAgDsB,QAAhD,CAAL,EAAgE;YACjE/B,QAAQ,CAAC,sBAAD,EAAyB+B,QAAQ,GAAG,GAAX,GAAiBlB,SAA1C,EAAqDe,GAArD,CAAR;UACH;QACJ,CARD,MASK;UACD,IAAI,CAACA,GAAG,CAACL,SAAJ,CAAcU,QAAd,CAAuBpB,SAAvB,CAAL,EAAwC;YACpCe,GAAG,CAACL,SAAJ,CAAcW,GAAd,CAAkBrB,SAAlB;UACH;QACJ;MACJ;IACJ;EACJ;;EACD,OAAOQ,QAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASc,WAAT,CAAqBd,QAArB,EAA+BC,OAA/B,EAAwC;EAC3C,IAAIC,SAAS,GAAGC,YAAY,CAACF,OAAD,CAA5B;;EACA,KAAK,IAAIG,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGL,QAAtB,EAAgCI,EAAE,GAAGC,EAAE,CAACC,MAAxC,EAAgDF,EAAE,EAAlD,EAAsD;IAClD,IAAIG,GAAG,GAAGF,EAAE,CAACD,EAAD,CAAZ;;IACA,IAAIG,GAAG,IAAIL,SAAX,EAAsB;MAClB,IAAIa,IAAI,GAAGnC,QAAQ,CAAC2B,GAAD,CAAnB;MACA,IAAIS,SAAS,GAAGD,IAAI,GAAGrC,QAAQ,CAAC,sBAAD,EAAyB6B,GAAzB,CAAX,GAA2CA,GAAG,CAACf,SAAJ,KAAkB,EAAjF;;MACA,IAAIwB,SAAJ,EAAe;QACX,KAAK,IAAIR,EAAE,GAAG,CAAT,EAAYS,WAAW,GAAGf,SAA/B,EAA0CM,EAAE,GAAGS,WAAW,CAACX,MAA3D,EAAmEE,EAAE,EAArE,EAAyE;UACrE,IAAIhB,SAAS,GAAGyB,WAAW,CAACT,EAAD,CAA3B;;UACA,IAAIO,IAAJ,EAAU;YACN,IAAIG,SAAS,GAAGxC,QAAQ,CAAC,sBAAD,EAAyB6B,GAAzB,CAAxB;YACA,IAAIY,QAAQ,GAAGD,SAAS,CAACE,KAAV,CAAgB,GAAhB,CAAf;YACA,IAAIC,KAAK,GAAGF,QAAQ,CAACG,OAAT,CAAiB9B,SAAjB,CAAZ;;YACA,IAAI6B,KAAK,KAAK,CAAC,CAAf,EAAkB;cACdF,QAAQ,CAACI,MAAT,CAAgBF,KAAhB,EAAuB,CAAvB;YACH;;YACD1C,QAAQ,CAAC,sBAAD,EAAyBwC,QAAQ,CAACK,IAAT,CAAc,GAAd,CAAzB,EAA6CjB,GAA7C,CAAR;UACH,CARD,MASK;YACDA,GAAG,CAACL,SAAJ,CAAcuB,MAAd,CAAqBjC,SAArB;UACH;QACJ;MACJ;IACJ;EACJ;;EACD,OAAOQ,QAAP;AACH;;AACD,SAASG,YAAT,CAAsBF,OAAtB,EAA+B;EAC3B,IAAIC,SAAS,GAAG,EAAhB;;EACA,IAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;IAC7BC,SAAS,CAACwB,IAAV,CAAezB,OAAf;EACH,CAFD,MAGK;IACDC,SAAS,GAAGD,OAAZ;EACH;;EACD,OAAOC,SAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASyB,SAAT,CAAmBxC,OAAnB,EAA4B;EAC/B,IAAIoB,GAAG,GAAGpB,OAAV;EACA,OAAQoB,GAAG,CAACqB,KAAJ,CAAUC,UAAV,KAAyB,EAAzB,IAA+BtB,GAAG,CAACuB,WAAJ,GAAkB,CAAzD;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,OAAT,CAAiBC,YAAjB,EAA+BC,SAA/B,EAA0CC,MAA1C,EAAkD;EACrD;EACA,IAAItD,QAAQ,CAACqD,SAAD,CAAZ,EAAyB;IACrBnD,UAAU,CAACiD,OAAX,CAAmBC,YAAnB,EAAiCC,SAAjC;EACH,CAFD,MAGK;IACD,IAAIE,OAAO,GAAG9C,QAAQ,CAAC+C,sBAAT,EAAd;;IACA,KAAK,IAAIhC,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG2B,YAAtB,EAAoC5B,EAAE,GAAGC,EAAE,CAACC,MAA5C,EAAoDF,EAAE,EAAtD,EAA0D;MACtD,IAAIG,GAAG,GAAGF,EAAE,CAACD,EAAD,CAAZ;MACA+B,OAAO,CAACE,WAAR,CAAoB9B,GAApB;IACH;;IACD0B,SAAS,CAACK,YAAV,CAAuBH,OAAvB,EAAgCF,SAAS,CAACM,iBAA1C;;IACA,IAAIL,MAAJ,EAAY;MACRM,aAAa,CAACP,SAAD,CAAb;IACH;EACJ;;EACD,OAAOD,YAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASS,MAAT,CAAgBT,YAAhB,EAA8BC,SAA9B,EAAyCC,MAAzC,EAAiD;EACpD,IAAItD,QAAQ,CAACqD,SAAD,CAAZ,EAAyB;IACrBnD,UAAU,CAAC2D,MAAX,CAAkBT,YAAlB,EAAgCC,SAAhC;EACH,CAFD,MAGK;IACD,IAAIE,OAAO,GAAG9C,QAAQ,CAAC+C,sBAAT,EAAd;;IACA,KAAK,IAAIhC,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG2B,YAAtB,EAAoC5B,EAAE,GAAGC,EAAE,CAACC,MAA5C,EAAoDF,EAAE,EAAtD,EAA0D;MACtD,IAAIG,GAAG,GAAGF,EAAE,CAACD,EAAD,CAAZ;MACA+B,OAAO,CAACE,WAAR,CAAoB9B,GAApB;IACH;;IACD0B,SAAS,CAACI,WAAV,CAAsBF,OAAtB;;IACA,IAAID,MAAJ,EAAY;MACRM,aAAa,CAACP,SAAD,CAAb;IACH;EACJ;;EACD,OAAOD,YAAP;AACH;AACD;AACA;AACA;AACA;;AACA,SAASQ,aAAT,CAAuBjC,GAAvB,EAA4B;EACxB,IAAImC,QAAQ,GAAGnC,GAAG,CAACoC,gBAAJ,CAAqB,QAArB,CAAf;EACAD,QAAQ,CAACE,OAAT,CAAiB,UAAUzD,OAAV,EAAmB;IAChC,IAAI0D,MAAM,GAAGxD,QAAQ,CAACL,aAAT,CAAuB,QAAvB,CAAb;IACA6D,MAAM,CAACC,IAAP,GAAc3D,OAAO,CAACI,SAAtB;IACAF,QAAQ,CAAC0D,IAAT,CAAcV,WAAd,CAA0BQ,MAA1B;IACAG,MAAM,CAACH,MAAD,CAAN;EACH,CALD;AAMH;AACD;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASG,MAAT,CAAgB7D,OAAhB,EAAyB;EAC5B,IAAIP,QAAQ,CAACO,OAAD,CAAZ,EAAuB;IACnB,OAAOL,UAAU,CAACkE,MAAX,CAAkB7D,OAAlB,CAAP;EACH,CAFD,MAGK;IACD,IAAI8D,UAAU,GAAG9D,OAAO,CAAC8D,UAAzB;;IACA,IAAIA,UAAJ,EAAgB;MACZ,OAAOA,UAAU,CAACC,WAAX,CAAuB/D,OAAvB,CAAP;IACH;EACJ;AACJ,C,CACD;;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASsC,MAAT,CAAgBtC,OAAhB,EAAyB;EAC5B,IAAIP,QAAQ,CAACO,OAAD,CAAZ,EAAuB;IACnBL,UAAU,CAACkE,MAAX,CAAkB7D,OAAlB;EACH,CAFD,MAGK;IACD,IAAI8D,UAAU,GAAG9D,OAAO,CAAC8D,UAAzB;IACAzE,YAAY,CAAC2E,WAAb,CAAyBhE,OAAzB;IACA8D,UAAU,CAACC,WAAX,CAAuB/D,OAAvB;EACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASW,UAAT,CAAoBX,OAApB,EAA6BW,UAA7B,EAAyC;EAC5C,IAAIsD,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYtD,UAAZ,CAAX;EACA,IAAIS,GAAG,GAAGpB,OAAV;;EACA,IAAIoB,GAAJ,EAAS;IACL,KAAK,IAAIH,EAAE,GAAG,CAAT,EAAYkD,MAAM,GAAGF,IAA1B,EAAgChD,EAAE,GAAGkD,MAAM,CAAChD,MAA5C,EAAoDF,EAAE,EAAtD,EAA0D;MACtD,IAAImD,GAAG,GAAGD,MAAM,CAAClD,EAAD,CAAhB;;MACA,IAAIxB,QAAQ,CAAC2B,GAAD,CAAZ,EAAmB;QACf,IAAIiD,IAAI,GAAGD,GAAX;;QACA,IAAIA,GAAG,KAAK,UAAZ,EAAwB;UACpBC,IAAI,GAAG,UAAP;QACH;;QACDjD,GAAG,CAACT,UAAJ,CAAe0D,IAAf,IAAuB1D,UAAU,CAACyD,GAAD,CAAjC;MACH,CAND,MAOK;QACDhD,GAAG,CAACX,YAAJ,CAAiB2D,GAAjB,EAAsBzD,UAAU,CAACyD,GAAD,CAAhC;MACH;IACJ;EACJ;;EACD,OAAOhD,GAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASkD,MAAT,CAAgBC,QAAhB,EAA0BC,OAA1B,EAAmCC,SAAnC,EAA8C;EACjD,IAAID,OAAO,KAAK,KAAK,CAArB,EAAwB;IAAEA,OAAO,GAAGtE,QAAV;EAAqB;;EAC/C,IAAIT,QAAQ,CAAC+E,OAAD,CAAR,IAAqBC,SAAzB,EAAoC;IAChC;IACA,OAAO9E,UAAU,CAAC+E,YAAX,CAAwB;MAAEtD,GAAG,EAAEoD,OAAP;MAAgBD,QAAQ,EAAEA,QAA1B;MAAoCI,SAAS,EAAE;IAA/C,CAAxB,CAAP;EACH,CAHD,MAIK;IACDJ,QAAQ,GAAGK,aAAa,CAACL,QAAD,CAAxB;IACA,OAAOC,OAAO,CAACK,aAAR,CAAsBN,QAAtB,CAAP;EACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,SAAT,CAAmBJ,QAAnB,EAA6BC,OAA7B,EAAsCC,SAAtC,EAAiD;EACpD,IAAID,OAAO,KAAK,KAAK,CAArB,EAAwB;IAAEA,OAAO,GAAGtE,QAAV;EAAqB;;EAC/C,IAAIT,QAAQ,CAAC+E,OAAD,CAAR,IAAqB,CAACC,SAA1B,EAAqC;IACjC;IACA,OAAO9E,UAAU,CAAC+E,YAAX,CAAwB;MAAEtD,GAAG,EAAEoD,OAAP;MAAgBD,QAAQ,EAAEA,QAA1B;MAAoCI,SAAS,EAAE;IAA/C,CAAxB,CAAP;EACH,CAHD,MAIK;IACDJ,QAAQ,GAAGK,aAAa,CAACL,QAAD,CAAxB;IACA,IAAIO,QAAQ,GAAGN,OAAO,CAAChB,gBAAR,CAAyBe,QAAzB,CAAf;IACA,OAAOO,QAAP;EACH;AACJ;;AACD,SAASF,aAAT,CAAuBL,QAAvB,EAAiC;EAC7B,IAAIQ,SAAS,GAAG,8DAAhB;;EACA,IAAIR,QAAQ,CAACS,KAAT,CAAe,SAAf,KAA6BT,QAAQ,CAACS,KAAT,CAAeD,SAAf,CAAjC,EAA4D;IACxD,IAAIE,MAAM,GAAGV,QAAQ,CAACtC,KAAT,CAAe,GAAf,CAAb;;IACA,KAAK,IAAIiD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAAM,CAAC9D,MAA3B,EAAmC+D,CAAC,EAApC,EAAwC;MACpC,IAAIC,IAAI,GAAGF,MAAM,CAACC,CAAD,CAAN,CAAUjD,KAAV,CAAgB,GAAhB,CAAX;;MACA,KAAK,IAAImD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAAChE,MAAzB,EAAiCiE,CAAC,EAAlC,EAAsC;QAClC,IAAID,IAAI,CAACC,CAAD,CAAJ,CAAQjD,OAAR,CAAgB,GAAhB,IAAuB,CAAC,CAA5B,EAA+B;UAC3B,IAAI,CAACgD,IAAI,CAACC,CAAD,CAAJ,CAAQJ,KAAR,CAAc,QAAd,CAAL,EAA8B;YAC1B,IAAIK,OAAO,GAAGF,IAAI,CAACC,CAAD,CAAJ,CAAQnD,KAAR,CAAc,GAAd,CAAd;;YACA,IAAIoD,OAAO,CAAC,CAAD,CAAP,CAAWL,KAAX,CAAiB,KAAjB,KAA2BK,OAAO,CAAC,CAAD,CAAP,CAAWL,KAAX,CAAiBD,SAAjB,CAA/B,EAA4D;cACxD,IAAIO,KAAK,GAAGH,IAAI,CAACC,CAAD,CAAJ,CAAQnD,KAAR,CAAc,GAAd,CAAZ;cACAqD,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,CAASC,OAAT,CAAiB,GAAjB,EAAsB,QAAtB,IAAkC,KAA7C;cACAJ,IAAI,CAACC,CAAD,CAAJ,GAAUE,KAAK,CAACjD,IAAN,CAAW,GAAX,CAAV;YACH;UACJ;QACJ;MACJ;;MACD4C,MAAM,CAACC,CAAD,CAAN,GAAYC,IAAI,CAAC9C,IAAL,CAAU,GAAV,CAAZ;IACH;;IACD,OAAO4C,MAAM,CAAC5C,IAAP,CAAY,GAAZ,CAAP;EACH;;EACD,OAAOkC,QAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASiB,OAAT,CAAiBxF,OAAjB,EAA0BuE,QAA1B,EAAoC;EACvC,IAAIkB,EAAE,GAAGzF,OAAT;;EACA,IAAI,OAAOyF,EAAE,CAACD,OAAV,KAAsB,UAA1B,EAAsC;IAClC,OAAOC,EAAE,CAACD,OAAH,CAAWjB,QAAX,CAAP;EACH;;EACD,OAAOkB,EAAE,IAAIA,EAAE,CAACC,QAAH,KAAgB,CAA7B,EAAgC;IAC5B,IAAIC,OAAO,CAACF,EAAD,EAAKlB,QAAL,CAAX,EAA2B;MACvB,OAAOkB,EAAP;IACH;;IACDA,EAAE,GAAGA,EAAE,CAAC3B,UAAR;EACH;;EACD,OAAO,IAAP;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS8B,QAAT,CAAkB5F,OAAlB,EAA2B;EAC9B,IAAI4F,QAAQ,GAAG,EAAf;EACA,IAAIC,UAAU,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BjG,OAAO,CAAC8D,UAAR,CAAmB+B,UAA9C,CAAjB;;EACA,KAAK,IAAI5E,EAAE,GAAG,CAAT,EAAYiF,YAAY,GAAGL,UAAhC,EAA4C5E,EAAE,GAAGiF,YAAY,CAAC/E,MAA9D,EAAsEF,EAAE,EAAxE,EAA4E;IACxE,IAAIkF,OAAO,GAAGD,YAAY,CAACjF,EAAD,CAA1B;;IACA,IAAIkF,OAAO,CAACT,QAAR,KAAqBU,IAAI,CAACC,YAA1B,IAA0CrG,OAAO,KAAKmG,OAA1D,EAAmE;MAC/DP,QAAQ,CAACrD,IAAT,CAAc4D,OAAd;IACH;EACJ;;EACD,OAAOP,QAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASU,qBAAT,CAA+BtG,OAA/B,EAAwCuG,QAAxC,EAAkDC,KAAlD,EAAyD;EAC5D,IAAIC,OAAJ;EACA,IAAIC,KAAK,GAAGjH,QAAQ,CAACO,OAAD,CAApB;;EACA,IAAI0G,KAAJ,EAAW;IACPD,OAAO,GAAGlH,QAAQ,CAAC,gBAAgBgH,QAAjB,EAA2BvG,OAA3B,CAAlB;EACH,CAFD,MAGK;IACDyG,OAAO,GAAGzG,OAAO,CAAC2G,YAAR,CAAqBJ,QAArB,CAAV;EACH;;EACD,IAAIjH,iBAAiB,CAACmH,OAAD,CAAjB,IAA8BD,KAAlC,EAAyC;IACrC,IAAI,CAACE,KAAL,EAAY;MACR1G,OAAO,CAACS,YAAR,CAAqB8F,QAArB,EAA+BC,KAAK,CAACI,QAAN,EAA/B;IACH,CAFD,MAGK;MACD5G,OAAO,CAACW,UAAR,CAAmB4F,QAAnB,IAA+BC,KAA/B;IACH;;IACDC,OAAO,GAAGD,KAAV;EACH;;EACD,OAAOC,OAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,iBAAT,CAA2B7G,OAA3B,EAAoCU,KAApC,EAA2C;EAC9C,IAAIA,KAAK,KAAKJ,SAAd,EAAyB;IACrB,IAAIb,QAAQ,CAACO,OAAD,CAAZ,EAAuB;MACnB;MACAL,UAAU,CAACkH,iBAAX,CAA6B7G,OAA7B,EAAsCU,KAAtC;IACH,CAHD,MAIK;MACDwD,MAAM,CAACD,IAAP,CAAYvD,KAAZ,EAAmB+C,OAAnB,CAA2B,UAAUW,GAAV,EAAe;QACtC;QACApE,OAAO,CAACyC,KAAR,CAAc2B,GAAd,IAAqB1D,KAAK,CAAC0D,GAAD,CAA1B;MACH,CAHD;IAIH;EACJ;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASrD,SAAT,CAAmBf,OAAnB,EAA4B8G,UAA5B,EAAwCC,aAAxC,EAAuD;EAC1DnG,QAAQ,CAAC,CAACZ,OAAD,CAAD,EAAY8G,UAAZ,CAAR;EACAnF,WAAW,CAAC,CAAC3B,OAAD,CAAD,EAAY+G,aAAZ,CAAX;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASpB,OAAT,CAAiB3F,OAAjB,EAA0BuE,QAA1B,EAAoC;EACvC;EACA,IAAIoB,OAAO,GAAG3F,OAAO,CAAC2F,OAAR,IAAmB3F,OAAO,CAACgH,iBAA3B,IAAgDhH,OAAO,CAACiH,qBAAtE;;EACA,IAAItB,OAAJ,EAAa;IACT,OAAOA,OAAO,CAACM,IAAR,CAAajG,OAAb,EAAsBuE,QAAtB,CAAP;EACH,CAFD,MAGK;IACD,OAAO,GAAGpC,OAAH,CAAW8D,IAAX,CAAgB/F,QAAQ,CAACsD,gBAAT,CAA0Be,QAA1B,CAAhB,EAAqDvE,OAArD,MAAkE,CAAC,CAA1E;EACH;AACJ;AACD,OAAO,SAASkH,gBAAT,CAA0B9F,GAA1B,EAA+BhB,SAA/B,EAA0C;EAC7C,IAAIX,QAAQ,CAAC2B,GAAD,CAAZ,EAAmB;IACf,IAAIhB,SAAS,KAAK,EAAlB,EAAsB;MAClBgB,GAAG,CAAC+F,QAAJ,GAAe,EAAf;IACH,CAFD,MAGK;MACD,IAAIC,GAAG,GAAGzH,UAAU,CAAC0H,iBAAX,CAA6BjH,SAA7B,CAAV;;MACA,IAAIgH,GAAG,CAACjG,MAAR,EAAgB;QACZxB,UAAU,CAAC2H,YAAX,CAAwBF,GAAxB,EAA6BhG,GAA7B;QACAA,GAAG,CAAC+F,QAAJ,GAAeC,GAAf;MACH;IACJ;EACJ,CAXD,MAYK;IACDhG,GAAG,CAAChB,SAAJ,GAAgBA,SAAhB;EACH;AACJ,C,CACD;;AACA,OAAO,SAASmH,aAAT,CAAuBnG,GAAvB,EAA4Bf,SAA5B,EAAuC;EAC1C,IAAIZ,QAAQ,CAAC2B,GAAD,CAAZ,EAAmB;IACf;IACA,OAAO,IAAII,MAAJ,CAAW,QAAQnB,SAAR,GAAoB,KAA/B,EAAsC,GAAtC,EAA2CJ,IAA3C,CAAgDmB,GAAG,CAACT,UAAJ,CAAeN,SAA/D,CAAP;EACH,CAHD,MAIK;IACD,OAAOe,GAAG,CAACL,SAAJ,CAAcU,QAAd,CAAuBpB,SAAvB,CAAP;EACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASmH,SAAT,CAAmBxH,OAAnB,EAA4ByH,IAA5B,EAAkC;EACrC,IAAIhI,QAAQ,CAACO,OAAD,CAAZ,EAAuB;IACnB,IAAIyH,IAAJ,EAAU;MACN,OAAO/H,MAAM,CAAC,EAAD,EAAK,EAAL,EAASM,OAAT,EAAkB,IAAlB,CAAb;IACH,CAFD,MAGK;MACD,OAAO;QAAEF,OAAO,EAAEE,OAAO,CAACF,OAAnB;QAA4Ba,UAAU,EAAEX,OAAO,CAACW;MAAhD,CAAP;IACH;EACJ,CAPD,MAQK;IACD,OAAOX,OAAO,CAACwH,SAAR,CAAkBC,IAAlB,CAAP;EACH;AACJ"},"metadata":{},"sourceType":"module"}