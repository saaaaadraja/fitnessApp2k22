{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { PdfGrid } from '../pdf-grid';\nimport { PdfStringFormat } from './../../../graphics/fonts/pdf-string-format';\nimport { SizeF, RectangleF, PointF } from './../../../drawing/pdf-drawing';\nimport { PdfBorders } from '../styles/pdf-borders';\nimport { PdfLayoutType, PdfLayoutBreakType } from './../../../graphics/figures/enum';\nimport { PdfLayoutResult, PdfLayoutFormat, ElementLayouter } from './../../../graphics/figures/base/element-layouter';\nimport { PdfHorizontalOverflowType } from '../styles/style';\nimport { TemporaryDictionary } from './../../../collections/object-object-pair/dictionary';\n/**\n * Class `lay outing the text`.\n *\n */\n\nvar PdfGridLayouter =\n/** @class */\nfunction (_super) {\n  __extends(PdfGridLayouter, _super); //constructor\n\n  /**\n   * Initialize a new instance for `PdfGrid` class.\n   * @private\n   */\n\n\n  function PdfGridLayouter(baseFormat) {\n    var _this = _super.call(this, baseFormat) || this;\n    /**\n     * @hidden\n     * @private\n     */\n\n\n    _this.gridInitialWidth = 0;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.gridSize = new SizeF(0, 0);\n    _this.parentCellIndex = 0;\n    _this.tempWidth = 0;\n    _this.childheight = 0;\n    /**\n     * Check weather it is `child grid or not`.\n     * @private\n     */\n\n    _this.isChildGrid = false;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.hasRowSpanSpan = false;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.isRearranged = false;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.pageBounds = new RectangleF();\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.listOfNavigatePages = [];\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.flag = true;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.columnRanges = [];\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.currentLocation = new PointF(0, 0);\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.breakRow = true;\n    /**\n     * Checks whether the x co-ordinate is need to set as client size or not.\n     * @hidden\n     * @private\n     */\n\n    _this.isOverloadWithPosition = false;\n    return _this;\n  }\n\n  Object.defineProperty(PdfGridLayouter.prototype, \"Grid\", {\n    //Properties\n    get: function get() {\n      return this.elements;\n    },\n    enumerable: true,\n    configurable: true\n  }); // Constructors\n\n  /**\n   * Initializes a new instance of the `StringLayouter` class.\n   * @private\n   */\n  //Public methods\n\n  /**\n   * `Layouts` the text.\n   * @private\n   */\n\n  /**\n   * `Layouts` the specified graphics.\n   * @private\n   */\n\n  /**\n   * `Layouts` the specified graphics.\n   * @private\n   */\n\n  /*public layout(graphics : PdfLayoutParams) : PdfLayoutResult\n  public layout(graphics : PdfGraphics, bounds : RectangleF) : void\n  public layout(graphics : PdfGraphics, bounds : PointF) : void\n  public layout(graphics ?: PdfGraphics | PdfLayoutParams, bounds ?: PointF | RectangleF) : void | PdfLayoutResult  {\n      if (graphics instanceof PdfGraphics) {\n      if (bounds instanceof PointF) {\n          if (bounds.x === 0) {\n              bounds.x = PdfBorders.default.right.width / 2;\n          }\n          if (bounds.y === 0) {\n              bounds.y = PdfBorders.default.top.width / 2;\n          }\n          let boundaries : RectangleF = new RectangleF(bounds, new SizeF(0, 0));\n          this.layout(graphics, boundaries);\n      } else {\n          let width : number = graphics.clientSize.width;\n          let parameter : PdfLayoutParams = new PdfLayoutParams();\n          parameter.bounds = bounds;\n          this.currentGraphics = graphics;\n          if (graphics.layer != null) {\n              let index : number = 0;\n              if (this.currentGraphics.page instanceof PdfPage) {\n                  index = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n              } else {\n                  index = (this.currentGraphics.page as PdfPageBase).defaultLayerIndex;\n              }\n          } else {\n              this.layoutInternal(parameter);\n          }\n      }\n  }\n  }*/\n\n  /**\n   * Gets the `format`.\n   * @private\n   */\n\n  PdfGridLayouter.prototype.getFormat = function (format) {\n    var f = format;\n    return f;\n  };\n  /**\n   * `Layouts` the element.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.layoutInternal = function (param) {\n    var format = this.getFormat(param.format);\n    this.gridLayoutFormat = this.getFormat(param.format);\n    this.currentPage = param.page;\n\n    if (this.currentPage !== null) {\n      var pageHeight = this.currentPage.getClientSize().height;\n      var pageWidth = this.currentPage.getClientSize().width;\n      this.currentPageBounds = this.currentPage.getClientSize();\n    } else {\n      throw Error('Can not set page as null'); //this.currentPageBounds = this.currentGraphics.clientSize;\n    }\n\n    this.currentGraphics = this.currentPage.graphics; //this.currentGraphics = (this.currentPage != null ) ? this.currentPage.graphics : this.currentGraphics;\n    // if (this.currentGraphics.layer !== null) {\n    //     let index : number = 0;\n    //     if (this.currentGraphics.page instanceof PdfPage) {\n    //         index = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n    //     } else {\n    //         index = (this.currentGraphics.page as PdfPageBase).defaultLayerIndex;\n    //     }\n    //     this.listOfNavigatePages.push(index);\n    // }\n\n    var index = 0;\n    index = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n    this.listOfNavigatePages.push(index);\n\n    if (format != null && format.break === PdfLayoutBreakType.FitColumnsToPage) {\n      this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), new SizeF(this.Grid.columns.width, this.currentGraphics.clientSize.height));\n    } else {\n      this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);\n    } //this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);\n\n\n    if (this.Grid.rows.count !== 0) {\n      this.currentBounds.width = param.bounds.width > 0 ? param.bounds.width : this.currentBounds.width - this.Grid.rows.getRow(0).cells.getCell(0).style.borders.left.width / 2;\n    } else if (this.Grid.headers.count !== 0) {\n      // this.currentBounds.width = (param.bounds.width > 0) ? param.bounds.width : (this.currentBounds.width -\n      //                                 this.Grid.headers.getHeader(0).cells.getCell(0).style.borders.left.width / 2);\n      this.currentBounds.width = param.bounds.width;\n    } else {\n      throw Error('Please add row or header into grid');\n    }\n\n    this.startLocation = new PointF(param.bounds.x, param.bounds.y); // if (this.Grid.style.allowHorizontalOverflow && this.currentBounds.width > this.currentGraphics.clientSize.width) {\n    //     this.currentBounds.width = this.currentGraphics.clientSize.width;\n    //     this.currentBounds.width -= this.currentBounds.x;\n    // }\n    // if (this.Grid.isChildGrid) {\n    //     this.childheight = param.bounds.height;\n    // }\n    // if (param.format !== null && param.format.usePaginateBounds) {\n    //     if (param.format.paginateBounds.height > 0) {\n    //         this.currentBounds.height = param.format.paginateBounds.height;\n    //     }\n    //} else \n\n    if (param.bounds.height > 0 && !this.Grid.isChildGrid) {\n      this.currentBounds.height = param.bounds.height;\n    }\n\n    if (!this.Grid.isChildGrid) {\n      this.hType = this.Grid.style.horizontalOverflowType;\n    }\n\n    if (!this.Grid.style.allowHorizontalOverflow) {\n      this.columnRanges = [];\n      this.Grid.measureColumnsWidth(this.currentBounds);\n      this.columnRanges.push([0, this.Grid.columns.count - 1]);\n    } else {\n      this.Grid.measureColumnsWidth();\n      this.determineColumnDrawRanges();\n    }\n\n    if (this.Grid.hasRowSpanSpan) {\n      for (var i = 0; i < this.Grid.rows.count; i++) {\n        if (this.Grid.rows.getRow(i).height !== -1 && !this.Grid.rows.getRow(i).isRowHeightSet) {\n          this.Grid.rows.getRow(i).isRowHeightSet = true;\n        }\n      }\n    }\n\n    var result = this.layoutOnPage(param);\n    return result;\n  }; // /* tslint:enable */\n\n  /**\n   * `Determines the column draw ranges`.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.determineColumnDrawRanges = function () {\n    var startColumn = 0;\n    var endColumn = 0;\n    var cellWidths = 0;\n    var availableWidth = this.currentGraphics.clientSize.width - this.currentBounds.x;\n\n    for (var i = 0; i < this.Grid.columns.count; i++) {\n      cellWidths += this.Grid.columns.getColumn(i).width;\n\n      if (cellWidths >= availableWidth) {\n        var subWidths = 0;\n\n        for (var j = startColumn; j <= i; j++) {\n          subWidths += this.Grid.columns.getColumn(j).width;\n\n          if (subWidths > availableWidth) {\n            break;\n          }\n\n          endColumn = j;\n        }\n\n        this.columnRanges.push([startColumn, endColumn]);\n        startColumn = endColumn + 1;\n        endColumn = startColumn;\n        cellWidths = endColumn <= i ? this.Grid.columns.getColumn(i).width : 0;\n      }\n    } // if (startColumn !== this.columns.Count) {\n\n\n    this.columnRanges.push([startColumn, this.Grid.columns.count - 1]); // }\n  };\n  /**\n   * `Layouts the on page`.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.layoutOnPage = function (param) {\n    /* tslint:disable */\n    this.pageBounds.x = param.bounds.x;\n    this.pageBounds.y = param.bounds.y;\n    this.pageBounds.height = param.bounds.height;\n    var format = this.getFormat(param.format);\n    var endArgs = null;\n    var result = null;\n    var layoutedPages = new TemporaryDictionary();\n    var startPage = param.page;\n    var isParentCell = false;\n    var cellBounds = [];\n\n    for (var index = 0; index < this.columnRanges.length; index++) {\n      var range = this.columnRanges[index];\n      this.cellStartIndex = range[0];\n      this.cellEndIndex = range[1];\n      var returnObject = this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex);\n      this.currentBounds = returnObject.currentBounds;\n      this.currentRowIndex = returnObject.currentRowIndex; // if (returnObject.returnValue) {\n      //     result = new PdfGridLayoutResult(this.currentPage, this.currentBounds);\n      //     break;\n      // }\n      //Draw Headers.\n\n      var drawHeader = void 0;\n\n      for (var i_1 = 0; i_1 < this.Grid.headers.count; i_1++) {\n        var row = this.Grid.headers.getHeader(i_1);\n        var headerHeight = this.currentBounds.y; // RowLayoutResult\n\n        var headerResult = this.drawRow(row); // if (headerHeight === this.currentBounds.y) {\n        //     drawHeader = true;\n        //     if (PdfGrid.repeatRowIndex === -1) {\n        //         PdfGrid.repeatRowIndex = this.rows.getRow.indexOf(row);\n        //     }\n        // } else {\n\n        drawHeader = false; // }\n      }\n\n      var i = 0;\n      var length_1 = this.Grid.rows.count;\n      var repeatRow = void 0;\n      var startingHeight = 0;\n      var flag = true; //Here is to draw parent Grid and Cells\n\n      cellBounds = []; //Draw row by row with the specified cell range.\n\n      for (var j = 0; j < this.Grid.rows.count; j++) {\n        var row = this.Grid.rows.getRow(j);\n        i++;\n        this.currentRowIndex = i - 1;\n        var originalHeight = this.currentBounds.y;\n        startPage = this.currentPage;\n        PdfGridLayouter.repeatRowIndex = -1;\n\n        if (flag && row.grid.isChildGrid) {\n          startingHeight = originalHeight;\n          flag = false;\n        }\n\n        var rowResult = null; ///rowResult = this.drawRow(row);\n\n        /*if(!row.isrowFinish) {\n            if(!row.grid.isgridSplit){\n                rowResult = this.drawRow(row);\n                row.isrowFinish = true;\n                row.isrowDraw = true;\n            } else {\n                if(!row.isrowDraw){\n                    rowResult = this.drawRow(row);\n                    row.isrowFinish = true;\n                    row.isrowDraw = true;\n                    row.grid.isgridSplit = false;\n                } else {\n                    rowResult =  null;\n                    break;\n                }\n            }\n        }\n        else {\n            //row.isrowFinish = false;\n            //rowResult = this.drawRow(row);\n            rowResult = null;\n            break;\n            \n        }             */\n\n        if (this.Grid.splitChildRowIndex == -1) {\n          rowResult = this.drawRow(row);\n          row.isrowFinish = true;\n        } else {\n          if (row.grid.ParentCell.row.grid.isGridSplit && this.Grid.splitChildRowIndex <= row.rowIndex) {\n            rowResult = this.drawRow(row);\n            row.isrowFinish = true;\n          } else if (row.isrowFinish) {\n            continue;\n          } else {\n            break;\n          }\n        } //rowResult = this.drawRow(row);\n\n\n        cellBounds.push(rowResult.bounds.width);\n        /*if (row.isRowBreaksNextPage)\n            {\n                let x : number  = 0;\n                for (let l : number = 0; l < row.cells.count; l++)\n                {\n                    let isNestedRowBreak : boolean = false;\n                    if (row.height == row.cells.getCell(l).height)\n                    {\n                        let n : number;\n                        let grid : PdfGrid = row.cells.getCell(l).value as PdfGrid;\n                        for (let m : number = grid.rows.count; 0 < m; m--)\n                        {\n                            if ((grid.rows.getRow(m - 1).rowBreakHeight > 0))\n                            {\n                                isNestedRowBreak = true;\n                                break;\n                            }\n                            if (grid.rows.getRow(m - 1).isRowBreaksNextPage)\n                            {\n                                row.rowBreakHeightValue = grid.rows.getRow(m - 1).rowBreakHeightValue;\n                                break;\n                            }\n                            row.rowBreakHeightValue += grid.rows.getRow(m - 1).height;\n                        }\n                    }\n                    if (isNestedRowBreak)\n                        break;\n                }\n                for (let j : number = 0; j < row.cells.count; j++)\n                {\n                     if (row.height > row.cells.getCell(j).height)\n                    {\n                        row.cells.getCell(j).value = \" \";\n                        let rect : RectangleF ;\n                        let page : PdfPage = this.getNextPage(this.currentPage);\n                        let section : PdfSection = this.currentPage.section;\n                        let index : number = section.indexOf(page);\n                        for (let k : number = 0; k < (section.count - 1) - index; k++)\n                        {\n                            rect = new RectangleF(x, 0, row.grid.columns.getColumn(j).width, page.getClientSize().height);\n                            PdfGridLayouter.repeatRowIndex = -1;\n                            row.cells.getCell(j).draw(page.graphics, rect, false);\n                            page = this.getNextPage(page);\n                        }\n                        rect = new RectangleF(x, 0, row.grid.columns.getColumn(j).width, row.rowBreakHeightValue);\n                         row.cells.getCell(j).draw(page.graphics, rect, false);\n                    }\n                    x += row.grid.columns.getColumn(j).width;\n                }\n            }*/\n        //if height remains same, it is understood that row is not drawn in the page\n\n        if (originalHeight === this.currentBounds.y) {\n          repeatRow = true;\n          PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n        } else {\n          repeatRow = false;\n          PdfGridLayouter.repeatRowIndex = -1;\n        }\n\n        while (!rowResult.isFinish && startPage != null) {\n          var tempResult = this.getLayoutResult();\n          /*if (startPage != this.currentPage)\n              {\n                  if (row.grid.isChildGrid && row.grid.ParentCell != null)\n                  {\n                      let bounds : RectangleF= new RectangleF(new PointF(format.paginateBounds.x,format.paginateBounds.y), new SizeF(param.bounds.width, tempResult.bounds.height));\n                      bounds.x += param.bounds.x;\n                      if (row.grid.ParentCell.row.grid.style.cellPadding != null)\n                      {\n                          bounds.y += row.grid.ParentCell.row.grid.style.cellPadding.top;\n                          if (bounds.height > this.currentPageBounds.height)\n                          {\n                              bounds.height = this.currentPageBounds.height - bounds.y;\n                              bounds.height -= (row.grid.ParentCell.row.grid.style.cellPadding.bottom);\n                          }\n                      }\n                      // Draw border for cells in the nested grid cell's row.\n                      for (let c : number = 0; c < row.cells.count; c++)\n                      {\n                          let cell : PdfGridCell = row.cells.getCell(c);\n                          let cellWidth :  number= 0;\n                          if (cell.columnSpan > 1)\n                          {\n                              for (; c < cell.columnSpan; c++)\n                                  cellWidth += row.grid.columns.getColumn(c).width;\n                          }\n                          else\n                              cellWidth = Math.max(cell.width, row.grid.columns.getColumn(c).width);\n                          cell.drawCellBorders(this.currentGraphics, new RectangleF(new PointF(bounds.x,bounds.y), new SizeF(cellWidth, bounds.height)));\n                          bounds.x += cellWidth;\n                          c += (cell.columnSpan - 1);\n                      }\n                  }\n              }\n              */\n\n          endArgs = this.raisePageLayouted(tempResult);\n          if (endArgs.cancel || repeatRow) break;else if (this.Grid.allowRowBreakAcrossPages) {\n            //If there is no space in the current page, add new page and then draw the remaining row.\n            this.currentPage = this.getNextPageformat(format);\n            originalHeight = this.currentBounds.y;\n            var location_1 = new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2);\n\n            if (format.paginateBounds.x === 0 && format.paginateBounds.y === 0 && format.paginateBounds.width === 0 && format.paginateBounds.height === 0 && this.startLocation.x === location_1.x && this.startLocation.y === location_1.y) {\n              this.currentBounds.x += this.startLocation.x;\n              this.currentBounds.y += this.startLocation.y;\n            }\n\n            if (this.Grid.isChildGrid && row.grid.ParentCell != null) {\n              if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n                if (row.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top < this.currentBounds.height) {\n                  this.currentBounds.y = this.Grid.ParentCell.row.grid.style.cellPadding.top;\n                }\n              }\n            }\n\n            if (row.grid.ParentCell != null) {\n              row.grid.ParentCell.row.isRowBreaksNextPage = true;\n              row.grid.ParentCell.row.rowBreakHeightValue = row.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top + this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n\n              for (var i_2 = row.rowIndex + 1; i_2 < row.grid.rows.count; i_2++) {\n                row.grid.ParentCell.row.rowBreakHeightValue += row.grid.rows.getRow(i_2).height;\n              } //row.rowBreakHeight = row.grid.ParentCell.row.rowBreakHeightValue;\n\n            }\n            /*if (row.noOfPageCount > 1)\n            {\n                let temp : number = row.rowBreakHeightValue;\n                for (let j : number = 1; j < row.noOfPageCount; j++)\n                {\n                    row.rowBreakHeightValue = 0;\n                    row.height = ((row.noOfPageCount - 1) * this.currentPage.getClientSize().height);\n                    this.drawRow(row);\n                    this.currentPage = this.getNextPageformat(format);\n                    startPage = this.currentPage;\n                }\n                row.rowBreakHeightValue = temp;\n                row.noOfPageCount = 1;\n                rowResult = this.drawRow(row);\n            } else {\n                rowResult = this.drawRow(row);\n            }\n            /*if(row.grid.isChildGrid){\n                row.isrowFinish = false;\n                row.isrowDraw = false;\n                row.grid.isgridSplit = true;\n                row.grid.ParentCell.row.grid.isgridSplit = true;\n                //rowResult.isFinish = false;\n                break;\n            }*/\n\n\n            if (row.grid.isChildGrid) {\n              //row.grid.isgridSplit = true;\n              row.isrowFinish = false; //row.grid.ParentCell.row.grid.isgridSplit = true;\n\n              row.grid.splitChildRowIndex = row.rowIndex;\n              row.grid.ParentCell.row.grid.splitChildRowIndex = row.grid.ParentCell.row.rowIndex;\n\n              if (row.grid.ParentCell.row.grid.isGridSplit) {\n                row.grid.ParentCell.row.noOfPageCount += 1;\n                row.grid.ParentCell.row.grid.isGridSplit = false;\n              }\n\n              break;\n            }\n\n            if (row.noOfPageCount < 1) {\n              if (row.grid.splitChildRowIndex != -1) {\n                row.grid.isGridSplit = true;\n              }\n\n              if (row.style.border != null && (row.style.border.left != null && row.style.border.left.width !== 1 || row.style.border.top != null && row.style.border.top.width !== 1)) {\n                var x = row.style.border.left.width / 2;\n                var y = row.style.border.top.width / 2;\n\n                if (this.currentBounds.x === PdfBorders.default.right.width / 2 && this.currentBounds.y === PdfBorders.default.right.width / 2) {\n                  var newBound = new RectangleF(x, y, this.currentBounds.width, this.currentBounds.height);\n                  this.currentBounds = newBound;\n                }\n              }\n\n              if (this.Grid.repeatHeader) {\n                for (var j_1 = 0; j_1 < this.Grid.headers.count; j_1++) {\n                  var headerRepeat = this.Grid.headers.getHeader(j_1);\n                  this.drawRow(headerRepeat);\n                }\n              }\n\n              rowResult = this.drawRow(row);\n\n              if (row.noOfPageCount >= 1) {\n                var temp = row.rowBreakHeightValue;\n\n                for (var j_2 = 0; j_2 < row.noOfPageCount; j_2++) {\n                  //this.currentPage.section.add();\n                  var tempResult1 = this.getLayoutResult();\n                  endArgs = this.raisePageLayouted(tempResult1);\n                  this.currentPage = this.getNextPageformat(format);\n                  originalHeight = this.currentBounds.y; //row.rowBreakHeightValue = 0;\n\n                  if (row.grid.splitChildRowIndex != -1) {\n                    row.grid.isGridSplit = true;\n                  }\n\n                  this.currentBounds.y = 0.5;\n\n                  if (this.Grid.repeatHeader) {\n                    for (var i_3 = 0; i_3 < this.Grid.headers.count; i_3++) {\n                      var header = this.Grid.headers.getHeader(i_3);\n                      this.drawRow(header);\n                    }\n                  } //row.height = ((row.noOfPageCount - 1) * this.currentPage.getClientSize().height);\n\n\n                  this.drawRow(row);\n                } // row.rowBreakHeight = temp;\n                // row.noOfPageCount = 1;\n                // rowResult = this.drawRow(row);\n\n              }\n\n              row.grid.splitChildRowIndex = -1;\n              row.grid.isGridSplit = false;\n              rowResult.isFinish = true; //row.NestedGridLayoutResult.bounds.height = row.rowBreakHeightValue;\n              //this.currentBounds.y = rowResult.bounds.y;\n\n              for (var i_4 = 0; i_4 < row.cells.count; i_4++) {\n                if (row.cells.getCell(i_4).value instanceof PdfGrid) {\n                  row.cells.getCell(i_4).value.splitChildRowIndex = -1;\n                }\n              }\n            }\n          } // else if (!this.Grid.allowRowBreakAcrossPages && i < length)\n          // {\n          //     this.currentPage = this.getNextPageformat(format);\n          //     break;\n          // }\n          // else if (i >= length)\n          //     break;\n        }\n\n        if (!rowResult.isFinish && startPage !== null && format.layout !== PdfLayoutType.OnePage && repeatRow) {\n          // During pagination, cell position is maintained here.\n          this.startLocation.x = this.currentBounds.x;\n          var isAddNextPage = false;\n          this.currentPage = this.getNextPageformat(format);\n          /*if (!this.Grid.isSingleGrid)\n          {\n              for ( let j : number= 0; j < this.Grid.rows.count; j++)\n              {\n                  let isWidthGreaterthanParent : boolean = false;\n                  for (let k : number = 0; k < this.Grid.rows.getRow(j).cells.count; k++)\n                  {\n                      if (this.Grid.rows.getRow(j).cells.getCell(k).width > this.currentPageBounds.width)\n                          isWidthGreaterthanParent = true;\n                  }\n                  if (isWidthGreaterthanParent && this.Grid.rows.getRow(j).cells.getCell(this.rowBreakPageHeightCellIndex).pageCount > 0)\n                  {\n                      isAddNextPage = true;\n                  }\n              }\n          }\n          if (!this.Grid.isRearranged && isAddNextPage)\n               {\n                   let section : PdfSection = this.currentPage.section;\n                   \n                   //this.currentPage = section.add();\n               \n                   this.currentGraphics = this.currentPage.graphics;\n                   this.currentBounds = new RectangleF(new PointF(0,0), this.currentPage.getClientSize());\n                \n                   let pageindex  : number = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n               }\n               else\n               {\n                   this.currentPage = this.getNextPageformat(format);\n               }\n               if (format.paginateBounds.y == 0)\n                   this.currentBounds.y = PdfBorders.default.top.width/2;\n               else\n               {\n                   this.currentBounds.y = format == null ? 0 : format.paginateBounds.y;\n                   \n               }\n               if (this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex))\n                   break;*/\n\n          if (param.format !== null && !param.format.usePaginateBounds && param.bounds !== null && param.bounds.height > 0 && !this.Grid.isChildGrid) {\n            this.currentBounds.height = param.bounds.height;\n          }\n\n          if (param.format !== null && !param.format.usePaginateBounds && param.bounds !== null && param.bounds.y > 0 && !this.Grid.isChildGrid) {\n            this.currentBounds.y = param.bounds.y;\n          }\n\n          this.startLocation.y = this.currentBounds.y;\n\n          if (format.paginateBounds.x === format.paginateBounds.y && format.paginateBounds.y === format.paginateBounds.height && format.paginateBounds.height === format.paginateBounds.width && format.paginateBounds.width === 0) {\n            this.currentBounds.x += this.startLocation.x;\n          }\n\n          if (this.currentBounds.x === PdfBorders.default.left.width / 2) {\n            this.currentBounds.y += this.startLocation.x;\n          }\n\n          if (this.Grid.repeatHeader) {\n            for (var i_5 = 0; i_5 < this.Grid.headers.count; i_5++) {\n              var header = this.Grid.headers.getHeader(i_5);\n              this.drawRow(header);\n            }\n          }\n\n          this.drawRow(row);\n\n          if (this.currentPage !== null && !layoutedPages.containsKey(this.currentPage)) {\n            layoutedPages.add(this.currentPage, range);\n          }\n        }\n\n        if (row.NestedGridLayoutResult != null) {\n          // Position for next row in the grid.\n          this.currentPage = row.NestedGridLayoutResult.page;\n          this.currentGraphics = this.currentPage.graphics; //If not, next row will not be drawn in the layouted page.\n\n          this.startLocation = new PointF(row.NestedGridLayoutResult.bounds.x, row.NestedGridLayoutResult.bounds.y);\n          var recalHeight = this.ReCalculateHeight(row, row.NestedGridLayoutResult.bounds.height);\n          this.currentBounds.y = recalHeight; //this.currentBounds.y = row.NestedGridLayoutResult.bounds.height;\n\n          if (startPage != this.currentPage) {\n            var secion = this.currentPage.section;\n            var startIndex = secion.indexOf(startPage) + 1;\n            var endIndex = secion.indexOf(this.currentPage);\n\n            for (var page = startIndex; page < endIndex + 1; page++) {\n              var pageGraphics = this.currentPage.graphics;\n              var location_2 = new PointF(format.paginateBounds.x, format.paginateBounds.y);\n              var height = page == endIndex ? row.NestedGridLayoutResult.bounds.height - param.bounds.y : this.currentBounds.height - location_2.y;\n              if (height <= pageGraphics.clientSize.height) height += param.bounds.y; // if (row.grid.isChildGrid && row.grid.ParentCell != null)\n              //     location.x += param.bounds.x;\n\n              location_2.y = format == null ? 0.5 : format.paginateBounds.y; // Draw border for last paginated row containing nested grid.\n\n              for (var c = 0; c < row.cells.count; c++) {\n                var cell = row.cells.getCell(c);\n                var cellWidth = 0;\n                var totalwidth = 0;\n\n                if (cell.value instanceof PdfGrid) {\n                  for (var i_6 = 0; i_6 < cell.value.columns.count; i_6++) {\n                    totalwidth += cell.value.columns.getColumn(i_6).columnWidth;\n                  }\n                } else {\n                  totalwidth = cell.width;\n                } // if (cell.columnSpan > 1)\n                // {\n                //     for (; c < cell.columnSpan; c++)\n                //         cellWidth += row.grid.columns.getColumn(c).width;\n                // }\n                // else\n\n\n                cellWidth = Math.max(totalwidth, row.grid.columns.getColumn(c).width);\n                cell.drawCellBorders(pageGraphics, new RectangleF(location_2, new SizeF(cellWidth, height)));\n                location_2.x += cellWidth;\n                c += cell.columnSpan - 1;\n              }\n            } // So, nested grid drawing is completed for the current row. Update page.\n            // Otherwise, the next nested grid of the parent will draw borders from start.\n\n\n            startPage = this.currentPage;\n          }\n        }\n      }\n\n      var isPdfGrid = false;\n      var maximumCellBoundsWidth = 0;\n\n      if (cellBounds.length > 0) {\n        maximumCellBoundsWidth = cellBounds[0];\n      }\n\n      var largeNavigatePage = [[1, 2]];\n\n      for (var c = 0; c < this.Grid.rows.count; c++) {\n        if (this.cellEndIndex != -1 && this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value instanceof PdfGrid) {\n          var grid = this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value;\n          this.rowLayoutBoundsWidth = grid.rowLayoutBoundsWidth;\n          isPdfGrid = true; // if (largeNavigatePage[0][0] < grid.listOfNavigatePages.length)\n          // {\n          //     largeNavigatePage[0][0] = grid.listOfNavigatePages.length;\n          //     largeNavigatePage[0][1] = cellBounds[c];\n          // }\n          // else if ((largeNavigatePage[0][0] == grid.listOfNavigatePages.length) && (largeNavigatePage[0][1] < cellBounds[c]))\n          // {\n          //     largeNavigatePage[0][1] = cellBounds[c];\n          // }\n        }\n      }\n\n      if (!isPdfGrid && cellBounds.length > 0) {\n        for (var c = 0; c < i - 1; c++) {\n          if (maximumCellBoundsWidth < cellBounds[c]) {\n            maximumCellBoundsWidth = cellBounds[c];\n          }\n        }\n\n        this.rowLayoutBoundsWidth = maximumCellBoundsWidth;\n      } else {\n        this.rowLayoutBoundsWidth = largeNavigatePage[0][1];\n      }\n\n      if (this.columnRanges.indexOf(range) < this.columnRanges.length - 1 && startPage != null && format.layout != PdfLayoutType.OnePage) {\n        isParentCell = this.Grid.isChildGrid;\n\n        if (largeNavigatePage[0][0] != 0) {\n          var section = this.currentPage.section;\n          var pageIndex = section.indexOf(this.currentPage);\n          this.currentGraphics = this.currentPage.graphics;\n          this.currentBounds = new RectangleF(new PointF(0, 0), this.currentPage.getClientSize());\n          var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n        } else {\n          this.currentPage = this.getNextPageformat(format);\n        } // let locationGrid : PointF= new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2);\n        // if (format.paginateBounds == new RectangleF(0,0,0,0) && this.startLocation == locationGrid)\n        // {\n        //     this.currentBounds.x += this.startLocation.x;\n        //     this.currentBounds.y += this.startLocation.y;\n        // }\n\n      }\n\n      if (this.columnRanges.length - 1 !== index && this.columnRanges.length > 1 && format.layout !== PdfLayoutType.OnePage) {\n        this.currentPage = this.getNextPageformat(format);\n\n        if (format.paginateBounds.x === format.paginateBounds.y && format.paginateBounds.y === format.paginateBounds.height && format.paginateBounds.height === format.paginateBounds.width && format.paginateBounds.width === 0) {\n          this.currentBounds.x += this.startLocation.x;\n          this.currentBounds.y += this.startLocation.y; //this.currentBounds.height = this.pageBounds.height;\n        }\n      }\n    }\n\n    result = this.getLayoutResult();\n\n    if (this.Grid.style.allowHorizontalOverflow && this.Grid.style.horizontalOverflowType == PdfHorizontalOverflowType.NextPage) {\n      this.reArrangePages(layoutedPages);\n    }\n\n    this.raisePageLayouted(result);\n    return result;\n  };\n  /* tslint:enable */\n\n  /**\n   * Gets the `next page`.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.getNextPageformat = function (format) {\n    var section = this.currentPage.section;\n    var nextPage = null;\n    var index = section.indexOf(this.currentPage);\n    this.flag = false;\n\n    if (index === section.count - 1) {\n      nextPage = section.add();\n    } else {\n      nextPage = section.getPages()[index + 1];\n    }\n\n    this.currentGraphics = nextPage.graphics;\n    var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n\n    if (!(this.listOfNavigatePages.indexOf(pageindex) !== -1)) {\n      this.listOfNavigatePages.push(pageindex);\n    }\n\n    this.currentBounds = new RectangleF(new PointF(0, 0), nextPage.getClientSize()); // if ((format.paginateBounds.x !== format.paginateBounds.y) && (format.paginateBounds.y !== format.paginateBounds.height)\n    //     && (format.paginateBounds.height !== format.paginateBounds.width) && (format.paginateBounds.width !== 0)) {\n    //     this.currentBounds.x = format.paginateBounds.x;\n    //     this.currentBounds.y = format.paginateBounds.y;\n    //     this.currentBounds.height = format.paginateBounds.height;\n    // }\n\n    return nextPage;\n  };\n\n  PdfGridLayouter.prototype.CheckIfDefaultFormat = function (format) {\n    var defaultFormat = new PdfStringFormat();\n    return format.alignment === defaultFormat.alignment && format.characterSpacing === defaultFormat.characterSpacing && format.clipPath === defaultFormat.clipPath && format.firstLineIndent === defaultFormat.firstLineIndent && format.horizontalScalingFactor === defaultFormat.horizontalScalingFactor && format.lineAlignment === defaultFormat.lineAlignment && format.lineLimit === defaultFormat.lineLimit && format.lineSpacing === defaultFormat.lineSpacing && format.measureTrailingSpaces === defaultFormat.measureTrailingSpaces && format.noClip === defaultFormat.noClip && format.paragraphIndent === defaultFormat.paragraphIndent && format.rightToLeft === defaultFormat.rightToLeft && format.subSuperScript === defaultFormat.subSuperScript && format.wordSpacing === defaultFormat.wordSpacing && format.wordWrap === defaultFormat.wordWrap;\n  };\n  /**\n   * `Raises BeforeCellDraw event`.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.RaiseBeforeCellDraw = function (graphics, rowIndex, cellIndex, bounds, value, style) {\n    var args = null;\n\n    if (this.Grid.raiseBeginCellDraw) {\n      args = new PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style);\n      this.Grid.onBeginCellDraw(args);\n      style = args.style;\n    }\n\n    return style;\n  };\n  /**\n   * `Raises AfterCellDraw event`.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.raiseAfterCellDraw = function (graphics, rowIndex, cellIndex, bounds, value, cellstyle) {\n    var args = null;\n\n    if (this.Grid.raiseEndCellDraw) {\n      args = new PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, cellstyle);\n      this.Grid.onEndCellDraw(args);\n    }\n  };\n\n  PdfGridLayouter.prototype.reArrangePages = function (layoutedPages) {\n    var document = this.currentPage.document;\n    var pages = [];\n    var keys = layoutedPages.keys();\n    var values = layoutedPages.values();\n\n    for (var i = 0; i < keys.length; i++) {\n      var page = keys[i];\n      page.section = null;\n      pages.push(page);\n      document.pages.remove(page);\n    }\n    /* tslint:disable */\n\n\n    for (var i = 0; i < layoutedPages.size(); i++) {\n      var count = 0;\n\n      for (var j = i, count_1 = layoutedPages.size() / this.columnRanges.length; j < layoutedPages.size(); j += count_1) {\n        var page = pages[j];\n\n        if (document.pages.indexOf(page) === -1) {\n          document.pages.add(page);\n        }\n      }\n    }\n    /* tslint:enable */\n\n  };\n  /**\n   * Gets the `layout result`.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.getLayoutResult = function () {\n    if (this.Grid.isChildGrid && this.Grid.allowRowBreakAcrossPages) {\n      for (var i = 0; i < this.Grid.rows.count; i++) {\n        var row = this.Grid.rows.getRow(i);\n\n        if (row.rowBreakHeight > 0 && row.repeatFlag) {\n          this.startLocation.y = this.currentPage.origin.y;\n        }\n      }\n    }\n\n    var bounds;\n\n    if (!this.isChanged) {\n      bounds = new RectangleF(this.startLocation, new SizeF(this.currentBounds.width, this.currentBounds.y - this.startLocation.y));\n    } // else {\n    //     bounds = new RectangleF(this.currentLocation, new SizeF(this.currentBounds.width, this.currentBounds.y -\n    //                              this.currentLocation.y));\n    // }\n\n    /* tslint:enable */\n\n\n    return new PdfGridLayoutResult(this.currentPage, bounds);\n  };\n  /**\n   * `Recalculate row height` for the split cell to be drawn.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.ReCalculateHeight = function (row, height) {\n    var newHeight = 0.0;\n\n    for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n      if (!(row.cells.getCell(i).remainingString === null || row.cells.getCell(i).remainingString === '' || typeof row.cells.getCell(i).remainingString === 'undefined')) {\n        newHeight = Math.max(newHeight, row.cells.getCell(i).measureHeight());\n      }\n    }\n\n    return Math.max(height, newHeight);\n  };\n  /**\n   * `Raises BeforePageLayout event`.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.raiseBeforePageLayout = function (currentPage, currentBounds, currentRow) {\n    var cancel = false;\n\n    if (this.Grid.raiseBeginPageLayout) {\n      var args = new PdfGridBeginPageLayoutEventArgs(currentBounds, currentPage, currentRow);\n      this.Grid.onBeginPageLayout(args); // if (currentBounds !== args.Bounds) {\n      //     this.isChanged = true;\n      //     this.currentLocation = new PointF(args.Bounds.x, args.Bounds.y);\n      //     this.measureColumnsWidth(new RectangleF(new PointF(args.Bounds.x, args.Bounds.y) ,\n      //                                                  new SizeF(args.Bounds.width + args.Bounds.x ,\n      //                                                                 args.Bounds.height)));\n      // }\n\n      cancel = args.cancel;\n      currentBounds = args.bounds;\n      currentRow = args.startRowIndex;\n    }\n\n    return {\n      returnValue: cancel,\n      currentBounds: currentBounds,\n      currentRowIndex: currentRow\n    };\n  };\n  /**\n   * `Raises PageLayout event` if needed.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.raisePageLayouted = function (result) {\n    var args = new PdfGridEndPageLayoutEventArgs(result);\n\n    if (this.Grid.raiseEndPageLayout) {\n      this.Grid.onEndPageLayout(args);\n    }\n\n    return args;\n  };\n\n  PdfGridLayouter.prototype.drawRow = function (row, result, height) {\n    if (typeof result === 'undefined') {\n      //.. Check if required space available.\n      //.....If the row conains spans which  falls through more than one page, then draw the row to next page.                        \n      var result_1 = new RowLayoutResult();\n      var rowHeightWithSpan = 0;\n      var location_3 = new PointF(0, 0);\n      var size = new SizeF(0, 0);\n      var isHeader = false;\n\n      if (row.rowSpanExists) {\n        var maxSpan = 0;\n        var currRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n\n        if (currRowIndex === -1) {\n          currRowIndex = this.Grid.headers.indexOf(row);\n\n          if (currRowIndex !== -1) {\n            isHeader = true;\n          }\n        }\n\n        for (var i = 0; i < row.cells.count; i++) {\n          var cell = row.cells.getCell(i);\n          maxSpan = Math.max(maxSpan, cell.rowSpan);\n        }\n\n        for (var i = currRowIndex; i < currRowIndex + maxSpan; i++) {\n          rowHeightWithSpan += isHeader ? this.Grid.headers.getHeader(i).height : this.Grid.rows.getRow(i).height;\n        } // let rowMaxHeight : number = rowHeightWithSpan;\n        // for (let i : number = 0; i < row.cells.count; i++ ) {\n        //     rowMaxHeight = rowMaxHeight > row.cells.getCell(i).height ? rowMaxHeight : row.cells.getCell(i).height;\n        // }\n        // let flag : boolean = true;\n        // let nextRow : PdfGridRow = this.Grid.headers.getHeader(this.Grid.headers.indexOf(row) + 1);\n        // for (let i : number = 0; i < nextRow.cells.count; i++ ) {\n        //     if (nextRow.cells.getCell(i).value !== '' && nextRow.cells.getCell(i).value !== undefined) {\n        //         flag = false;\n        //         break;\n        //     }\n        // }\n        // if ((rowMaxHeight > rowHeightWithSpan) && flag) {\n        //     row.height += (rowMaxHeight - rowHeightWithSpan);\n        // }                \n\n      }\n\n      var calculatedHeight = row.rowBreakHeight > 0.0 ? row.rowBreakHeight : row.height;\n\n      if (this.Grid.isChildGrid && this.Grid.ParentCell != null) {\n        //Split row only if row height exceeds page height and AllowRowBreakAcrossPages is true.\n        // if (calculatedHeight + this.Grid.ParentCell.row.grid.style.cellPadding.bottom +\n        //             this.Grid.ParentCell.row.grid.style.cellPadding.top > this.currentPageBounds.height) {\n        //     if (this.Grid.allowRowBreakAcrossPages) {\n        //         result.isFinish = true;\n        //         if ( this.Grid.isChildGrid && row.rowBreakHeight > 0 ) {\n        //             if (this.Grid.ParentCell.row.grid.style.cellPadding !== null) {\n        //                 this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n        //             }\n        //             this.currentBounds.x = this.startLocation.x;\n        //         }\n        //         result.bounds = this.currentBounds ;\n        //         this.drawRowWithBreak(result, row, calculatedHeight);\n        //     } else {\n        //         //If AllowRowBreakAcrossPages is not true, draw the row till it fits the page.                       \n        //         if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n        //             this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n        //             calculatedHeight = this.currentBounds.height - this.currentBounds.y -\n        //                     this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n        //         }\n        //         result.isFinish = false;\n        //         this.drawRow( row, result, calculatedHeight);\n        //     }\n        // } else\n        if (this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + calculatedHeight > this.currentPageBounds.height || this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + calculatedHeight > this.currentBounds.height || this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + rowHeightWithSpan > this.currentPageBounds.height) {\n          //If a row is repeated and still cannot fit in page, proceed draw.\n          if (this.Grid.ParentCell.row.grid.LayoutFormat.break === PdfLayoutBreakType.FitPage) {\n            PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n            this.Grid.splitChildRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n          }\n\n          if (PdfGridLayouter.repeatRowIndex > -1 && PdfGridLayouter.repeatRowIndex === row.rowIndex) {\n            if (this.Grid.allowRowBreakAcrossPages) {\n              result_1.isFinish = true; // if (this.Grid.isChildGrid && row.rowBreakHeightValue > 0) {\n              //     // if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n              //     //     this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n              //     // }\n              //     this.currentBounds.x = this.startLocation.x;\n              // }\n\n              result_1.bounds = this.currentBounds;\n              this.drawRowWithBreak(result_1, row, calculatedHeight);\n              row.repeatFlag = true;\n              row.repeatRowNumber = PdfGridLayouter.repeatRowIndex;\n            } // else {\n            //     result.isFinish = false;\n            //     row.repeatFlag = false;\n            //     this.drawRow( row, result, calculatedHeight);\n            // }\n\n          } // else {\n          //     result.isFinish = false;\n          // }\n\n        } else {\n          result_1.isFinish = true;\n\n          if (row.grid.ParentCell.row.rowBreakHeightValue > 0) {\n            row.repeatFlag = true;\n          } else {\n            row.repeatFlag = false;\n            calculatedHeight = row.height;\n          }\n\n          if (this.Grid.isChildGrid && row.rowBreakHeight > 0) {\n            if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n              calculatedHeight += this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n            }\n          }\n\n          this.drawRow(row, result_1, calculatedHeight);\n        }\n      } else {\n        //Split row only if row height exceeds page height and AllowRowBreakAcrossPages is true.\n        if (calculatedHeight > this.currentPageBounds.height) {\n          if (this.Grid.allowRowBreakAcrossPages) {\n            result_1.isFinish = true; //result.bounds = this.currentBounds;\n\n            this.drawRowWithBreak(result_1, row, calculatedHeight);\n            row.isrowFinish = true;\n            row.repeatFlag = true;\n\n            if (row.grid.splitChildRowIndex !== -1) {\n              result_1.isFinish = false;\n            }\n          } // else {\n          //     //If AllowRowBreakAcrossPages is not true, draw the row till it fits the page.\n          //     result.isFinish = false;\n          //     this.drawRow( row, result, calculatedHeight);\n          // }\n\n        } else if (this.currentBounds.y + calculatedHeight > this.currentPageBounds.height || this.currentBounds.y + calculatedHeight > this.currentBounds.height + this.startLocation.y || this.currentBounds.y + rowHeightWithSpan > this.currentPageBounds.height) {\n          // If a row is repeated and still cannot fit in page, proceed draw.\n          if (this.Grid.LayoutFormat.break === PdfLayoutBreakType.FitPage) {\n            PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n          }\n\n          if (PdfGridLayouter.repeatRowIndex > -1 && PdfGridLayouter.repeatRowIndex === row.rowIndex) {\n            if (this.Grid.allowRowBreakAcrossPages) {\n              result_1.isFinish = true;\n              this.drawRowWithBreak(result_1, row, calculatedHeight);\n              row.repeatFlag = true;\n              row.repeatRowNumber = PdfGridLayouter.repeatRowIndex;\n\n              if (row.grid.splitChildRowIndex !== -1) {\n                result_1.isFinish = false;\n              }\n            } // else {\n            //     result.isFinish = false;\n            //     this.drawRow(row, result, calculatedHeight);\n            // }\n\n          } else {\n            result_1.isFinish = false;\n          }\n        } else {\n          result_1.isFinish = true;\n          this.drawRow(row, result_1, calculatedHeight);\n          row.repeatFlag = false;\n        }\n      }\n\n      return result_1;\n    } else {\n      var skipcell = false;\n      var location_4 = new PointF(this.currentBounds.x, this.currentBounds.y); // if (row.grid.isChildGrid && row.grid.allowRowBreakAcrossPages && this.startLocation.x !== this.currentBounds.x && row.width <\n      //                 this.currentPage.getClientSize().width) {\n      //     location.x = this.startLocation.x;\n      // }\n\n      result.bounds = new RectangleF(location_4, new SizeF(0, 0));\n      height = this.ReCalculateHeight(row, height);\n\n      for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n        var cancelSpans = i > this.cellEndIndex + 1 && row.cells.getCell(i).columnSpan > 1; // let cancelSpans : boolean = false;\n\n        if (!cancelSpans) {\n          for (var j = 1; j < row.cells.getCell(i).columnSpan; j++) {\n            row.cells.getCell(i + j).isCellMergeContinue = true;\n          }\n        }\n\n        var size = new SizeF(this.Grid.columns.getColumn(i).width, height); // if (size.width > this.currentGraphics.clientSize.width) {\n        //     size.width = this.currentGraphics.clientSize.width;\n        // }\n        // if (this.Grid.isChildGrid && this.Grid.style.allowHorizontalOverflow) {\n        //     if (size.width >= this.currentGraphics.clientSize.width) {\n        //         size.width -= 2 * this.currentBounds.x;\n        //     }\n        // }\n\n        /* tslint:disable */\n\n        if (!this.CheckIfDefaultFormat(this.Grid.columns.getColumn(i).format) && this.CheckIfDefaultFormat(row.cells.getCell(i).stringFormat)) {\n          row.cells.getCell(i).stringFormat = this.Grid.columns.getColumn(i).format;\n        }\n\n        var cellstyle = row.cells.getCell(i).style;\n        var tempValue = typeof row.cells.getCell(i).value === 'string' && row.cells.getCell(i).value !== null ? row.cells.getCell(i).value : '';\n        row.cells.getCell(i).style = this.RaiseBeforeCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, cellstyle); //row.cells.getCell(i).style = cellstyle;\n\n        if (!skipcell) {\n          if (row.cells.getCell(i).value instanceof PdfGrid) {\n            var grid = row.cells.getCell(i).value;\n            grid.parentCellIndex = i;\n          }\n\n          var stringResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location_4, size), cancelSpans);\n\n          if (row.grid.style.allowHorizontalOverflow && (row.cells.getCell(i).columnSpan > this.cellEndIndex || i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1) && this.cellEndIndex < row.cells.count - 1) {\n            row.rowOverflowIndex = this.cellEndIndex;\n          }\n\n          if (row.grid.style.allowHorizontalOverflow && row.rowOverflowIndex > 0 && (row.cells.getCell(i).columnSpan > this.cellEndIndex || i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1) && row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1 > 0) {\n            row.cells.getCell(row.rowOverflowIndex + 1).value = stringResult !== null ? stringResult.remainder !== undefined ? stringResult.remainder : '' : '';\n            row.cells.getCell(row.rowOverflowIndex + 1).stringFormat = row.cells.getCell(i).stringFormat;\n            row.cells.getCell(row.rowOverflowIndex + 1).style = row.cells.getCell(i).style;\n            row.cells.getCell(row.rowOverflowIndex + 1).columnSpan = row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1;\n          }\n        }\n        /* tslint:enable */\n\n\n        tempValue = typeof row.cells.getCell(i).value === 'string' && row.cells.getCell(i).value !== null ? row.cells.getCell(i).value : '';\n\n        if (!cancelSpans) {\n          this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, row.cells.getCell(i).style);\n        }\n\n        if (row.cells.getCell(i).value instanceof PdfGrid) {\n          var grid = row.cells.getCell(i).value;\n\n          if (this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width) {\n            location_4.x = grid.rowLayoutBoundsWidth;\n            location_4.x += grid.style.cellSpacing;\n          } else {\n            location_4.x += this.Grid.columns.getColumn(i).width;\n          }\n        } else {\n          location_4.x += this.Grid.columns.getColumn(i).width;\n        }\n      }\n\n      if (!row.rowMergeComplete || row.isRowHeightSet) {\n        this.currentBounds.y += height;\n      }\n\n      result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location_4.x, location_4.y));\n    }\n  };\n\n  PdfGridLayouter.prototype.drawRowWithBreak = function (result, row, calculateHeight) {\n    var location = new PointF(this.currentBounds.x, this.currentBounds.y);\n\n    if (row.grid.isChildGrid && row.grid.allowRowBreakAcrossPages && this.startLocation.x !== this.currentBounds.x) {\n      location.x = this.startLocation.x;\n    }\n\n    result.bounds = new RectangleF(location, new SizeF(0, 0));\n    this.gridHeight = row.rowBreakHeight > 0 ? this.currentPageBounds.height : 0; // Calculate the remaining height.\n\n    if (row.grid.style.cellPadding.top + this.currentBounds.y + row.grid.style.cellPadding.bottom < this.currentPageBounds.height) {\n      row.rowBreakHeight = this.currentBounds.y + calculateHeight - this.currentPageBounds.height;\n    } // else {\n    //     row.rowBreakHeight = calculateHeight;\n    //     result.isFinish = false;\n    //     return;\n    // }\n    // No need to explicit break if the row height is equal to grid height.\n\n\n    for (var i = 0; i < row.cells.count; i++) {\n      var cell = row.cells.getCell(i);\n      var cellHeight = cell.measureHeight();\n\n      if (cellHeight === calculateHeight && cell.value instanceof PdfGrid) {\n        row.rowBreakHeight = 0;\n      } // else if (cellHeight === calculateHeight && (cell.value as PdfGrid) === null) {\n      //     row.rowBreakHeight = this.currentBounds.y + calculateHeight - this.currentPageBounds.height;\n      // }\n\n    }\n\n    for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n      var cancelSpans = row.cells.getCell(i).columnSpan + i > this.cellEndIndex + 1 && row.cells.getCell(i).columnSpan > 1; // if (!cancelSpans) {\n      //     for (let k : number = 1; k < row.cells.getCell(i).columnSpan; k++) {\n      //         row.cells.getCell(i + k).isCellMergeContinue = true;\n      //     }\n      //}\n\n      var size = new SizeF(this.Grid.columns.getColumn(i).width, this.gridHeight > 0.0 ? this.gridHeight : this.currentPageBounds.height); // if (size.width === 0) {\n      //     size = new SizeF(row.cells.getCell(i).width, size.height);\n      // }\n      // if (!this.CheckIfDefaultFormat(this.Grid.columns.getColumn(i).format) &&\n      //         this.CheckIfDefaultFormat((row.cells.getCell(i).stringFormat))) {\n      //     row.cells.getCell(i).stringFormat = this.Grid.columns.getColumn(i).format;\n      // }\n\n      var cellstyle1 = row.cells.getCell(i).style;\n      row.cells.getCell(i).style = cellstyle1;\n      var skipcell = false;\n      var stringResult = null;\n\n      if (!skipcell) {\n        stringResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location, size), cancelSpans);\n      } //If still row is to be drawn, set cell finished drawing cell as false and update the text to be drawn.\n\n\n      if (row.rowBreakHeight > 0.0) {\n        if (stringResult != null) {\n          row.cells.getCell(i).FinishedDrawingCell = false;\n          row.cells.getCell(i).remainingString = stringResult.remainder == null ? ' ' : stringResult.remainder;\n\n          if (row.grid.isChildGrid) {\n            row.rowBreakHeight = calculateHeight - stringResult.actualSize.height;\n          }\n        }\n      }\n\n      result.isFinish = !result.isFinish ? result.isFinish : row.cells.getCell(i).FinishedDrawingCell; // let tempValue : string = ((typeof row.cells.getCell(i).value === 'string' &&\n      //row.cells.getCell(i).value !== null) ? row.cells.getCell(i).value : '') as string;\n      // if (!cancelSpans) {\n      //     // this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i,\n      //     //           new RectangleF(location, size), tempValue, row.cells.getCell(i).style);            \n      //     this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location, size),\n      //                             (row.cells.getCell(i).value as string) ? row.cells.getCell(i).value.toString() : ' ',\n      //                             row.cells.getCell(i).style);\n      //     }                \n\n      if (row.cells.getCell(i).value instanceof PdfGrid) {\n        var grid = row.cells.getCell(i).value;\n        this.rowBreakPageHeightCellIndex = i; // row.cells.getCell(i).pageCount = grid.listOfNavigatePages.length;\n        // for (let j : number = 0;j<grid.listOfNavigatePages.length;j++){\n        //     let pageIndex : number =grid.listOfNavigatePages.indexOf(j);\n        //             this.Grid.listOfNavigatePages.push(pageIndex);\n        //     }\n\n        if (this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width) {\n          location.x = this.rowLayoutBoundsWidth;\n          location.x += grid.style.cellSpacing;\n        } else {\n          location.x += this.Grid.columns.getColumn(i).width;\n        }\n      } else {\n        location.x += this.Grid.columns.getColumn(i).width;\n      }\n    }\n\n    this.currentBounds.y += this.gridHeight > 0.0 ? this.gridHeight : calculateHeight;\n    result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location.x, location.y));\n  };\n  /**\n   * @hidden\n   * @private\n   */\n\n\n  PdfGridLayouter.repeatRowIndex = -1;\n  return PdfGridLayouter;\n}(ElementLayouter);\n\nexport { PdfGridLayouter }; // recalculateBounds : boolean, clientSize : SizeF\n//Implementation\n\n/**\n * `Initializes` internal data.\n * @private\n */\n//Internal declaration\n\nvar PdfGridLayoutResult =\n/** @class */\nfunction (_super) {\n  __extends(PdfGridLayoutResult, _super);\n  /**\n   * Constructor\n   * @private\n   */\n\n\n  function PdfGridLayoutResult(page, bounds) {\n    return _super.call(this, page, bounds) || this;\n  }\n\n  return PdfGridLayoutResult;\n}(PdfLayoutResult);\n\nexport { PdfGridLayoutResult };\n/**\n * `PdfGridLayoutFormat` class represents a flexible grid that consists of columns and rows.\n */\n\nvar PdfGridLayoutFormat =\n/** @class */\nfunction (_super) {\n  __extends(PdfGridLayoutFormat, _super);\n  /**\n   * Initializes a new instance of the `PdfGridLayoutFormat` class.\n   * @private\n   */\n\n\n  function PdfGridLayoutFormat(baseFormat) {\n    return _super.call(this, baseFormat) || this;\n  }\n\n  return PdfGridLayoutFormat;\n}(PdfLayoutFormat);\n\nexport { PdfGridLayoutFormat };\n\nvar GridCellEventArgs =\n/** @class */\nfunction () {\n  // Constructors\n\n  /**\n   * Initialize a new instance for `GridCellEventArgs` class.\n   * @private\n   */\n  function GridCellEventArgs(graphics, rowIndex, cellIndex, bounds, value) {\n    this.gridRowIndex = rowIndex;\n    this.gridCellIndex = cellIndex;\n    this.internalValue = value;\n    this.gridBounds = bounds;\n    this.pdfGraphics = graphics;\n  }\n\n  Object.defineProperty(GridCellEventArgs.prototype, \"rowIndex\", {\n    // Properties\n\n    /**\n     * Gets the value of current `row index`.\n     * @private\n     */\n    get: function get() {\n      return this.gridRowIndex;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GridCellEventArgs.prototype, \"cellIndex\", {\n    /**\n     * Gets the value of current `cell index`.\n     * @private\n     */\n    get: function get() {\n      return this.gridCellIndex;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GridCellEventArgs.prototype, \"value\", {\n    /**\n     * Gets the actual `value` of current cell.\n     * @private\n     */\n    get: function get() {\n      return this.internalValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GridCellEventArgs.prototype, \"bounds\", {\n    /**\n     * Gets the `bounds` of current cell.\n     * @private\n     */\n    get: function get() {\n      return this.gridBounds;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GridCellEventArgs.prototype, \"graphics\", {\n    /**\n     * Gets the instance of `current graphics`.\n     * @private\n     */\n    get: function get() {\n      return this.pdfGraphics;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return GridCellEventArgs;\n}();\n\nexport { GridCellEventArgs };\n\nvar PdfGridBeginCellDrawEventArgs =\n/** @class */\nfunction (_super) {\n  __extends(PdfGridBeginCellDrawEventArgs, _super); // Constructors\n\n  /**\n   * Initializes a new instance of the `StartCellLayoutEventArgs` class.\n   * @private\n   */\n\n\n  function PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style) {\n    var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;\n\n    _this.style = style;\n    return _this;\n  }\n\n  Object.defineProperty(PdfGridBeginCellDrawEventArgs.prototype, \"skip\", {\n    // Properties\n\n    /**\n     * Gets or sets a value indicating whether the value of this cell should be `skipped`.\n     * @private\n     */\n    get: function get() {\n      return this.bSkip;\n    },\n    set: function set(value) {\n      this.bSkip = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridBeginCellDrawEventArgs.prototype, \"style\", {\n    /**\n     * Gets or sets a `style` value of the cell.\n     * @private\n     */\n    get: function get() {\n      return this.cellStyle;\n    },\n    set: function set(value) {\n      this.cellStyle = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGridBeginCellDrawEventArgs;\n}(GridCellEventArgs);\n\nexport { PdfGridBeginCellDrawEventArgs };\n\nvar PdfGridEndCellDrawEventArgs =\n/** @class */\nfunction (_super) {\n  __extends(PdfGridEndCellDrawEventArgs, _super); // Constructors\n\n  /**\n   * Initializes a new instance of the `PdfGridEndCellLayoutEventArgs` class.\n   * @private\n   */\n\n\n  function PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style) {\n    var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;\n\n    _this.cellStyle = style;\n    return _this;\n  }\n\n  Object.defineProperty(PdfGridEndCellDrawEventArgs.prototype, \"style\", {\n    // Propertise\n\n    /**\n     * Get the `PdfGridCellStyle`.\n     * @private\n     */\n    get: function get() {\n      return this.cellStyle;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGridEndCellDrawEventArgs;\n}(GridCellEventArgs);\n\nexport { PdfGridEndCellDrawEventArgs };\n\nvar PdfCancelEventArgs =\n/** @class */\nfunction () {\n  function PdfCancelEventArgs() {}\n\n  Object.defineProperty(PdfCancelEventArgs.prototype, \"cancel\", {\n    // Properties\n\n    /**\n     * Gets and Sets the value of `cancel`.\n     * @private\n     */\n    get: function get() {\n      return this.isCancel;\n    },\n    set: function set(value) {\n      this.isCancel = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfCancelEventArgs;\n}();\n\nexport { PdfCancelEventArgs };\n\nvar BeginPageLayoutEventArgs =\n/** @class */\nfunction (_super) {\n  __extends(BeginPageLayoutEventArgs, _super); // Constructors\n\n  /**\n   * Initializes a new instance of the `BeginPageLayoutEventArgs` class with the specified rectangle and page.\n   * @private\n   */\n\n\n  function BeginPageLayoutEventArgs(bounds, page) {\n    var _this = _super.call(this) || this;\n\n    _this.bounds = bounds;\n    _this.pdfPage = page;\n    return _this;\n  }\n\n  Object.defineProperty(BeginPageLayoutEventArgs.prototype, \"bounds\", {\n    // Properties\n\n    /**\n     * Gets or sets value that indicates the lay outing `bounds` on the page.\n     * @private\n     */\n    get: function get() {\n      return this.cellBounds;\n    },\n    set: function set(value) {\n      this.cellBounds = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BeginPageLayoutEventArgs.prototype, \"page\", {\n    /**\n     * Gets the `page` where the lay outing should start.\n     * @private\n     */\n    get: function get() {\n      return this.pdfPage;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return BeginPageLayoutEventArgs;\n}(PdfCancelEventArgs);\n\nexport { BeginPageLayoutEventArgs };\n/**\n * `EndPageLayoutEventArgs` class is alternate for end page layout events.\n */\n\nvar EndPageLayoutEventArgs =\n/** @class */\nfunction (_super) {\n  __extends(EndPageLayoutEventArgs, _super); // Constructors\n\n  /**\n   * Initializes a new instance of the `EndPageLayoutEventArgs` class. with the specified 'PdfLayoutResult'.\n   * @private\n   */\n\n\n  function EndPageLayoutEventArgs(result) {\n    var _this = _super.call(this) || this;\n\n    _this.layoutResult = result;\n    return _this;\n  }\n\n  Object.defineProperty(EndPageLayoutEventArgs.prototype, \"result\", {\n    // Properties\n\n    /**\n     * Gets the lay outing `result` of the page.\n     * @private\n     */\n    get: function get() {\n      return this.layoutResult;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(EndPageLayoutEventArgs.prototype, \"nextPage\", {\n    /**\n     * Gets or sets a value indicating the `next page` where the element should be layout.\n     * @private\n     */\n    get: function get() {\n      return this.nextPdfPage;\n    },\n    set: function set(value) {\n      this.nextPdfPage = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return EndPageLayoutEventArgs;\n}(PdfCancelEventArgs);\n\nexport { EndPageLayoutEventArgs };\n/**\n * `PdfGridBeginPageLayoutEventArgs` class is alternate for begin page layout events.\n */\n\nvar PdfGridBeginPageLayoutEventArgs =\n/** @class */\nfunction (_super) {\n  __extends(PdfGridBeginPageLayoutEventArgs, _super); // Constructors\n\n  /**\n   * Initialize a new instance of `PdfGridBeginPageLayoutEventArgs` class.\n   * @private\n   */\n\n\n  function PdfGridBeginPageLayoutEventArgs(bounds, page, startRow) {\n    var _this = _super.call(this, bounds, page) || this;\n\n    _this.startRow = startRow;\n    return _this;\n  }\n\n  Object.defineProperty(PdfGridBeginPageLayoutEventArgs.prototype, \"startRowIndex\", {\n    // Properties\n\n    /**\n     * Gets the `start row index`.\n     * @private\n     */\n    get: function get() {\n      return this.startRow;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGridBeginPageLayoutEventArgs;\n}(BeginPageLayoutEventArgs);\n\nexport { PdfGridBeginPageLayoutEventArgs };\n/**\n * `PdfGridEndPageLayoutEventArgs` class is alternate for begin page layout events.\n */\n\nvar PdfGridEndPageLayoutEventArgs =\n/** @class */\nfunction (_super) {\n  __extends(PdfGridEndPageLayoutEventArgs, _super); // Constructors\n\n  /**\n   * Initialize a new instance of `PdfGridEndPageLayoutEventArgs` class.\n   * @private\n   */\n\n\n  function PdfGridEndPageLayoutEventArgs(result) {\n    return _super.call(this, result) || this;\n  }\n\n  return PdfGridEndPageLayoutEventArgs;\n}(EndPageLayoutEventArgs);\n\nexport { PdfGridEndPageLayoutEventArgs };\n\nvar RowLayoutResult =\n/** @class */\nfunction () {\n  //Constructors\n\n  /**\n   * Initializes a new instance of the `RowLayoutResult` class.\n   * @private\n   */\n  function RowLayoutResult() {\n    this.layoutedBounds = new RectangleF(0, 0, 0, 0);\n  }\n\n  Object.defineProperty(RowLayoutResult.prototype, \"isFinish\", {\n    /**\n     * Gets or sets a value indicating whether this instance `is finish`.\n     * @private\n     */\n    get: function get() {\n      return this.bIsFinished;\n    },\n    set: function set(value) {\n      this.bIsFinished = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RowLayoutResult.prototype, \"bounds\", {\n    /**\n     * Gets or sets the `bounds`.\n     * @private\n     */\n    get: function get() {\n      return this.layoutedBounds;\n    },\n    set: function set(value) {\n      this.layoutedBounds = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return RowLayoutResult;\n}();\n\nexport { RowLayoutResult };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","PdfGrid","PdfStringFormat","SizeF","RectangleF","PointF","PdfBorders","PdfLayoutType","PdfLayoutBreakType","PdfLayoutResult","PdfLayoutFormat","ElementLayouter","PdfHorizontalOverflowType","TemporaryDictionary","PdfGridLayouter","_super","baseFormat","_this","call","gridInitialWidth","gridSize","parentCellIndex","tempWidth","childheight","isChildGrid","hasRowSpanSpan","isRearranged","pageBounds","listOfNavigatePages","flag","columnRanges","currentLocation","breakRow","isOverloadWithPosition","defineProperty","get","elements","enumerable","configurable","getFormat","format","f","layoutInternal","param","gridLayoutFormat","currentPage","page","pageHeight","getClientSize","height","pageWidth","width","currentPageBounds","Error","currentGraphics","graphics","index","section","indexOf","push","break","FitColumnsToPage","currentBounds","bounds","x","y","Grid","columns","clientSize","rows","count","getRow","cells","getCell","style","borders","left","headers","startLocation","hType","horizontalOverflowType","allowHorizontalOverflow","measureColumnsWidth","determineColumnDrawRanges","i","isRowHeightSet","result","layoutOnPage","startColumn","endColumn","cellWidths","availableWidth","getColumn","subWidths","j","endArgs","layoutedPages","startPage","isParentCell","cellBounds","length","range","cellStartIndex","cellEndIndex","returnObject","raiseBeforePageLayout","currentRowIndex","drawHeader","i_1","row","getHeader","headerHeight","headerResult","drawRow","length_1","repeatRow","startingHeight","originalHeight","repeatRowIndex","grid","rowResult","splitChildRowIndex","isrowFinish","ParentCell","isGridSplit","rowIndex","rowCollection","isFinish","tempResult","getLayoutResult","raisePageLayouted","cancel","allowRowBreakAcrossPages","getNextPageformat","location_1","default","right","top","paginateBounds","cellPadding","rowBreakHeight","isRowBreaksNextPage","rowBreakHeightValue","bottom","i_2","noOfPageCount","border","newBound","repeatHeader","j_1","headerRepeat","temp","j_2","tempResult1","i_3","header","i_4","value","layout","OnePage","isAddNextPage","usePaginateBounds","i_5","containsKey","add","NestedGridLayoutResult","recalHeight","ReCalculateHeight","secion","startIndex","endIndex","pageGraphics","location_2","c","cell","cellWidth","totalwidth","i_6","columnWidth","Math","max","drawCellBorders","columnSpan","isPdfGrid","maximumCellBoundsWidth","largeNavigatePage","rowLayoutBoundsWidth","pageIndex","pageindex","NextPage","reArrangePages","nextPage","getPages","CheckIfDefaultFormat","defaultFormat","alignment","characterSpacing","clipPath","firstLineIndent","horizontalScalingFactor","lineAlignment","lineLimit","lineSpacing","measureTrailingSpaces","noClip","paragraphIndent","rightToLeft","subSuperScript","wordSpacing","wordWrap","RaiseBeforeCellDraw","cellIndex","args","raiseBeginCellDraw","PdfGridBeginCellDrawEventArgs","onBeginCellDraw","raiseAfterCellDraw","cellstyle","raiseEndCellDraw","PdfGridEndCellDrawEventArgs","onEndCellDraw","document","pages","keys","values","remove","size","count_1","repeatFlag","origin","isChanged","PdfGridLayoutResult","newHeight","remainingString","measureHeight","currentRow","raiseBeginPageLayout","PdfGridBeginPageLayoutEventArgs","onBeginPageLayout","startRowIndex","returnValue","PdfGridEndPageLayoutEventArgs","raiseEndPageLayout","onEndPageLayout","result_1","RowLayoutResult","rowHeightWithSpan","location_3","isHeader","rowSpanExists","maxSpan","currRowIndex","rowSpan","calculatedHeight","LayoutFormat","FitPage","drawRowWithBreak","repeatRowNumber","skipcell","location_4","cancelSpans","isCellMergeContinue","stringFormat","tempValue","stringResult","draw","rowOverflowIndex","remainder","undefined","cellSpacing","rowMergeComplete","calculateHeight","location","gridHeight","cellHeight","cellstyle1","FinishedDrawingCell","actualSize","rowBreakPageHeightCellIndex","PdfGridLayoutFormat","GridCellEventArgs","gridRowIndex","gridCellIndex","internalValue","gridBounds","pdfGraphics","bSkip","set","cellStyle","PdfCancelEventArgs","isCancel","BeginPageLayoutEventArgs","pdfPage","EndPageLayoutEventArgs","layoutResult","nextPdfPage","startRow","layoutedBounds","bIsFinished"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/layout/grid-layouter.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { PdfGrid } from '../pdf-grid';\nimport { PdfStringFormat } from './../../../graphics/fonts/pdf-string-format';\nimport { SizeF, RectangleF, PointF } from './../../../drawing/pdf-drawing';\nimport { PdfBorders } from '../styles/pdf-borders';\nimport { PdfLayoutType, PdfLayoutBreakType } from './../../../graphics/figures/enum';\nimport { PdfLayoutResult, PdfLayoutFormat, ElementLayouter } from './../../../graphics/figures/base/element-layouter';\nimport { PdfHorizontalOverflowType } from '../styles/style';\nimport { TemporaryDictionary } from './../../../collections/object-object-pair/dictionary';\n/**\n * Class `lay outing the text`.\n *\n */\nvar PdfGridLayouter = /** @class */ (function (_super) {\n    __extends(PdfGridLayouter, _super);\n    //constructor\n    /**\n     * Initialize a new instance for `PdfGrid` class.\n     * @private\n     */\n    function PdfGridLayouter(baseFormat) {\n        var _this = _super.call(this, baseFormat) || this;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.gridInitialWidth = 0;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.gridSize = new SizeF(0, 0);\n        _this.parentCellIndex = 0;\n        _this.tempWidth = 0;\n        _this.childheight = 0;\n        /**\n         * Check weather it is `child grid or not`.\n         * @private\n         */\n        _this.isChildGrid = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.hasRowSpanSpan = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.isRearranged = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.pageBounds = new RectangleF();\n        /**\n         * @hidden\n         * @private\n         */\n        _this.listOfNavigatePages = [];\n        /**\n         * @hidden\n         * @private\n         */\n        _this.flag = true;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.columnRanges = [];\n        /**\n         * @hidden\n         * @private\n         */\n        _this.currentLocation = new PointF(0, 0);\n        /**\n         * @hidden\n         * @private\n         */\n        _this.breakRow = true;\n        /**\n         * Checks whether the x co-ordinate is need to set as client size or not.\n         * @hidden\n         * @private\n         */\n        _this.isOverloadWithPosition = false;\n        return _this;\n    }\n    Object.defineProperty(PdfGridLayouter.prototype, \"Grid\", {\n        //Properties\n        get: function () {\n            return this.elements;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Constructors\n    /**\n     * Initializes a new instance of the `StringLayouter` class.\n     * @private\n     */\n    //Public methods\n    /**\n     * `Layouts` the text.\n     * @private\n     */\n    /**\n     * `Layouts` the specified graphics.\n     * @private\n     */\n    /**\n     * `Layouts` the specified graphics.\n     * @private\n     */\n    /*public layout(graphics : PdfLayoutParams) : PdfLayoutResult\n    public layout(graphics : PdfGraphics, bounds : RectangleF) : void\n    public layout(graphics : PdfGraphics, bounds : PointF) : void\n    public layout(graphics ?: PdfGraphics | PdfLayoutParams, bounds ?: PointF | RectangleF) : void | PdfLayoutResult  {\n        if (graphics instanceof PdfGraphics) {\n        if (bounds instanceof PointF) {\n            if (bounds.x === 0) {\n                bounds.x = PdfBorders.default.right.width / 2;\n            }\n            if (bounds.y === 0) {\n                bounds.y = PdfBorders.default.top.width / 2;\n            }\n            let boundaries : RectangleF = new RectangleF(bounds, new SizeF(0, 0));\n            this.layout(graphics, boundaries);\n        } else {\n            let width : number = graphics.clientSize.width;\n            let parameter : PdfLayoutParams = new PdfLayoutParams();\n            parameter.bounds = bounds;\n            this.currentGraphics = graphics;\n            if (graphics.layer != null) {\n                let index : number = 0;\n                if (this.currentGraphics.page instanceof PdfPage) {\n                    index = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n                } else {\n                    index = (this.currentGraphics.page as PdfPageBase).defaultLayerIndex;\n                }\n            } else {\n                this.layoutInternal(parameter);\n            }\n        }\n    }\n    }*/\n    /**\n     * Gets the `format`.\n     * @private\n     */\n    PdfGridLayouter.prototype.getFormat = function (format) {\n        var f = format;\n        return f;\n    };\n    /**\n     * `Layouts` the element.\n     * @private\n     */\n    PdfGridLayouter.prototype.layoutInternal = function (param) {\n        var format = this.getFormat(param.format);\n        this.gridLayoutFormat = this.getFormat(param.format);\n        this.currentPage = param.page;\n        if (this.currentPage !== null) {\n            var pageHeight = this.currentPage.getClientSize().height;\n            var pageWidth = this.currentPage.getClientSize().width;\n            this.currentPageBounds = this.currentPage.getClientSize();\n        }\n        else {\n            throw Error('Can not set page as null');\n            //this.currentPageBounds = this.currentGraphics.clientSize;\n        }\n        this.currentGraphics = this.currentPage.graphics;\n        //this.currentGraphics = (this.currentPage != null ) ? this.currentPage.graphics : this.currentGraphics;\n        // if (this.currentGraphics.layer !== null) {\n        //     let index : number = 0;\n        //     if (this.currentGraphics.page instanceof PdfPage) {\n        //         index = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n        //     } else {\n        //         index = (this.currentGraphics.page as PdfPageBase).defaultLayerIndex;\n        //     }\n        //     this.listOfNavigatePages.push(index);\n        // }\n        var index = 0;\n        index = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n        this.listOfNavigatePages.push(index);\n        if (format != null && format.break === PdfLayoutBreakType.FitColumnsToPage) {\n            this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), new SizeF(this.Grid.columns.width, this.currentGraphics.clientSize.height));\n        }\n        else {\n            this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);\n        }\n        //this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);\n        if (this.Grid.rows.count !== 0) {\n            this.currentBounds.width = (param.bounds.width > 0) ? param.bounds.width :\n                (this.currentBounds.width - this.Grid.rows.getRow(0).cells.getCell(0).style.borders.left.width / 2);\n        }\n        else if (this.Grid.headers.count !== 0) {\n            // this.currentBounds.width = (param.bounds.width > 0) ? param.bounds.width : (this.currentBounds.width -\n            //                                 this.Grid.headers.getHeader(0).cells.getCell(0).style.borders.left.width / 2);\n            this.currentBounds.width = param.bounds.width;\n        }\n        else {\n            throw Error('Please add row or header into grid');\n        }\n        this.startLocation = new PointF(param.bounds.x, param.bounds.y);\n        // if (this.Grid.style.allowHorizontalOverflow && this.currentBounds.width > this.currentGraphics.clientSize.width) {\n        //     this.currentBounds.width = this.currentGraphics.clientSize.width;\n        //     this.currentBounds.width -= this.currentBounds.x;\n        // }\n        // if (this.Grid.isChildGrid) {\n        //     this.childheight = param.bounds.height;\n        // }\n        // if (param.format !== null && param.format.usePaginateBounds) {\n        //     if (param.format.paginateBounds.height > 0) {\n        //         this.currentBounds.height = param.format.paginateBounds.height;\n        //     }\n        //} else \n        if (param.bounds.height > 0 && !this.Grid.isChildGrid) {\n            this.currentBounds.height = param.bounds.height;\n        }\n        if (!this.Grid.isChildGrid) {\n            this.hType = this.Grid.style.horizontalOverflowType;\n        }\n        if (!this.Grid.style.allowHorizontalOverflow) {\n            this.columnRanges = [];\n            this.Grid.measureColumnsWidth(this.currentBounds);\n            this.columnRanges.push([0, this.Grid.columns.count - 1]);\n        }\n        else {\n            this.Grid.measureColumnsWidth();\n            this.determineColumnDrawRanges();\n        }\n        if (this.Grid.hasRowSpanSpan) {\n            for (var i = 0; i < this.Grid.rows.count; i++) {\n                if (this.Grid.rows.getRow(i).height !== -1 && !this.Grid.rows.getRow(i).isRowHeightSet) {\n                    this.Grid.rows.getRow(i).isRowHeightSet = true;\n                }\n            }\n        }\n        var result = this.layoutOnPage(param);\n        return result;\n    };\n    // /* tslint:enable */\n    /**\n     * `Determines the column draw ranges`.\n     * @private\n     */\n    PdfGridLayouter.prototype.determineColumnDrawRanges = function () {\n        var startColumn = 0;\n        var endColumn = 0;\n        var cellWidths = 0;\n        var availableWidth = this.currentGraphics.clientSize.width - this.currentBounds.x;\n        for (var i = 0; i < this.Grid.columns.count; i++) {\n            cellWidths += this.Grid.columns.getColumn(i).width;\n            if (cellWidths >= availableWidth) {\n                var subWidths = 0;\n                for (var j = startColumn; j <= i; j++) {\n                    subWidths += this.Grid.columns.getColumn(j).width;\n                    if (subWidths > availableWidth) {\n                        break;\n                    }\n                    endColumn = j;\n                }\n                this.columnRanges.push([startColumn, endColumn]);\n                startColumn = endColumn + 1;\n                endColumn = startColumn;\n                cellWidths = (endColumn <= i) ? this.Grid.columns.getColumn(i).width : 0;\n            }\n        }\n        // if (startColumn !== this.columns.Count) {\n        this.columnRanges.push([startColumn, this.Grid.columns.count - 1]);\n        // }\n    };\n    /**\n     * `Layouts the on page`.\n     * @private\n     */\n    PdfGridLayouter.prototype.layoutOnPage = function (param) {\n        /* tslint:disable */\n        this.pageBounds.x = param.bounds.x;\n        this.pageBounds.y = param.bounds.y;\n        this.pageBounds.height = param.bounds.height;\n        var format = this.getFormat(param.format);\n        var endArgs = null;\n        var result = null;\n        var layoutedPages = new TemporaryDictionary();\n        var startPage = param.page;\n        var isParentCell = false;\n        var cellBounds = [];\n        for (var index = 0; index < this.columnRanges.length; index++) {\n            var range = this.columnRanges[index];\n            this.cellStartIndex = range[0];\n            this.cellEndIndex = range[1];\n            var returnObject = this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex);\n            this.currentBounds = returnObject.currentBounds;\n            this.currentRowIndex = returnObject.currentRowIndex;\n            // if (returnObject.returnValue) {\n            //     result = new PdfGridLayoutResult(this.currentPage, this.currentBounds);\n            //     break;\n            // }\n            //Draw Headers.\n            var drawHeader = void 0;\n            for (var i_1 = 0; i_1 < this.Grid.headers.count; i_1++) {\n                var row = this.Grid.headers.getHeader(i_1);\n                var headerHeight = this.currentBounds.y;\n                // RowLayoutResult\n                var headerResult = this.drawRow(row);\n                // if (headerHeight === this.currentBounds.y) {\n                //     drawHeader = true;\n                //     if (PdfGrid.repeatRowIndex === -1) {\n                //         PdfGrid.repeatRowIndex = this.rows.getRow.indexOf(row);\n                //     }\n                // } else {\n                drawHeader = false;\n                // }\n            }\n            var i = 0;\n            var length_1 = this.Grid.rows.count;\n            var repeatRow = void 0;\n            var startingHeight = 0;\n            var flag = true;\n            //Here is to draw parent Grid and Cells\n            cellBounds = [];\n            //Draw row by row with the specified cell range.\n            for (var j = 0; j < this.Grid.rows.count; j++) {\n                var row = this.Grid.rows.getRow(j);\n                i++;\n                this.currentRowIndex = i - 1;\n                var originalHeight = this.currentBounds.y;\n                startPage = this.currentPage;\n                PdfGridLayouter.repeatRowIndex = -1;\n                if (flag && row.grid.isChildGrid) {\n                    startingHeight = originalHeight;\n                    flag = false;\n                }\n                var rowResult = null;\n                ///rowResult = this.drawRow(row);\n                /*if(!row.isrowFinish) {\n                    if(!row.grid.isgridSplit){\n                        rowResult = this.drawRow(row);\n                        row.isrowFinish = true;\n                        row.isrowDraw = true;\n                    } else {\n                        if(!row.isrowDraw){\n                            rowResult = this.drawRow(row);\n                            row.isrowFinish = true;\n                            row.isrowDraw = true;\n                            row.grid.isgridSplit = false;\n                        } else {\n                            rowResult =  null;\n                            break;\n                        }\n                    }\n                }\n                else {\n                    //row.isrowFinish = false;\n                    //rowResult = this.drawRow(row);\n                    rowResult = null;\n                    break;\n                    \n                }             */\n                if (this.Grid.splitChildRowIndex == -1) {\n                    rowResult = this.drawRow(row);\n                    row.isrowFinish = true;\n                }\n                else {\n                    if (row.grid.ParentCell.row.grid.isGridSplit && this.Grid.splitChildRowIndex <= row.rowIndex) {\n                        rowResult = this.drawRow(row);\n                        row.isrowFinish = true;\n                    }\n                    else if (row.isrowFinish) {\n                        continue;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                //rowResult = this.drawRow(row);\n                cellBounds.push(rowResult.bounds.width);\n                /*if (row.isRowBreaksNextPage)\n                    {\n                        let x : number  = 0;\n                        for (let l : number = 0; l < row.cells.count; l++)\n                        {\n                            let isNestedRowBreak : boolean = false;\n                            if (row.height == row.cells.getCell(l).height)\n                            {\n                                let n : number;\n                                let grid : PdfGrid = row.cells.getCell(l).value as PdfGrid;\n                                for (let m : number = grid.rows.count; 0 < m; m--)\n                                {\n                                    if ((grid.rows.getRow(m - 1).rowBreakHeight > 0))\n                                    {\n                                        isNestedRowBreak = true;\n                                        break;\n                                    }\n                                    if (grid.rows.getRow(m - 1).isRowBreaksNextPage)\n                                    {\n                                        row.rowBreakHeightValue = grid.rows.getRow(m - 1).rowBreakHeightValue;\n                                        break;\n                                    }\n                                    row.rowBreakHeightValue += grid.rows.getRow(m - 1).height;\n                                }\n                            }\n                            if (isNestedRowBreak)\n                                break;\n                        }\n                        for (let j : number = 0; j < row.cells.count; j++)\n                        {\n\n                            if (row.height > row.cells.getCell(j).height)\n                            {\n                                row.cells.getCell(j).value = \" \";\n                                let rect : RectangleF ;\n                                let page : PdfPage = this.getNextPage(this.currentPage);\n                                let section : PdfSection = this.currentPage.section;\n                                let index : number = section.indexOf(page);\n                                for (let k : number = 0; k < (section.count - 1) - index; k++)\n                                {\n                                    rect = new RectangleF(x, 0, row.grid.columns.getColumn(j).width, page.getClientSize().height);\n                                    PdfGridLayouter.repeatRowIndex = -1;\n                                    row.cells.getCell(j).draw(page.graphics, rect, false);\n                                    page = this.getNextPage(page);\n                                }\n                                rect = new RectangleF(x, 0, row.grid.columns.getColumn(j).width, row.rowBreakHeightValue);\n\n                                row.cells.getCell(j).draw(page.graphics, rect, false);\n                            }\n                            x += row.grid.columns.getColumn(j).width;\n                        }\n                    }*/\n                //if height remains same, it is understood that row is not drawn in the page\n                if (originalHeight === this.currentBounds.y) {\n                    repeatRow = true;\n                    PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n                }\n                else {\n                    repeatRow = false;\n                    PdfGridLayouter.repeatRowIndex = -1;\n                }\n                while (!rowResult.isFinish && startPage != null) {\n                    var tempResult = this.getLayoutResult();\n                    /*if (startPage != this.currentPage)\n                        {\n                            if (row.grid.isChildGrid && row.grid.ParentCell != null)\n                            {\n                                let bounds : RectangleF= new RectangleF(new PointF(format.paginateBounds.x,format.paginateBounds.y), new SizeF(param.bounds.width, tempResult.bounds.height));\n                                bounds.x += param.bounds.x;\n                                if (row.grid.ParentCell.row.grid.style.cellPadding != null)\n                                {\n                                    bounds.y += row.grid.ParentCell.row.grid.style.cellPadding.top;\n                                    if (bounds.height > this.currentPageBounds.height)\n                                    {\n                                        bounds.height = this.currentPageBounds.height - bounds.y;\n                                        bounds.height -= (row.grid.ParentCell.row.grid.style.cellPadding.bottom);\n                                    }\n                                }\n                                // Draw border for cells in the nested grid cell's row.\n                                for (let c : number = 0; c < row.cells.count; c++)\n                                {\n                                    let cell : PdfGridCell = row.cells.getCell(c);\n                                    let cellWidth :  number= 0;\n                                    if (cell.columnSpan > 1)\n                                    {\n                                        for (; c < cell.columnSpan; c++)\n                                            cellWidth += row.grid.columns.getColumn(c).width;\n                                    }\n                                    else\n                                        cellWidth = Math.max(cell.width, row.grid.columns.getColumn(c).width);\n                                    cell.drawCellBorders(this.currentGraphics, new RectangleF(new PointF(bounds.x,bounds.y), new SizeF(cellWidth, bounds.height)));\n                                    bounds.x += cellWidth;\n                                    c += (cell.columnSpan - 1);\n                                }\n                            }\n                        }\n                        */\n                    endArgs = this.raisePageLayouted(tempResult);\n                    if (endArgs.cancel || repeatRow)\n                        break;\n                    else if (this.Grid.allowRowBreakAcrossPages) {\n                        //If there is no space in the current page, add new page and then draw the remaining row.\n                        this.currentPage = this.getNextPageformat(format);\n                        originalHeight = this.currentBounds.y;\n                        var location_1 = new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2);\n                        if ((format.paginateBounds.x === 0 && format.paginateBounds.y === 0 && format.paginateBounds.width === 0 &&\n                            format.paginateBounds.height === 0) && (this.startLocation.x === location_1.x && this.startLocation.y === location_1.y)) {\n                            this.currentBounds.x += this.startLocation.x;\n                            this.currentBounds.y += this.startLocation.y;\n                        }\n                        if (this.Grid.isChildGrid && row.grid.ParentCell != null) {\n                            if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n                                if (row.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top < this.currentBounds.height) {\n                                    this.currentBounds.y = this.Grid.ParentCell.row.grid.style.cellPadding.top;\n                                }\n                            }\n                        }\n                        if (row.grid.ParentCell != null) {\n                            row.grid.ParentCell.row.isRowBreaksNextPage = true;\n                            row.grid.ParentCell.row.rowBreakHeightValue = row.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top + this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n                            for (var i_2 = row.rowIndex + 1; i_2 < row.grid.rows.count; i_2++) {\n                                row.grid.ParentCell.row.rowBreakHeightValue += row.grid.rows.getRow(i_2).height;\n                            }\n                            //row.rowBreakHeight = row.grid.ParentCell.row.rowBreakHeightValue;\n                        }\n                        /*if (row.noOfPageCount > 1)\n                        {\n                            let temp : number = row.rowBreakHeightValue;\n                            for (let j : number = 1; j < row.noOfPageCount; j++)\n                            {\n                                row.rowBreakHeightValue = 0;\n                                row.height = ((row.noOfPageCount - 1) * this.currentPage.getClientSize().height);\n                                this.drawRow(row);\n                                this.currentPage = this.getNextPageformat(format);\n                                startPage = this.currentPage;\n                            }\n                            row.rowBreakHeightValue = temp;\n                            row.noOfPageCount = 1;\n                            rowResult = this.drawRow(row);\n                        } else {\n                            rowResult = this.drawRow(row);\n                        }\n                        /*if(row.grid.isChildGrid){\n                            row.isrowFinish = false;\n                            row.isrowDraw = false;\n                            row.grid.isgridSplit = true;\n                            row.grid.ParentCell.row.grid.isgridSplit = true;\n                            //rowResult.isFinish = false;\n                            break;\n                        }*/\n                        if (row.grid.isChildGrid) {\n                            //row.grid.isgridSplit = true;\n                            row.isrowFinish = false;\n                            //row.grid.ParentCell.row.grid.isgridSplit = true;\n                            row.grid.splitChildRowIndex = row.rowIndex;\n                            row.grid.ParentCell.row.grid.splitChildRowIndex = row.grid.ParentCell.row.rowIndex;\n                            if (row.grid.ParentCell.row.grid.isGridSplit) {\n                                row.grid.ParentCell.row.noOfPageCount += 1;\n                                row.grid.ParentCell.row.grid.isGridSplit = false;\n                            }\n                            break;\n                        }\n                        if (row.noOfPageCount < 1) {\n                            if (row.grid.splitChildRowIndex != -1) {\n                                row.grid.isGridSplit = true;\n                            }\n                            if (row.style.border != null && ((row.style.border.left != null && row.style.border.left.width !== 1)\n                                || (row.style.border.top != null && row.style.border.top.width !== 1))) {\n                                var x = row.style.border.left.width / 2;\n                                var y = row.style.border.top.width / 2;\n                                if (this.currentBounds.x === PdfBorders.default.right.width / 2 && this.currentBounds.y === PdfBorders.default.right.width / 2) {\n                                    var newBound = new RectangleF(x, y, this.currentBounds.width, this.currentBounds.height);\n                                    this.currentBounds = newBound;\n                                }\n                            }\n                            if (this.Grid.repeatHeader) {\n                                for (var j_1 = 0; j_1 < this.Grid.headers.count; j_1++) {\n                                    var headerRepeat = this.Grid.headers.getHeader(j_1);\n                                    this.drawRow(headerRepeat);\n                                }\n                            }\n                            rowResult = this.drawRow(row);\n                            if (row.noOfPageCount >= 1) {\n                                var temp = row.rowBreakHeightValue;\n                                for (var j_2 = 0; j_2 < row.noOfPageCount; j_2++) {\n                                    //this.currentPage.section.add();\n                                    var tempResult1 = this.getLayoutResult();\n                                    endArgs = this.raisePageLayouted(tempResult1);\n                                    this.currentPage = this.getNextPageformat(format);\n                                    originalHeight = this.currentBounds.y;\n                                    //row.rowBreakHeightValue = 0;\n                                    if (row.grid.splitChildRowIndex != -1) {\n                                        row.grid.isGridSplit = true;\n                                    }\n                                    this.currentBounds.y = 0.5;\n                                    if (this.Grid.repeatHeader) {\n                                        for (var i_3 = 0; i_3 < this.Grid.headers.count; i_3++) {\n                                            var header = this.Grid.headers.getHeader(i_3);\n                                            this.drawRow(header);\n                                        }\n                                    }\n                                    //row.height = ((row.noOfPageCount - 1) * this.currentPage.getClientSize().height);\n                                    this.drawRow(row);\n                                }\n                                // row.rowBreakHeight = temp;\n                                // row.noOfPageCount = 1;\n                                // rowResult = this.drawRow(row);\n                            }\n                            row.grid.splitChildRowIndex = -1;\n                            row.grid.isGridSplit = false;\n                            rowResult.isFinish = true;\n                            //row.NestedGridLayoutResult.bounds.height = row.rowBreakHeightValue;\n                            //this.currentBounds.y = rowResult.bounds.y;\n                            for (var i_4 = 0; i_4 < row.cells.count; i_4++) {\n                                if (row.cells.getCell(i_4).value instanceof PdfGrid) {\n                                    row.cells.getCell(i_4).value.splitChildRowIndex = -1;\n                                }\n                            }\n                        }\n                    }\n                    // else if (!this.Grid.allowRowBreakAcrossPages && i < length)\n                    // {\n                    //     this.currentPage = this.getNextPageformat(format);\n                    //     break;\n                    // }\n                    // else if (i >= length)\n                    //     break;\n                }\n                if (!rowResult.isFinish && startPage !== null && format.layout !== PdfLayoutType.OnePage && repeatRow) {\n                    // During pagination, cell position is maintained here.\n                    this.startLocation.x = this.currentBounds.x;\n                    var isAddNextPage = false;\n                    this.currentPage = this.getNextPageformat(format);\n                    /*if (!this.Grid.isSingleGrid)\n                    {\n                        for ( let j : number= 0; j < this.Grid.rows.count; j++)\n                        {\n                            let isWidthGreaterthanParent : boolean = false;\n                            for (let k : number = 0; k < this.Grid.rows.getRow(j).cells.count; k++)\n                            {\n                                if (this.Grid.rows.getRow(j).cells.getCell(k).width > this.currentPageBounds.width)\n                                    isWidthGreaterthanParent = true;\n                            }\n                            if (isWidthGreaterthanParent && this.Grid.rows.getRow(j).cells.getCell(this.rowBreakPageHeightCellIndex).pageCount > 0)\n                            {\n                                isAddNextPage = true;\n                            }\n                        }\n                    }\n                    if (!this.Grid.isRearranged && isAddNextPage)\n                         {\n                             let section : PdfSection = this.currentPage.section;\n                             \n                             //this.currentPage = section.add();\n                         \n                             this.currentGraphics = this.currentPage.graphics;\n                             this.currentBounds = new RectangleF(new PointF(0,0), this.currentPage.getClientSize());\n                          \n                             let pageindex  : number = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n                         }\n                         else\n                         {\n                             this.currentPage = this.getNextPageformat(format);\n                         }\n                         if (format.paginateBounds.y == 0)\n                             this.currentBounds.y = PdfBorders.default.top.width/2;\n                         else\n                         {\n                             this.currentBounds.y = format == null ? 0 : format.paginateBounds.y;\n                             \n                         }\n                         if (this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex))\n                             break;*/\n                    if ((param.format !== null) && !param.format.usePaginateBounds && param.bounds !== null &&\n                        param.bounds.height > 0 && !this.Grid.isChildGrid) {\n                        this.currentBounds.height = param.bounds.height;\n                    }\n                    if ((param.format !== null) && !param.format.usePaginateBounds && param.bounds !== null &&\n                        param.bounds.y > 0 && !this.Grid.isChildGrid) {\n                        this.currentBounds.y = param.bounds.y;\n                    }\n                    this.startLocation.y = this.currentBounds.y;\n                    if ((format.paginateBounds.x === format.paginateBounds.y) &&\n                        (format.paginateBounds.y === format.paginateBounds.height) &&\n                        (format.paginateBounds.height === format.paginateBounds.width) && (format.paginateBounds.width === 0)) {\n                        this.currentBounds.x += this.startLocation.x;\n                    }\n                    if (this.currentBounds.x === PdfBorders.default.left.width / 2) {\n                        this.currentBounds.y += this.startLocation.x;\n                    }\n                    if (this.Grid.repeatHeader) {\n                        for (var i_5 = 0; i_5 < this.Grid.headers.count; i_5++) {\n                            var header = this.Grid.headers.getHeader(i_5);\n                            this.drawRow(header);\n                        }\n                    }\n                    this.drawRow(row);\n                    if (this.currentPage !== null && !layoutedPages.containsKey(this.currentPage)) {\n                        layoutedPages.add(this.currentPage, range);\n                    }\n                }\n                if (row.NestedGridLayoutResult != null) {\n                    // Position for next row in the grid.\n                    this.currentPage = row.NestedGridLayoutResult.page;\n                    this.currentGraphics = this.currentPage.graphics; //If not, next row will not be drawn in the layouted page.\n                    this.startLocation = new PointF(row.NestedGridLayoutResult.bounds.x, row.NestedGridLayoutResult.bounds.y);\n                    var recalHeight = this.ReCalculateHeight(row, row.NestedGridLayoutResult.bounds.height);\n                    this.currentBounds.y = recalHeight;\n                    //this.currentBounds.y = row.NestedGridLayoutResult.bounds.height;\n                    if (startPage != this.currentPage) {\n                        var secion = this.currentPage.section;\n                        var startIndex = secion.indexOf(startPage) + 1;\n                        var endIndex = secion.indexOf(this.currentPage);\n                        for (var page = startIndex; page < endIndex + 1; page++) {\n                            var pageGraphics = this.currentPage.graphics;\n                            var location_2 = new PointF(format.paginateBounds.x, format.paginateBounds.y);\n                            var height = page == endIndex ? (row.NestedGridLayoutResult.bounds.height - param.bounds.y) :\n                                (this.currentBounds.height - location_2.y);\n                            if (height <= pageGraphics.clientSize.height)\n                                height += param.bounds.y;\n                            // if (row.grid.isChildGrid && row.grid.ParentCell != null)\n                            //     location.x += param.bounds.x;\n                            location_2.y = format == null ? 0.5 : format.paginateBounds.y;\n                            // Draw border for last paginated row containing nested grid.\n                            for (var c = 0; c < row.cells.count; c++) {\n                                var cell = row.cells.getCell(c);\n                                var cellWidth = 0;\n                                var totalwidth = 0;\n                                if (cell.value instanceof PdfGrid) {\n                                    for (var i_6 = 0; i_6 < cell.value.columns.count; i_6++) {\n                                        totalwidth += cell.value.columns.getColumn(i_6).columnWidth;\n                                    }\n                                }\n                                else {\n                                    totalwidth = cell.width;\n                                }\n                                // if (cell.columnSpan > 1)\n                                // {\n                                //     for (; c < cell.columnSpan; c++)\n                                //         cellWidth += row.grid.columns.getColumn(c).width;\n                                // }\n                                // else\n                                cellWidth = Math.max(totalwidth, row.grid.columns.getColumn(c).width);\n                                cell.drawCellBorders(pageGraphics, new RectangleF(location_2, new SizeF(cellWidth, height)));\n                                location_2.x += cellWidth;\n                                c += (cell.columnSpan - 1);\n                            }\n                        }\n                        // So, nested grid drawing is completed for the current row. Update page.\n                        // Otherwise, the next nested grid of the parent will draw borders from start.\n                        startPage = this.currentPage;\n                    }\n                }\n            }\n            var isPdfGrid = false;\n            var maximumCellBoundsWidth = 0;\n            if (cellBounds.length > 0) {\n                maximumCellBoundsWidth = cellBounds[0];\n            }\n            var largeNavigatePage = [[1, 2]];\n            for (var c = 0; c < this.Grid.rows.count; c++) {\n                if (this.cellEndIndex != -1 && this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value instanceof PdfGrid) {\n                    var grid = this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value;\n                    this.rowLayoutBoundsWidth = grid.rowLayoutBoundsWidth;\n                    isPdfGrid = true;\n                    // if (largeNavigatePage[0][0] < grid.listOfNavigatePages.length)\n                    // {\n                    //     largeNavigatePage[0][0] = grid.listOfNavigatePages.length;\n                    //     largeNavigatePage[0][1] = cellBounds[c];\n                    // }\n                    // else if ((largeNavigatePage[0][0] == grid.listOfNavigatePages.length) && (largeNavigatePage[0][1] < cellBounds[c]))\n                    // {\n                    //     largeNavigatePage[0][1] = cellBounds[c];\n                    // }\n                }\n            }\n            if (!isPdfGrid && cellBounds.length > 0) {\n                for (var c = 0; c < i - 1; c++) {\n                    if (maximumCellBoundsWidth < cellBounds[c]) {\n                        maximumCellBoundsWidth = cellBounds[c];\n                    }\n                }\n                this.rowLayoutBoundsWidth = maximumCellBoundsWidth;\n            }\n            else {\n                this.rowLayoutBoundsWidth = largeNavigatePage[0][1];\n            }\n            if (this.columnRanges.indexOf(range) < this.columnRanges.length - 1\n                && startPage != null && format.layout != PdfLayoutType.OnePage) {\n                isParentCell = this.Grid.isChildGrid;\n                if (largeNavigatePage[0][0] != 0) {\n                    var section = this.currentPage.section;\n                    var pageIndex = section.indexOf(this.currentPage);\n                    this.currentGraphics = this.currentPage.graphics;\n                    this.currentBounds = new RectangleF(new PointF(0, 0), this.currentPage.getClientSize());\n                    var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n                }\n                else {\n                    this.currentPage = this.getNextPageformat(format);\n                }\n                // let locationGrid : PointF= new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2);\n                // if (format.paginateBounds == new RectangleF(0,0,0,0) && this.startLocation == locationGrid)\n                // {\n                //     this.currentBounds.x += this.startLocation.x;\n                //     this.currentBounds.y += this.startLocation.y;\n                // }\n            }\n            if (this.columnRanges.length - 1 !== index && this.columnRanges.length > 1 && format.layout !== PdfLayoutType.OnePage) {\n                this.currentPage = this.getNextPageformat(format);\n                if ((format.paginateBounds.x === format.paginateBounds.y) && (format.paginateBounds.y === format.paginateBounds.height)\n                    && (format.paginateBounds.height === format.paginateBounds.width) && (format.paginateBounds.width === 0)) {\n                    this.currentBounds.x += this.startLocation.x;\n                    this.currentBounds.y += this.startLocation.y;\n                    //this.currentBounds.height = this.pageBounds.height;\n                }\n            }\n        }\n        result = this.getLayoutResult();\n        if (this.Grid.style.allowHorizontalOverflow && this.Grid.style.horizontalOverflowType == PdfHorizontalOverflowType.NextPage) {\n            this.reArrangePages(layoutedPages);\n        }\n        this.raisePageLayouted(result);\n        return result;\n    };\n    /* tslint:enable */\n    /**\n     * Gets the `next page`.\n     * @private\n     */\n    PdfGridLayouter.prototype.getNextPageformat = function (format) {\n        var section = this.currentPage.section;\n        var nextPage = null;\n        var index = section.indexOf(this.currentPage);\n        this.flag = false;\n        if (index === section.count - 1) {\n            nextPage = section.add();\n        }\n        else {\n            nextPage = section.getPages()[index + 1];\n        }\n        this.currentGraphics = nextPage.graphics;\n        var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n        if (!(this.listOfNavigatePages.indexOf(pageindex) !== -1)) {\n            this.listOfNavigatePages.push(pageindex);\n        }\n        this.currentBounds = new RectangleF(new PointF(0, 0), nextPage.getClientSize());\n        // if ((format.paginateBounds.x !== format.paginateBounds.y) && (format.paginateBounds.y !== format.paginateBounds.height)\n        //     && (format.paginateBounds.height !== format.paginateBounds.width) && (format.paginateBounds.width !== 0)) {\n        //     this.currentBounds.x = format.paginateBounds.x;\n        //     this.currentBounds.y = format.paginateBounds.y;\n        //     this.currentBounds.height = format.paginateBounds.height;\n        // }\n        return nextPage;\n    };\n    PdfGridLayouter.prototype.CheckIfDefaultFormat = function (format) {\n        var defaultFormat = new PdfStringFormat();\n        return (format.alignment === defaultFormat.alignment && format.characterSpacing === defaultFormat.characterSpacing &&\n            format.clipPath === defaultFormat.clipPath && format.firstLineIndent === defaultFormat.firstLineIndent &&\n            format.horizontalScalingFactor === defaultFormat.horizontalScalingFactor &&\n            format.lineAlignment === defaultFormat.lineAlignment\n            && format.lineLimit === defaultFormat.lineLimit && format.lineSpacing === defaultFormat.lineSpacing &&\n            format.measureTrailingSpaces === defaultFormat.measureTrailingSpaces && format.noClip === defaultFormat.noClip &&\n            format.paragraphIndent === defaultFormat.paragraphIndent && format.rightToLeft === defaultFormat.rightToLeft &&\n            format.subSuperScript === defaultFormat.subSuperScript && format.wordSpacing === defaultFormat.wordSpacing &&\n            format.wordWrap === defaultFormat.wordWrap);\n    };\n    /**\n     * `Raises BeforeCellDraw event`.\n     * @private\n     */\n    PdfGridLayouter.prototype.RaiseBeforeCellDraw = function (graphics, rowIndex, cellIndex, bounds, value, style) {\n        var args = null;\n        if (this.Grid.raiseBeginCellDraw) {\n            args = new PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style);\n            this.Grid.onBeginCellDraw(args);\n            style = args.style;\n        }\n        return style;\n    };\n    /**\n     * `Raises AfterCellDraw event`.\n     * @private\n     */\n    PdfGridLayouter.prototype.raiseAfterCellDraw = function (graphics, rowIndex, cellIndex, bounds, value, cellstyle) {\n        var args = null;\n        if (this.Grid.raiseEndCellDraw) {\n            args = new PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, cellstyle);\n            this.Grid.onEndCellDraw(args);\n        }\n    };\n    PdfGridLayouter.prototype.reArrangePages = function (layoutedPages) {\n        var document = this.currentPage.document;\n        var pages = [];\n        var keys = layoutedPages.keys();\n        var values = layoutedPages.values();\n        for (var i = 0; i < keys.length; i++) {\n            var page = keys[i];\n            page.section = null;\n            pages.push(page);\n            document.pages.remove(page);\n        }\n        /* tslint:disable */\n        for (var i = 0; i < layoutedPages.size(); i++) {\n            var count = 0;\n            for (var j = i, count_1 = (layoutedPages.size() / this.columnRanges.length); j < layoutedPages.size(); j += count_1) {\n                var page = pages[j];\n                if (document.pages.indexOf(page) === -1) {\n                    document.pages.add(page);\n                }\n            }\n        }\n        /* tslint:enable */\n    };\n    /**\n     * Gets the `layout result`.\n     * @private\n     */\n    PdfGridLayouter.prototype.getLayoutResult = function () {\n        if (this.Grid.isChildGrid && this.Grid.allowRowBreakAcrossPages) {\n            for (var i = 0; i < this.Grid.rows.count; i++) {\n                var row = this.Grid.rows.getRow(i);\n                if (row.rowBreakHeight > 0 && row.repeatFlag) {\n                    this.startLocation.y = this.currentPage.origin.y;\n                }\n            }\n        }\n        var bounds;\n        if (!this.isChanged) {\n            bounds = new RectangleF(this.startLocation, new SizeF(this.currentBounds.width, this.currentBounds.y -\n                this.startLocation.y));\n        }\n        // else {\n        //     bounds = new RectangleF(this.currentLocation, new SizeF(this.currentBounds.width, this.currentBounds.y -\n        //                              this.currentLocation.y));\n        // }\n        /* tslint:enable */\n        return new PdfGridLayoutResult(this.currentPage, bounds);\n    };\n    /**\n     * `Recalculate row height` for the split cell to be drawn.\n     * @private\n     */\n    PdfGridLayouter.prototype.ReCalculateHeight = function (row, height) {\n        var newHeight = 0.0;\n        for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n            if (!(row.cells.getCell(i).remainingString === null || row.cells.getCell(i).remainingString === '' ||\n                typeof row.cells.getCell(i).remainingString === 'undefined')) {\n                newHeight = Math.max(newHeight, row.cells.getCell(i).measureHeight());\n            }\n        }\n        return Math.max(height, newHeight);\n    };\n    /**\n     * `Raises BeforePageLayout event`.\n     * @private\n     */\n    PdfGridLayouter.prototype.raiseBeforePageLayout = function (currentPage, currentBounds, currentRow) {\n        var cancel = false;\n        if (this.Grid.raiseBeginPageLayout) {\n            var args = new PdfGridBeginPageLayoutEventArgs(currentBounds, currentPage, currentRow);\n            this.Grid.onBeginPageLayout(args);\n            // if (currentBounds !== args.Bounds) {\n            //     this.isChanged = true;\n            //     this.currentLocation = new PointF(args.Bounds.x, args.Bounds.y);\n            //     this.measureColumnsWidth(new RectangleF(new PointF(args.Bounds.x, args.Bounds.y) ,\n            //                                                  new SizeF(args.Bounds.width + args.Bounds.x ,\n            //                                                                 args.Bounds.height)));\n            // }\n            cancel = args.cancel;\n            currentBounds = args.bounds;\n            currentRow = args.startRowIndex;\n        }\n        return { returnValue: cancel, currentBounds: currentBounds, currentRowIndex: currentRow };\n    };\n    /**\n     * `Raises PageLayout event` if needed.\n     * @private\n     */\n    PdfGridLayouter.prototype.raisePageLayouted = function (result) {\n        var args = new PdfGridEndPageLayoutEventArgs(result);\n        if (this.Grid.raiseEndPageLayout) {\n            this.Grid.onEndPageLayout(args);\n        }\n        return args;\n    };\n    PdfGridLayouter.prototype.drawRow = function (row, result, height) {\n        if (typeof result === 'undefined') {\n            //.. Check if required space available.\n            //.....If the row conains spans which  falls through more than one page, then draw the row to next page.                        \n            var result_1 = new RowLayoutResult();\n            var rowHeightWithSpan = 0;\n            var location_3 = new PointF(0, 0);\n            var size = new SizeF(0, 0);\n            var isHeader = false;\n            if (row.rowSpanExists) {\n                var maxSpan = 0;\n                var currRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n                if (currRowIndex === -1) {\n                    currRowIndex = this.Grid.headers.indexOf(row);\n                    if (currRowIndex !== -1) {\n                        isHeader = true;\n                    }\n                }\n                for (var i = 0; i < row.cells.count; i++) {\n                    var cell = row.cells.getCell(i);\n                    maxSpan = Math.max(maxSpan, cell.rowSpan);\n                }\n                for (var i = currRowIndex; i < currRowIndex + maxSpan; i++) {\n                    rowHeightWithSpan += (isHeader ? this.Grid.headers.getHeader(i).height : this.Grid.rows.getRow(i).height);\n                }\n                // let rowMaxHeight : number = rowHeightWithSpan;\n                // for (let i : number = 0; i < row.cells.count; i++ ) {\n                //     rowMaxHeight = rowMaxHeight > row.cells.getCell(i).height ? rowMaxHeight : row.cells.getCell(i).height;\n                // }\n                // let flag : boolean = true;\n                // let nextRow : PdfGridRow = this.Grid.headers.getHeader(this.Grid.headers.indexOf(row) + 1);\n                // for (let i : number = 0; i < nextRow.cells.count; i++ ) {\n                //     if (nextRow.cells.getCell(i).value !== '' && nextRow.cells.getCell(i).value !== undefined) {\n                //         flag = false;\n                //         break;\n                //     }\n                // }\n                // if ((rowMaxHeight > rowHeightWithSpan) && flag) {\n                //     row.height += (rowMaxHeight - rowHeightWithSpan);\n                // }                \n            }\n            var calculatedHeight = row.rowBreakHeight > 0.0 ? row.rowBreakHeight : row.height;\n            if (this.Grid.isChildGrid && this.Grid.ParentCell != null) {\n                //Split row only if row height exceeds page height and AllowRowBreakAcrossPages is true.\n                // if (calculatedHeight + this.Grid.ParentCell.row.grid.style.cellPadding.bottom +\n                //             this.Grid.ParentCell.row.grid.style.cellPadding.top > this.currentPageBounds.height) {\n                //     if (this.Grid.allowRowBreakAcrossPages) {\n                //         result.isFinish = true;\n                //         if ( this.Grid.isChildGrid && row.rowBreakHeight > 0 ) {\n                //             if (this.Grid.ParentCell.row.grid.style.cellPadding !== null) {\n                //                 this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n                //             }\n                //             this.currentBounds.x = this.startLocation.x;\n                //         }\n                //         result.bounds = this.currentBounds ;\n                //         this.drawRowWithBreak(result, row, calculatedHeight);\n                //     } else {\n                //         //If AllowRowBreakAcrossPages is not true, draw the row till it fits the page.                       \n                //         if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n                //             this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n                //             calculatedHeight = this.currentBounds.height - this.currentBounds.y -\n                //                     this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n                //         }\n                //         result.isFinish = false;\n                //         this.drawRow( row, result, calculatedHeight);\n                //     }\n                // } else\n                if (this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + calculatedHeight >\n                    this.currentPageBounds.height || this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom\n                    + calculatedHeight > this.currentBounds.height || this.currentBounds.y +\n                    this.Grid.ParentCell.row.grid.style.cellPadding.bottom + rowHeightWithSpan > this.currentPageBounds.height) {\n                    //If a row is repeated and still cannot fit in page, proceed draw.\n                    if (this.Grid.ParentCell.row.grid.LayoutFormat.break === PdfLayoutBreakType.FitPage) {\n                        PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n                        this.Grid.splitChildRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n                    }\n                    if (PdfGridLayouter.repeatRowIndex > -1 && PdfGridLayouter.repeatRowIndex === row.rowIndex) {\n                        if (this.Grid.allowRowBreakAcrossPages) {\n                            result_1.isFinish = true;\n                            // if (this.Grid.isChildGrid && row.rowBreakHeightValue > 0) {\n                            //     // if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n                            //     //     this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n                            //     // }\n                            //     this.currentBounds.x = this.startLocation.x;\n                            // }\n                            result_1.bounds = this.currentBounds;\n                            this.drawRowWithBreak(result_1, row, calculatedHeight);\n                            row.repeatFlag = true;\n                            row.repeatRowNumber = PdfGridLayouter.repeatRowIndex;\n                        }\n                        // else {\n                        //     result.isFinish = false;\n                        //     row.repeatFlag = false;\n                        //     this.drawRow( row, result, calculatedHeight);\n                        // }\n                    }\n                    // else {\n                    //     result.isFinish = false;\n                    // }\n                }\n                else {\n                    result_1.isFinish = true;\n                    if (row.grid.ParentCell.row.rowBreakHeightValue > 0) {\n                        row.repeatFlag = true;\n                    }\n                    else {\n                        row.repeatFlag = false;\n                        calculatedHeight = row.height;\n                    }\n                    if (this.Grid.isChildGrid && row.rowBreakHeight > 0) {\n                        if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n                            calculatedHeight += this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n                        }\n                    }\n                    this.drawRow(row, result_1, calculatedHeight);\n                }\n            }\n            else {\n                //Split row only if row height exceeds page height and AllowRowBreakAcrossPages is true.\n                if (calculatedHeight > this.currentPageBounds.height) {\n                    if (this.Grid.allowRowBreakAcrossPages) {\n                        result_1.isFinish = true;\n                        //result.bounds = this.currentBounds;\n                        this.drawRowWithBreak(result_1, row, calculatedHeight);\n                        row.isrowFinish = true;\n                        row.repeatFlag = true;\n                        if (row.grid.splitChildRowIndex !== -1) {\n                            result_1.isFinish = false;\n                        }\n                    }\n                    // else {\n                    //     //If AllowRowBreakAcrossPages is not true, draw the row till it fits the page.\n                    //     result.isFinish = false;\n                    //     this.drawRow( row, result, calculatedHeight);\n                    // }\n                }\n                else if (this.currentBounds.y + calculatedHeight > this.currentPageBounds.height ||\n                    this.currentBounds.y + calculatedHeight > (this.currentBounds.height + this.startLocation.y) ||\n                    this.currentBounds.y + rowHeightWithSpan > this.currentPageBounds.height) {\n                    // If a row is repeated and still cannot fit in page, proceed draw.\n                    if (this.Grid.LayoutFormat.break === PdfLayoutBreakType.FitPage) {\n                        PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n                    }\n                    if (PdfGridLayouter.repeatRowIndex > -1 && PdfGridLayouter.repeatRowIndex === row.rowIndex) {\n                        if (this.Grid.allowRowBreakAcrossPages) {\n                            result_1.isFinish = true;\n                            this.drawRowWithBreak(result_1, row, calculatedHeight);\n                            row.repeatFlag = true;\n                            row.repeatRowNumber = PdfGridLayouter.repeatRowIndex;\n                            if (row.grid.splitChildRowIndex !== -1) {\n                                result_1.isFinish = false;\n                            }\n                        }\n                        // else {\n                        //     result.isFinish = false;\n                        //     this.drawRow(row, result, calculatedHeight);\n                        // }\n                    }\n                    else {\n                        result_1.isFinish = false;\n                    }\n                }\n                else {\n                    result_1.isFinish = true;\n                    this.drawRow(row, result_1, calculatedHeight);\n                    row.repeatFlag = false;\n                }\n            }\n            return result_1;\n        }\n        else {\n            var skipcell = false;\n            var location_4 = new PointF(this.currentBounds.x, this.currentBounds.y);\n            // if (row.grid.isChildGrid && row.grid.allowRowBreakAcrossPages && this.startLocation.x !== this.currentBounds.x && row.width <\n            //                 this.currentPage.getClientSize().width) {\n            //     location.x = this.startLocation.x;\n            // }\n            result.bounds = new RectangleF(location_4, new SizeF(0, 0));\n            height = this.ReCalculateHeight(row, height);\n            for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n                var cancelSpans = ((i > this.cellEndIndex + 1) && (row.cells.getCell(i).columnSpan > 1));\n                // let cancelSpans : boolean = false;\n                if (!cancelSpans) {\n                    for (var j = 1; j < row.cells.getCell(i).columnSpan; j++) {\n                        row.cells.getCell(i + j).isCellMergeContinue = true;\n                    }\n                }\n                var size = new SizeF(this.Grid.columns.getColumn(i).width, height);\n                // if (size.width > this.currentGraphics.clientSize.width) {\n                //     size.width = this.currentGraphics.clientSize.width;\n                // }\n                // if (this.Grid.isChildGrid && this.Grid.style.allowHorizontalOverflow) {\n                //     if (size.width >= this.currentGraphics.clientSize.width) {\n                //         size.width -= 2 * this.currentBounds.x;\n                //     }\n                // }\n                /* tslint:disable */\n                if (!this.CheckIfDefaultFormat(this.Grid.columns.getColumn(i).format) &&\n                    this.CheckIfDefaultFormat(row.cells.getCell(i).stringFormat)) {\n                    row.cells.getCell(i).stringFormat = this.Grid.columns.getColumn(i).format;\n                }\n                var cellstyle = row.cells.getCell(i).style;\n                var tempValue = ((typeof row.cells.getCell(i).value === 'string' &&\n                    row.cells.getCell(i).value !== null) ? row.cells.getCell(i).value : '');\n                row.cells.getCell(i).style = this.RaiseBeforeCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, cellstyle);\n                //row.cells.getCell(i).style = cellstyle;\n                if (!skipcell) {\n                    if (row.cells.getCell(i).value instanceof PdfGrid) {\n                        var grid = row.cells.getCell(i).value;\n                        grid.parentCellIndex = i;\n                    }\n                    var stringResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location_4, size), cancelSpans);\n                    if (row.grid.style.allowHorizontalOverflow && (row.cells.getCell(i).columnSpan > this.cellEndIndex ||\n                        i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1) && this.cellEndIndex < row.cells.count - 1) {\n                        row.rowOverflowIndex = this.cellEndIndex;\n                    }\n                    if (row.grid.style.allowHorizontalOverflow && (row.rowOverflowIndex > 0 && (row.cells.getCell(i).columnSpan >\n                        this.cellEndIndex || i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1)) &&\n                        row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1 > 0) {\n                        row.cells.getCell(row.rowOverflowIndex + 1).value = stringResult !== null ? (stringResult.remainder !== undefined) ?\n                            stringResult.remainder : '' : '';\n                        row.cells.getCell(row.rowOverflowIndex + 1).stringFormat = row.cells.getCell(i).stringFormat;\n                        row.cells.getCell(row.rowOverflowIndex + 1).style = row.cells.getCell(i).style;\n                        row.cells.getCell(row.rowOverflowIndex + 1).columnSpan = row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1;\n                    }\n                }\n                /* tslint:enable */\n                tempValue = ((typeof row.cells.getCell(i).value === 'string' &&\n                    row.cells.getCell(i).value !== null) ? row.cells.getCell(i).value : '');\n                if (!cancelSpans) {\n                    this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, row.cells.getCell(i).style);\n                }\n                if (row.cells.getCell(i).value instanceof PdfGrid) {\n                    var grid = row.cells.getCell(i).value;\n                    if (this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width) {\n                        location_4.x = grid.rowLayoutBoundsWidth;\n                        location_4.x += grid.style.cellSpacing;\n                    }\n                    else {\n                        location_4.x += this.Grid.columns.getColumn(i).width;\n                    }\n                }\n                else {\n                    location_4.x += this.Grid.columns.getColumn(i).width;\n                }\n            }\n            if (!row.rowMergeComplete || row.isRowHeightSet) {\n                this.currentBounds.y += height;\n            }\n            result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location_4.x, location_4.y));\n        }\n    };\n    PdfGridLayouter.prototype.drawRowWithBreak = function (result, row, calculateHeight) {\n        var location = new PointF(this.currentBounds.x, this.currentBounds.y);\n        if (row.grid.isChildGrid && row.grid.allowRowBreakAcrossPages && this.startLocation.x !== this.currentBounds.x) {\n            location.x = this.startLocation.x;\n        }\n        result.bounds = new RectangleF(location, new SizeF(0, 0));\n        this.gridHeight = row.rowBreakHeight > 0 ? this.currentPageBounds.height : 0;\n        // Calculate the remaining height.\n        if (row.grid.style.cellPadding.top + this.currentBounds.y + row.grid.style.cellPadding.bottom < this.currentPageBounds.height) {\n            row.rowBreakHeight = this.currentBounds.y + calculateHeight - this.currentPageBounds.height;\n        }\n        // else {\n        //     row.rowBreakHeight = calculateHeight;\n        //     result.isFinish = false;\n        //     return;\n        // }\n        // No need to explicit break if the row height is equal to grid height.\n        for (var i = 0; i < row.cells.count; i++) {\n            var cell = row.cells.getCell(i);\n            var cellHeight = cell.measureHeight();\n            if (cellHeight === calculateHeight && cell.value instanceof PdfGrid) {\n                row.rowBreakHeight = 0;\n            }\n            // else if (cellHeight === calculateHeight && (cell.value as PdfGrid) === null) {\n            //     row.rowBreakHeight = this.currentBounds.y + calculateHeight - this.currentPageBounds.height;\n            // }\n        }\n        for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n            var cancelSpans = ((row.cells.getCell(i).columnSpan + i > this.cellEndIndex + 1) &&\n                (row.cells.getCell(i).columnSpan > 1));\n            // if (!cancelSpans) {\n            //     for (let k : number = 1; k < row.cells.getCell(i).columnSpan; k++) {\n            //         row.cells.getCell(i + k).isCellMergeContinue = true;\n            //     }\n            //}\n            var size = new SizeF(this.Grid.columns.getColumn(i).width, this.gridHeight > 0.0 ? this.gridHeight :\n                this.currentPageBounds.height);\n            // if (size.width === 0) {\n            //     size = new SizeF(row.cells.getCell(i).width, size.height);\n            // }\n            // if (!this.CheckIfDefaultFormat(this.Grid.columns.getColumn(i).format) &&\n            //         this.CheckIfDefaultFormat((row.cells.getCell(i).stringFormat))) {\n            //     row.cells.getCell(i).stringFormat = this.Grid.columns.getColumn(i).format;\n            // }\n            var cellstyle1 = row.cells.getCell(i).style;\n            row.cells.getCell(i).style = cellstyle1;\n            var skipcell = false;\n            var stringResult = null;\n            if (!skipcell) {\n                stringResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location, size), cancelSpans);\n            }\n            //If still row is to be drawn, set cell finished drawing cell as false and update the text to be drawn.\n            if (row.rowBreakHeight > 0.0) {\n                if (stringResult != null) {\n                    row.cells.getCell(i).FinishedDrawingCell = false;\n                    row.cells.getCell(i).remainingString = stringResult.remainder == null ? ' ' : stringResult.remainder;\n                    if (row.grid.isChildGrid) {\n                        row.rowBreakHeight = calculateHeight - stringResult.actualSize.height;\n                    }\n                }\n            }\n            result.isFinish = (!result.isFinish) ? result.isFinish : row.cells.getCell(i).FinishedDrawingCell;\n            // let tempValue : string = ((typeof row.cells.getCell(i).value === 'string' &&\n            //row.cells.getCell(i).value !== null) ? row.cells.getCell(i).value : '') as string;\n            // if (!cancelSpans) {\n            //     // this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i,\n            //     //           new RectangleF(location, size), tempValue, row.cells.getCell(i).style);            \n            //     this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location, size),\n            //                             (row.cells.getCell(i).value as string) ? row.cells.getCell(i).value.toString() : ' ',\n            //                             row.cells.getCell(i).style);\n            //     }                \n            if (row.cells.getCell(i).value instanceof PdfGrid) {\n                var grid = row.cells.getCell(i).value;\n                this.rowBreakPageHeightCellIndex = i;\n                // row.cells.getCell(i).pageCount = grid.listOfNavigatePages.length;\n                // for (let j : number = 0;j<grid.listOfNavigatePages.length;j++){\n                //     let pageIndex : number =grid.listOfNavigatePages.indexOf(j);\n                //             this.Grid.listOfNavigatePages.push(pageIndex);\n                //     }\n                if (this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width) {\n                    location.x = this.rowLayoutBoundsWidth;\n                    location.x += grid.style.cellSpacing;\n                }\n                else {\n                    location.x += this.Grid.columns.getColumn(i).width;\n                }\n            }\n            else {\n                location.x += this.Grid.columns.getColumn(i).width;\n            }\n        }\n        this.currentBounds.y += this.gridHeight > 0.0 ? this.gridHeight : calculateHeight;\n        result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location.x, location.y));\n    };\n    /**\n     * @hidden\n     * @private\n     */\n    PdfGridLayouter.repeatRowIndex = -1;\n    return PdfGridLayouter;\n}(ElementLayouter));\nexport { PdfGridLayouter };\n// recalculateBounds : boolean, clientSize : SizeF\n//Implementation\n/**\n * `Initializes` internal data.\n * @private\n */\n//Internal declaration\nvar PdfGridLayoutResult = /** @class */ (function (_super) {\n    __extends(PdfGridLayoutResult, _super);\n    /**\n     * Constructor\n     * @private\n     */\n    function PdfGridLayoutResult(page, bounds) {\n        return _super.call(this, page, bounds) || this;\n    }\n    return PdfGridLayoutResult;\n}(PdfLayoutResult));\nexport { PdfGridLayoutResult };\n/**\n * `PdfGridLayoutFormat` class represents a flexible grid that consists of columns and rows.\n */\nvar PdfGridLayoutFormat = /** @class */ (function (_super) {\n    __extends(PdfGridLayoutFormat, _super);\n    /**\n     * Initializes a new instance of the `PdfGridLayoutFormat` class.\n     * @private\n     */\n    function PdfGridLayoutFormat(baseFormat) {\n        return _super.call(this, baseFormat) || this;\n    }\n    return PdfGridLayoutFormat;\n}(PdfLayoutFormat));\nexport { PdfGridLayoutFormat };\nvar GridCellEventArgs = /** @class */ (function () {\n    // Constructors\n    /**\n     * Initialize a new instance for `GridCellEventArgs` class.\n     * @private\n     */\n    function GridCellEventArgs(graphics, rowIndex, cellIndex, bounds, value) {\n        this.gridRowIndex = rowIndex;\n        this.gridCellIndex = cellIndex;\n        this.internalValue = value;\n        this.gridBounds = bounds;\n        this.pdfGraphics = graphics;\n    }\n    Object.defineProperty(GridCellEventArgs.prototype, \"rowIndex\", {\n        // Properties\n        /**\n         * Gets the value of current `row index`.\n         * @private\n         */\n        get: function () {\n            return this.gridRowIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridCellEventArgs.prototype, \"cellIndex\", {\n        /**\n         * Gets the value of current `cell index`.\n         * @private\n         */\n        get: function () {\n            return this.gridCellIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridCellEventArgs.prototype, \"value\", {\n        /**\n         * Gets the actual `value` of current cell.\n         * @private\n         */\n        get: function () {\n            return this.internalValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridCellEventArgs.prototype, \"bounds\", {\n        /**\n         * Gets the `bounds` of current cell.\n         * @private\n         */\n        get: function () {\n            return this.gridBounds;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridCellEventArgs.prototype, \"graphics\", {\n        /**\n         * Gets the instance of `current graphics`.\n         * @private\n         */\n        get: function () {\n            return this.pdfGraphics;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return GridCellEventArgs;\n}());\nexport { GridCellEventArgs };\nvar PdfGridBeginCellDrawEventArgs = /** @class */ (function (_super) {\n    __extends(PdfGridBeginCellDrawEventArgs, _super);\n    // Constructors\n    /**\n     * Initializes a new instance of the `StartCellLayoutEventArgs` class.\n     * @private\n     */\n    function PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style) {\n        var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;\n        _this.style = style;\n        return _this;\n    }\n    Object.defineProperty(PdfGridBeginCellDrawEventArgs.prototype, \"skip\", {\n        // Properties\n        /**\n         * Gets or sets a value indicating whether the value of this cell should be `skipped`.\n         * @private\n         */\n        get: function () {\n            return this.bSkip;\n        },\n        set: function (value) {\n            this.bSkip = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridBeginCellDrawEventArgs.prototype, \"style\", {\n        /**\n         * Gets or sets a `style` value of the cell.\n         * @private\n         */\n        get: function () {\n            return this.cellStyle;\n        },\n        set: function (value) {\n            this.cellStyle = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridBeginCellDrawEventArgs;\n}(GridCellEventArgs));\nexport { PdfGridBeginCellDrawEventArgs };\nvar PdfGridEndCellDrawEventArgs = /** @class */ (function (_super) {\n    __extends(PdfGridEndCellDrawEventArgs, _super);\n    // Constructors\n    /**\n     * Initializes a new instance of the `PdfGridEndCellLayoutEventArgs` class.\n     * @private\n     */\n    function PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style) {\n        var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;\n        _this.cellStyle = style;\n        return _this;\n    }\n    Object.defineProperty(PdfGridEndCellDrawEventArgs.prototype, \"style\", {\n        // Propertise\n        /**\n         * Get the `PdfGridCellStyle`.\n         * @private\n         */\n        get: function () {\n            return this.cellStyle;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridEndCellDrawEventArgs;\n}(GridCellEventArgs));\nexport { PdfGridEndCellDrawEventArgs };\nvar PdfCancelEventArgs = /** @class */ (function () {\n    function PdfCancelEventArgs() {\n    }\n    Object.defineProperty(PdfCancelEventArgs.prototype, \"cancel\", {\n        // Properties\n        /**\n         * Gets and Sets the value of `cancel`.\n         * @private\n         */\n        get: function () {\n            return this.isCancel;\n        },\n        set: function (value) {\n            this.isCancel = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfCancelEventArgs;\n}());\nexport { PdfCancelEventArgs };\nvar BeginPageLayoutEventArgs = /** @class */ (function (_super) {\n    __extends(BeginPageLayoutEventArgs, _super);\n    // Constructors\n    /**\n     * Initializes a new instance of the `BeginPageLayoutEventArgs` class with the specified rectangle and page.\n     * @private\n     */\n    function BeginPageLayoutEventArgs(bounds, page) {\n        var _this = _super.call(this) || this;\n        _this.bounds = bounds;\n        _this.pdfPage = page;\n        return _this;\n    }\n    Object.defineProperty(BeginPageLayoutEventArgs.prototype, \"bounds\", {\n        // Properties\n        /**\n         * Gets or sets value that indicates the lay outing `bounds` on the page.\n         * @private\n         */\n        get: function () {\n            return this.cellBounds;\n        },\n        set: function (value) {\n            this.cellBounds = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BeginPageLayoutEventArgs.prototype, \"page\", {\n        /**\n         * Gets the `page` where the lay outing should start.\n         * @private\n         */\n        get: function () {\n            return this.pdfPage;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return BeginPageLayoutEventArgs;\n}(PdfCancelEventArgs));\nexport { BeginPageLayoutEventArgs };\n/**\n * `EndPageLayoutEventArgs` class is alternate for end page layout events.\n */\nvar EndPageLayoutEventArgs = /** @class */ (function (_super) {\n    __extends(EndPageLayoutEventArgs, _super);\n    // Constructors\n    /**\n     * Initializes a new instance of the `EndPageLayoutEventArgs` class. with the specified 'PdfLayoutResult'.\n     * @private\n     */\n    function EndPageLayoutEventArgs(result) {\n        var _this = _super.call(this) || this;\n        _this.layoutResult = result;\n        return _this;\n    }\n    Object.defineProperty(EndPageLayoutEventArgs.prototype, \"result\", {\n        // Properties\n        /**\n         * Gets the lay outing `result` of the page.\n         * @private\n         */\n        get: function () {\n            return this.layoutResult;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EndPageLayoutEventArgs.prototype, \"nextPage\", {\n        /**\n         * Gets or sets a value indicating the `next page` where the element should be layout.\n         * @private\n         */\n        get: function () {\n            return this.nextPdfPage;\n        },\n        set: function (value) {\n            this.nextPdfPage = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return EndPageLayoutEventArgs;\n}(PdfCancelEventArgs));\nexport { EndPageLayoutEventArgs };\n/**\n * `PdfGridBeginPageLayoutEventArgs` class is alternate for begin page layout events.\n */\nvar PdfGridBeginPageLayoutEventArgs = /** @class */ (function (_super) {\n    __extends(PdfGridBeginPageLayoutEventArgs, _super);\n    // Constructors\n    /**\n     * Initialize a new instance of `PdfGridBeginPageLayoutEventArgs` class.\n     * @private\n     */\n    function PdfGridBeginPageLayoutEventArgs(bounds, page, startRow) {\n        var _this = _super.call(this, bounds, page) || this;\n        _this.startRow = startRow;\n        return _this;\n    }\n    Object.defineProperty(PdfGridBeginPageLayoutEventArgs.prototype, \"startRowIndex\", {\n        // Properties\n        /**\n         * Gets the `start row index`.\n         * @private\n         */\n        get: function () {\n            return this.startRow;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridBeginPageLayoutEventArgs;\n}(BeginPageLayoutEventArgs));\nexport { PdfGridBeginPageLayoutEventArgs };\n/**\n * `PdfGridEndPageLayoutEventArgs` class is alternate for begin page layout events.\n */\nvar PdfGridEndPageLayoutEventArgs = /** @class */ (function (_super) {\n    __extends(PdfGridEndPageLayoutEventArgs, _super);\n    // Constructors\n    /**\n     * Initialize a new instance of `PdfGridEndPageLayoutEventArgs` class.\n     * @private\n     */\n    function PdfGridEndPageLayoutEventArgs(result) {\n        return _super.call(this, result) || this;\n    }\n    return PdfGridEndPageLayoutEventArgs;\n}(EndPageLayoutEventArgs));\nexport { PdfGridEndPageLayoutEventArgs };\nvar RowLayoutResult = /** @class */ (function () {\n    //Constructors\n    /**\n     * Initializes a new instance of the `RowLayoutResult` class.\n     * @private\n     */\n    function RowLayoutResult() {\n        this.layoutedBounds = new RectangleF(0, 0, 0, 0);\n    }\n    Object.defineProperty(RowLayoutResult.prototype, \"isFinish\", {\n        /**\n         * Gets or sets a value indicating whether this instance `is finish`.\n         * @private\n         */\n        get: function () {\n            return this.bIsFinished;\n        },\n        set: function (value) {\n            this.bIsFinished = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RowLayoutResult.prototype, \"bounds\", {\n        /**\n         * Gets or sets the `bounds`.\n         * @private\n         */\n        get: function () {\n            return this.layoutedBounds;\n        },\n        set: function (value) {\n            this.layoutedBounds = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return RowLayoutResult;\n}());\nexport { RowLayoutResult };\n"],"mappings":"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D,IAAL,CAAUuD,kBAAV,IAAgCZ,GAAG,CAACgB,QAApF,EAA8F;YAC1FL,SAAS,GAAG,KAAKP,OAAL,CAAaJ,GAAb,CAAZ;YACAA,GAAG,CAACa,WAAJ,GAAkB,IAAlB;UACH,CAHD,MAIK,IAAIb,GAAG,CAACa,WAAR,EAAqB;YACtB;UACH,CAFI,MAGA;YACD;UACH;QACJ,CApD0C,CAqD3C;;;QACAvB,UAAU,CAACxC,IAAX,CAAgB6D,SAAS,CAACzD,MAAV,CAAiBZ,KAAjC;QACA;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QAGgB;;QACA,IAAIkE,cAAc,KAAK,KAAKvD,aAAL,CAAmBG,CAA1C,EAA6C;UACzCkD,SAAS,GAAG,IAAZ;UACArG,eAAe,CAACwG,cAAhB,GAAiC,KAAKpD,IAAL,CAAUG,IAAV,CAAeyD,aAAf,CAA6BpE,OAA7B,CAAqCmD,GAArC,CAAjC;QACH,CAHD,MAIK;UACDM,SAAS,GAAG,KAAZ;UACArG,eAAe,CAACwG,cAAhB,GAAiC,CAAC,CAAlC;QACH;;QACD,OAAO,CAACE,SAAS,CAACO,QAAX,IAAuB9B,SAAS,IAAI,IAA3C,EAAiD;UAC7C,IAAI+B,UAAU,GAAG,KAAKC,eAAL,EAAjB;UACA;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;UACoBlC,OAAO,GAAG,KAAKmC,iBAAL,CAAuBF,UAAvB,CAAV;UACA,IAAIjC,OAAO,CAACoC,MAAR,IAAkBhB,SAAtB,EACI,MADJ,KAEK,IAAI,KAAKjD,IAA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"},"metadata":{},"sourceType":"module"}