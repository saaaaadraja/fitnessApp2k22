{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * PdfBitmap.ts class for EJ2-PDF\n */\n\n\nimport { ImageDecoder } from './../../graphics/images/image-decoder';\nimport { ByteArray } from './../../graphics/images/byte-array';\nimport { DictionaryProperties } from './../../input-output/pdf-dictionary-properties';\nimport { PdfImage } from './pdf-image';\n/**\n * The 'PdfBitmap' contains methods and properties to handle the Bitmap images.\n * ```typescript\n * // create a new PDF document.\n * let document : PdfDocument = new PdfDocument();\n * // add a page to the document.\n * let page1 : PdfPage = document.pages.add();\n * // base64 string of an image\n * let imageString : string = '/9j/3+2w7em7HzY/KiijFw … 1OEYRUYrQ45yc5OUtz/9k=';\n * // load the image from the base64 string of original image.\n * let image : PdfBitmap = new PdfBitmap(imageString);\n * // draw the image\n * page1.graphics.drawImage(image, new RectangleF({x : 10, y : 10}, {width : 200, height : 200}));\n * // save the document.\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\n\nvar PdfBitmap =\n/** @class */\nfunction (_super) {\n  __extends(PdfBitmap, _super);\n  /**\n   * Create an instance for `PdfBitmap` class.\n   * @param encodedString Base64 string of an image.\n   * ```typescript\n   * // create a new PDF document.\n   * let document : PdfDocument = new PdfDocument();\n   * // add a page to the document.\n   * let page1 : PdfPage = document.pages.add();\n   * // base64 string of an image\n   * let imageString : string = '/9j/3+2w7em7HzY/KiijFw … 1OEYRUYrQ45yc5OUtz/9k=';\n   * //\n   * // load the image from the base64 string of original image.\n   * let image : PdfBitmap = new PdfBitmap(imageString);\n   * //\n   * // draw the image\n   * page1.graphics.drawImage(image, new RectangleF({x : 10, y : 10}, {width : 200, height : 200}));\n   * // save the document.\n   * document.save('output.pdf');\n   * // destroy the document\n   * document.destroy();\n   * ```\n   */\n\n\n  function PdfBitmap(encodedString) {\n    var _this = _super.call(this) || this; //Fields\n\n    /**\n     * Specifies the `status` of an image.\n     * @default true.\n     * @hidden\n     * @private\n     */\n\n\n    _this.imageStatus = true;\n    /**\n     * Internal variable for accessing fields from `DictionryProperties` class.\n     * @hidden\n     * @private\n     */\n\n    _this.dictionaryProperties = new DictionaryProperties();\n\n    _this.loadImage(encodedString);\n\n    return _this;\n  }\n  /**\n   * `Load image`.\n   * @hidden\n   * @private\n   */\n\n\n  PdfBitmap.prototype.loadImage = function (encodedString) {\n    var task = this.initializeAsync(encodedString);\n  };\n  /**\n   * `Initialize` image parameters.\n   * @private\n   */\n\n\n  PdfBitmap.prototype.initializeAsync = function (encodedString) {\n    var byteArray = new ByteArray(encodedString.length);\n    byteArray.writeFromBase64String(encodedString);\n    this.decoder = new ImageDecoder(byteArray);\n    this.height = this.decoder.height;\n    this.width = this.decoder.width; // FrameCount = BitmapImageDecoder.FrameCount;\n\n    this.bitsPerComponent = this.decoder.bitsPerComponent;\n  };\n  /**\n   * `Saves` the image into stream.\n   * @private\n   */\n\n\n  PdfBitmap.prototype.save = function () {\n    this.imageStatus = true;\n    this.imageStream = this.decoder.getImageDictionary();\n  };\n\n  return PdfBitmap;\n}(PdfImage);\n\nexport { PdfBitmap };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","ImageDecoder","ByteArray","DictionaryProperties","PdfImage","PdfBitmap","_super","encodedString","_this","call","imageStatus","dictionaryProperties","loadImage","task","initializeAsync","byteArray","length","writeFromBase64String","decoder","height","width","bitsPerComponent","save","imageStream","getImageDictionary"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/images/pdf-bitmap.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * PdfBitmap.ts class for EJ2-PDF\n */\nimport { ImageDecoder } from './../../graphics/images/image-decoder';\nimport { ByteArray } from './../../graphics/images/byte-array';\nimport { DictionaryProperties } from './../../input-output/pdf-dictionary-properties';\nimport { PdfImage } from './pdf-image';\n/**\n * The 'PdfBitmap' contains methods and properties to handle the Bitmap images.\n * ```typescript\n * // create a new PDF document.\n * let document : PdfDocument = new PdfDocument();\n * // add a page to the document.\n * let page1 : PdfPage = document.pages.add();\n * // base64 string of an image\n * let imageString : string = '/9j/3+2w7em7HzY/KiijFw … 1OEYRUYrQ45yc5OUtz/9k=';\n * // load the image from the base64 string of original image.\n * let image : PdfBitmap = new PdfBitmap(imageString);\n * // draw the image\n * page1.graphics.drawImage(image, new RectangleF({x : 10, y : 10}, {width : 200, height : 200}));\n * // save the document.\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nvar PdfBitmap = /** @class */ (function (_super) {\n    __extends(PdfBitmap, _super);\n    /**\n     * Create an instance for `PdfBitmap` class.\n     * @param encodedString Base64 string of an image.\n     * ```typescript\n     * // create a new PDF document.\n     * let document : PdfDocument = new PdfDocument();\n     * // add a page to the document.\n     * let page1 : PdfPage = document.pages.add();\n     * // base64 string of an image\n     * let imageString : string = '/9j/3+2w7em7HzY/KiijFw … 1OEYRUYrQ45yc5OUtz/9k=';\n     * //\n     * // load the image from the base64 string of original image.\n     * let image : PdfBitmap = new PdfBitmap(imageString);\n     * //\n     * // draw the image\n     * page1.graphics.drawImage(image, new RectangleF({x : 10, y : 10}, {width : 200, height : 200}));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    function PdfBitmap(encodedString) {\n        var _this = _super.call(this) || this;\n        //Fields\n        /**\n         * Specifies the `status` of an image.\n         * @default true.\n         * @hidden\n         * @private\n         */\n        _this.imageStatus = true;\n        /**\n         * Internal variable for accessing fields from `DictionryProperties` class.\n         * @hidden\n         * @private\n         */\n        _this.dictionaryProperties = new DictionaryProperties();\n        _this.loadImage(encodedString);\n        return _this;\n    }\n    /**\n     * `Load image`.\n     * @hidden\n     * @private\n     */\n    PdfBitmap.prototype.loadImage = function (encodedString) {\n        var task = this.initializeAsync(encodedString);\n    };\n    /**\n     * `Initialize` image parameters.\n     * @private\n     */\n    PdfBitmap.prototype.initializeAsync = function (encodedString) {\n        var byteArray = new ByteArray(encodedString.length);\n        byteArray.writeFromBase64String(encodedString);\n        this.decoder = new ImageDecoder(byteArray);\n        this.height = this.decoder.height;\n        this.width = this.decoder.width;\n        // FrameCount = BitmapImageDecoder.FrameCount;\n        this.bitsPerComponent = this.decoder.bitsPerComponent;\n    };\n    /**\n     * `Saves` the image into stream.\n     * @private\n     */\n    PdfBitmap.prototype.save = function () {\n        this.imageStatus = true;\n        this.imageStream = this.decoder.getImageDictionary();\n    };\n    return PdfBitmap;\n}(PdfImage));\nexport { PdfBitmap };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}