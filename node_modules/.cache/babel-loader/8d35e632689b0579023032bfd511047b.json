{"ast":null,"code":"import { PdfGrid } from './pdf-grid';\nimport { PdfGridCellStyle } from './styles/style';\nimport { PdfStringLayouter } from './../../graphics/fonts/string-layouter';\nimport { PdfDocument } from './../../document/pdf-document';\nimport { PdfStringFormat } from './../../graphics/fonts/pdf-string-format';\nimport { RectangleF, PointF, SizeF } from './../../drawing/pdf-drawing';\nimport { PdfDashStyle, PdfLineCap } from './../../graphics/enum';\nimport { PdfBorderOverlapStyle } from './../tables/light-tables/enum';\nimport { PdfSolidBrush } from './../../graphics/brushes/pdf-solid-brush';\nimport { PdfColor } from './../../graphics/pdf-color';\nimport { PdfImage } from './../../graphics/images/pdf-image';\nimport { PdfBitmap } from './../../graphics/images/pdf-bitmap';\nimport { PdfTextWebLink } from './../../annotations/pdf-text-web-link';\nimport { PdfLayoutType } from './../../graphics/figures/enum';\nimport { PdfGridLayouter, PdfGridLayoutFormat } from './../../structured-elements/grid/layout/grid-layouter';\nimport { PdfLayoutParams } from '../../../implementation/graphics/figures/base/element-layouter';\n/**\n * `PdfGridCell` class represents the schema of a cell in a 'PdfGrid'.\n */\n\nvar PdfGridCell =\n/** @class */\nfunction () {\n  function PdfGridCell(row) {\n    /**\n     * `Width` of the cell.\n     * @default 0\n     * @private\n     */\n    this.cellWidth = 0;\n    /**\n     * `Height` of the cell.\n     * @default 0\n     * @private\n     */\n\n    this.cellHeight = 0;\n    /**\n     * `tempval`to stores current width .\n     * @default 0\n     * @private\n     */\n\n    this.tempval = 0;\n    this.fontSpilt = false;\n    /**\n     * Specifies weather the `cell is drawn`.\n     * @default true\n     * @private\n     */\n\n    this.finsh = true;\n    /**\n     * The `remaining height` of row span.\n     * @default 0\n     * @private\n     */\n\n    this.rowSpanRemainingHeight = 0;\n    this.hasRowSpan = false;\n    this.hasColSpan = false;\n    /**\n     * the 'isFinish' is set to page finish\n     */\n\n    this.isFinish = true;\n    /**\n     * The `present' to store the current cell.\n     * @default false\n     * @private\n     */\n\n    this.present = false;\n    this.gridRowSpan = 1;\n    this.colSpan = 1;\n\n    if (typeof row !== 'undefined') {\n      this.gridRow = row;\n    }\n  }\n\n  Object.defineProperty(PdfGridCell.prototype, \"isCellMergeContinue\", {\n    //Properties\n    get: function get() {\n      return this.internalIsCellMergeContinue;\n    },\n    set: function set(value) {\n      this.internalIsCellMergeContinue = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"isRowMergeContinue\", {\n    get: function get() {\n      return this.internalIsRowMergeContinue;\n    },\n    set: function set(value) {\n      this.internalIsRowMergeContinue = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"isCellMergeStart\", {\n    get: function get() {\n      return this.internalIsCellMergeStart;\n    },\n    set: function set(value) {\n      this.internalIsCellMergeStart = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"isRowMergeStart\", {\n    get: function get() {\n      return this.internalIsRowMergeStart;\n    },\n    set: function set(value) {\n      this.internalIsRowMergeStart = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"remainingString\", {\n    /**\n     * Gets or sets the `remaining string` after the row split between pages.\n     * @private\n     */\n    get: function get() {\n      return this.remaining;\n    },\n    set: function set(value) {\n      this.remaining = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"FinishedDrawingCell\", {\n    /**\n     * Gets or sets the `FinishedDrawingCell` .\n     * @private\n     */\n    get: function get() {\n      return this.isFinish;\n    },\n    set: function set(value) {\n      this.isFinish = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"stringFormat\", {\n    /**\n     * Gets or sets the `string format`.\n     * @private\n     */\n    get: function get() {\n      if (this.format == null) {\n        this.format = new PdfStringFormat();\n      }\n\n      return this.format;\n    },\n    set: function set(value) {\n      this.format = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"row\", {\n    /**\n     * Gets or sets the parent `row`.\n     * @private\n     */\n    get: function get() {\n      return this.gridRow;\n    },\n    set: function set(value) {\n      this.gridRow = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"value\", {\n    /**\n     * Gets or sets the `value` of the cell.\n     * @private\n     */\n    get: function get() {\n      return this.objectValue;\n    },\n    set: function set(value) {\n      this.objectValue = value;\n\n      if (this.objectValue instanceof PdfGrid) {\n        this.row.grid.isSingleGrid = false;\n        var grid = this.objectValue;\n        grid.ParentCell = this;\n        this.objectValue.isChildGrid = true;\n        var rowCount = this.row.grid.rows.count;\n\n        for (var i = 0; i < rowCount; i++) {\n          var row = this.row.grid.rows.getRow(i);\n          var colCount = row.cells.count;\n\n          for (var j = 0; j < colCount; j++) {\n            var cell = row.cells.getCell(j);\n            cell.parent = this;\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"rowSpan\", {\n    /**\n     * Gets or sets a value that indicates the total number of rows that cell `spans` within a PdfGrid.\n     * @private\n     */\n    get: function get() {\n      return this.gridRowSpan;\n    },\n    set: function set(value) {\n      if (value < 1) {\n        throw new Error('ArgumentException : Invalid span specified, must be greater than or equal to 1');\n      } else {\n        this.gridRowSpan = value;\n        this.row.rowSpanExists = true;\n        this.row.grid.hasRowSpanSpan = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"style\", {\n    /**\n     * Gets or sets the cell `style`.\n     * @private\n     */\n    get: function get() {\n      if (this.cellStyle == null) {\n        this.cellStyle = new PdfGridCellStyle();\n      }\n\n      return this.cellStyle;\n    },\n    set: function set(value) {\n      this.cellStyle = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"height\", {\n    /**\n     * Gets the `height` of the PdfGrid cell.[Read-Only].\n     * @private\n     */\n    get: function get() {\n      if (this.cellHeight === 0) {\n        this.cellHeight = this.measureHeight();\n      }\n\n      return this.cellHeight;\n    },\n    set: function set(value) {\n      this.cellHeight = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"columnSpan\", {\n    /**\n     * Gets or sets a value that indicates the total number of columns that cell `spans` within a PdfGrid.\n     * @private\n     */\n    get: function get() {\n      return this.colSpan;\n    },\n    set: function set(value) {\n      if (value < 1) {\n        throw Error('Invalid span specified, must be greater than or equal to 1');\n      } else {\n        this.colSpan = value;\n        this.row.columnSpanExists = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"width\", {\n    /**\n     * Gets the `width` of the PdfGrid cell.[Read-Only].\n     * @private\n     */\n    get: function get() {\n      if (this.cellWidth === 0 || this.row.grid.isComplete) {\n        this.cellWidth = this.measureWidth();\n      }\n\n      return Math.round(this.cellWidth);\n    },\n    set: function set(value) {\n      this.cellWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Implementation\n\n  /**\n   * `Calculates the width`.\n   * @private\n   */\n\n  PdfGridCell.prototype.measureWidth = function () {\n    // .. Calculate the cell text width.\n    // .....Add border widths, cell spacings and paddings to the width.\n    var width = 0;\n    var layouter = new PdfStringLayouter();\n\n    if (typeof this.objectValue === 'string') {\n      /* tslint:disable */\n      var slr = layouter.layout(this.objectValue, this.getTextFont(), this.stringFormat, new SizeF(Number.MAX_VALUE, Number.MAX_VALUE), false, new SizeF(0, 0));\n      width += slr.actualSize.width;\n      width += (this.style.borders.left.width + this.style.borders.right.width) * 2;\n    } else if (this.objectValue instanceof PdfGrid) {\n      width = this.objectValue.size.width; //width += this.objectValue.style.cellSpacing;\n    } else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {\n      width += this.objectValue.width;\n    } else if (this.objectValue instanceof PdfTextWebLink) {\n      var webLink = this.objectValue;\n      var result = layouter.layout(webLink.text, webLink.font, webLink.stringFormat, new SizeF(0, 0), false, new SizeF(0, 0));\n      /* tslint:enable */\n\n      width += result.actualSize.width;\n      width += (this.style.borders.left.width + this.style.borders.right.width) * 2;\n    }\n\n    if (!(this.objectValue instanceof PdfGrid)) {\n      if (this.style.cellPadding != null) {\n        width += this.style.cellPadding.left + this.style.cellPadding.right;\n      } else {\n        width += this.row.grid.style.cellPadding.left + this.row.grid.style.cellPadding.right;\n      }\n    } else {\n      if (this.style.cellPadding != null || typeof this.style.cellPadding !== 'undefined') {\n        if (typeof this.style.cellPadding.left !== 'undefined' && this.style.cellPadding.hasLeftPad) {\n          width += this.style.cellPadding.left;\n        }\n\n        if (typeof this.style.cellPadding.right !== 'undefined' && this.style.cellPadding.hasRightPad) {\n          width += this.style.cellPadding.right;\n        }\n      } else {\n        if (typeof this.row.grid.style.cellPadding.left !== 'undefined' && this.row.grid.style.cellPadding.hasLeftPad) {\n          width += this.row.grid.style.cellPadding.left;\n        }\n\n        if (typeof this.row.grid.style.cellPadding.right !== 'undefined' && this.row.grid.style.cellPadding.hasRightPad) {\n          width += this.row.grid.style.cellPadding.right;\n        }\n      }\n    }\n\n    width += this.row.grid.style.cellSpacing;\n    return width;\n  };\n  /**\n   * Draw the `cell background`.\n   * @private\n   */\n\n\n  PdfGridCell.prototype.drawCellBackground = function (graphics, bounds) {\n    var backgroundBrush = this.getBackgroundBrush(); //graphics.isTemplateGraphics = true;\n\n    if (backgroundBrush != null) {\n      graphics.save();\n      graphics.drawRectangle(backgroundBrush, bounds.x, bounds.y, bounds.width, bounds.height);\n      graphics.restore();\n    }\n\n    if (this.style.backgroundImage != null) {\n      var image = this.getBackgroundImage();\n      graphics.drawImage(this.style.backgroundImage, bounds.x, bounds.y, bounds.width, bounds.height);\n    }\n  };\n  /**\n   * `Adjusts the text layout area`.\n   * @private\n   */\n\n  /* tslint:disable */\n\n\n  PdfGridCell.prototype.adjustContentLayoutArea = function (bounds) {\n    //Add Padding value to its Cell Bounds\n    var returnBounds = new RectangleF(bounds.x, bounds.y, bounds.width, bounds.height);\n\n    if (!(this.objectValue instanceof PdfGrid)) {\n      if (typeof this.style.cellPadding === 'undefined' || this.style.cellPadding == null) {\n        returnBounds.x += this.gridRow.grid.style.cellPadding.left + this.cellStyle.borders.left.width;\n        returnBounds.y += this.gridRow.grid.style.cellPadding.top + this.cellStyle.borders.top.width;\n        returnBounds.width -= this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left;\n        returnBounds.height -= this.gridRow.grid.style.cellPadding.bottom + this.gridRow.grid.style.cellPadding.top;\n        returnBounds.height -= this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width;\n      } else {\n        returnBounds.x += this.style.cellPadding.left + this.cellStyle.borders.left.width;\n        returnBounds.y += this.style.cellPadding.top + this.cellStyle.borders.top.width;\n        returnBounds.width -= this.style.cellPadding.right + this.style.cellPadding.left;\n        returnBounds.width -= this.cellStyle.borders.left.width + this.cellStyle.borders.right.width;\n        returnBounds.height -= this.style.cellPadding.bottom + this.style.cellPadding.top;\n        returnBounds.height -= this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width;\n\n        if (this.rowSpan === 1) {\n          returnBounds.width -= this.style.borders.left.width;\n        }\n      }\n    } else {\n      if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n        if (typeof this.gridRow.grid.style.cellPadding.left !== 'undefined' && this.gridRow.grid.style.cellPadding.hasLeftPad) {\n          returnBounds.x += this.gridRow.grid.style.cellPadding.left + this.cellStyle.borders.left.width;\n          returnBounds.width -= this.gridRow.grid.style.cellPadding.left;\n        }\n\n        if (typeof this.gridRow.grid.style.cellPadding.top !== 'undefined' && this.gridRow.grid.style.cellPadding.hasTopPad) {\n          returnBounds.y += this.gridRow.grid.style.cellPadding.top + this.cellStyle.borders.top.width;\n          returnBounds.height -= this.gridRow.grid.style.cellPadding.top;\n        }\n\n        if (typeof this.gridRow.grid.style.cellPadding.right !== 'undefined' && this.gridRow.grid.style.cellPadding.hasRightPad) {\n          returnBounds.width -= this.gridRow.grid.style.cellPadding.right;\n        }\n\n        if (typeof this.gridRow.grid.style.cellPadding.bottom !== 'undefined' && this.gridRow.grid.style.cellPadding.hasBottomPad) {\n          returnBounds.height -= this.gridRow.grid.style.cellPadding.bottom;\n        }\n      } else {\n        if (typeof this.style.cellPadding.left !== 'undefined' && this.style.cellPadding.hasLeftPad) {\n          returnBounds.x += this.style.cellPadding.left + this.cellStyle.borders.left.width;\n          returnBounds.width -= this.style.cellPadding.left;\n        }\n\n        if (typeof this.style.cellPadding.top !== 'undefined' && this.style.cellPadding.hasTopPad) {\n          returnBounds.y += this.style.cellPadding.top + this.cellStyle.borders.top.width;\n          returnBounds.height -= this.style.cellPadding.top;\n        }\n\n        if (typeof this.style.cellPadding.right !== 'undefined' && this.style.cellPadding.hasRightPad) {\n          returnBounds.width -= this.style.cellPadding.right;\n        }\n\n        if (typeof this.style.cellPadding.bottom !== 'undefined' && this.style.cellPadding.hasBottomPad) {\n          returnBounds.height -= this.style.cellPadding.bottom;\n        }\n      }\n\n      returnBounds.width -= this.cellStyle.borders.left.width + this.cellStyle.borders.right.width;\n      returnBounds.height -= this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width;\n    }\n\n    return returnBounds;\n  };\n  /**\n   * `Draws` the specified graphics.\n   * @private\n   */\n\n\n  PdfGridCell.prototype.draw = function (graphics, bounds, cancelSubsequentSpans) {\n    var isrowbreak = false;\n    /*if (!this.row.grid.isSingleGrid)\n    {\n        //Check whether the Grid Span to Nextpage\n        if ((this.remainingString != null) || (PdfGridLayouter.repeatRowIndex != -1))\n        {\n            this.DrawParentCells(graphics, bounds, true);\n        }\n        else if (this.row.grid.rows.count > 1)\n        {\n            for (let i : number  = 0; i < this.row.grid.rows.count; i++)\n            {\n                if (this.row == this.row.grid.rows.getRow(i))\n                {\n                    if (this.row.grid.rows.getRow(i).rowBreakHeight > 0)\n                        isrowbreak = true;\n                    if ((i > 0) && (isrowbreak))\n                        this.DrawParentCells(graphics, bounds, false);\n                }\n            }\n        }\n    } */\n\n    var result = null;\n    /*if (cancelSubsequentSpans)\n    {\n        //..Cancel all subsequent cell spans, if no space exists.\n        let currentCellIndex : number = this.row.cells.indexOf(this);\n        for (let i : number = currentCellIndex + 1; i <= currentCellIndex + this.colSpan; i++)\n        {\n            this.row.cells.getCell(i).isCellMergeContinue = false;\n            this.row.cells.getCell(i).isRowMergeContinue = false;\n        }\n        this.colSpan = 1;\n    }*/\n    //..Skip cells which were already covered by spanmap.\n\n    if (this.internalIsCellMergeContinue || this.internalIsRowMergeContinue) {\n      if (this.internalIsCellMergeContinue && this.row.grid.style.allowHorizontalOverflow) {\n        if (this.row.rowOverflowIndex > 0 && this.row.cells.indexOf(this) != this.row.rowOverflowIndex + 1 || this.row.rowOverflowIndex == 0 && this.internalIsCellMergeContinue) {\n          return result;\n        }\n      } else {\n        return result;\n      }\n    } //Adjust bounds with Row and Column Spacing\n\n\n    bounds = this.adjustOuterLayoutArea(bounds, graphics);\n    this.drawCellBackground(graphics, bounds);\n    var textPen = this.getTextPen();\n    var textBrush = this.getTextBrush();\n\n    if (typeof textPen === 'undefined' && typeof textBrush === 'undefined') {\n      textBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n    }\n\n    var font = this.getTextFont();\n    var strFormat = this.getStringFormat();\n    var innerLayoutArea = bounds;\n\n    if (innerLayoutArea.height >= graphics.clientSize.height) {\n      // If to break row to next page.\n      if (this.row.grid.allowRowBreakAcrossPages) {\n        innerLayoutArea.height -= innerLayoutArea.y; //bounds.height -= bounds.y;\n        // if(this.row.grid.isChildGrid)\n        // {\n        //     innerLayoutArea.height -= this.row.grid.ParentCell.row.grid.style.cellPadding.bottom;\n        // }\n      } // if user choose to cut the row whose height is more than page height.\n      // else\n      // {\n      //     innerLayoutArea.height = graphics.clientSize.height;\n      //     bounds.height = graphics.clientSize.height;\n      // }\n\n    }\n\n    innerLayoutArea = this.adjustContentLayoutArea(innerLayoutArea);\n\n    if (typeof this.objectValue === 'string' || typeof this.remaining === 'string') {\n      var temp = void 0;\n      var layoutRectangle = void 0;\n      if (innerLayoutArea.height < font.height) layoutRectangle = new RectangleF(innerLayoutArea.x, innerLayoutArea.y, innerLayoutArea.width, font.height);else layoutRectangle = innerLayoutArea;\n\n      if (innerLayoutArea.height < font.height && this.row.grid.isChildGrid && this.row.grid.ParentCell != null) {\n        var height = layoutRectangle.height - this.row.grid.ParentCell.row.grid.style.cellPadding.bottom - this.row.grid.style.cellPadding.bottom;\n\n        if (this.row.grid.splitChildRowIndex != -1) {\n          this.fontSpilt = true;\n          this.row.rowFontSplit = true;\n        }\n\n        if (height > 0 && height < font.height) layoutRectangle.height = height; // else if (height + this.row.grid.style.cellPadding.bottom > 0 && height + this.row.grid.style.cellPadding.bottom < font.height)\n        //     layoutRectangle.height = height + this.row.grid.style.cellPadding.bottom;\n        // else if (bounds.height < font.height)\n        //     layoutRectangle.height = bounds.height;\n        // else if (bounds.height - this.row.grid.ParentCell.row.grid.style.cellPadding.bottom < font.height)\n        //     layoutRectangle.height = bounds.height - this.row.grid.ParentCell.row.grid.style.cellPadding.bottom;                        \n      }\n\n      if (this.gridRow.grid.style.cellSpacing != 0) {\n        layoutRectangle.width -= this.gridRow.grid.style.cellSpacing;\n        bounds.width -= this.gridRow.grid.style.cellSpacing;\n      }\n\n      if (this.isFinish) {\n        // if (this.row.grid.splitChildRowIndex != -1 && !this.row.grid.isChildGrid && typeof this.remaining === 'undefined'){\n        //     this.remaining = '';\n        //     graphics.drawString(this.remaining, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n        // } else {\n        temp = this.remaining === '' ? this.remaining : this.objectValue;\n        graphics.drawString(temp, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n\n        if (this.row.grid.splitChildRowIndex != -1 && !this.row.grid.isChildGrid && typeof this.remaining === 'undefined') {\n          this.remaining = ''; //graphics.drawString(this.remaining, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n        }\n      } else {\n        if (typeof this.remaining == 'undefined' || this.remaining === null) {\n          this.remaining = '';\n        }\n\n        if (this.row.repeatFlag) {\n          graphics.drawString(this.remaining, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n        } //  else {\n        //     if(this.row.grid.ParentCell.row.repeatFlag) {\n        //         graphics.drawString((this.remaining as string), font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);                    \n        //     } else {\n        //         layoutRectangle.height = this.row.height;\n        //         graphics.drawString((this.objectValue as string), font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n        //         bounds.height = this.row.height;\n        //     }\n        //  }\n\n\n        this.isFinish = true; //graphics.drawString((this.remaining as string), font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n      }\n\n      result = graphics.stringLayoutResult; // if(this.row.grid.isChildGrid && this.row.rowBreakHeight > 0 && result !=null) {\n      //     bounds.height -= this.row.grid.ParentCell.row.grid.style.cellPadding.bottom;\n      // }\n    } else if (this.objectValue instanceof PdfGrid) {\n      var childGrid = this.objectValue;\n      childGrid.isChildGrid = true;\n      childGrid.ParentCell = this;\n      var layoutRect = void 0;\n      layoutRect = innerLayoutArea;\n\n      if (this.gridRow.grid.style.cellSpacing != 0) {\n        bounds.width -= this.gridRow.grid.style.cellSpacing;\n      } // layoutRect = bounds;\n      // if (this.style.cellPadding != null){\n      //     layoutRect = bounds;            \n      // } else if((this.row.grid.style.cellPadding != null) && (childGrid.style.cellPadding.bottom === 0.5) && (childGrid.style.cellPadding.top === 0.5)\n      //                               && (childGrid.style.cellPadding.left === 5.76) && (childGrid.style.cellPadding.right === 5.76)\n      //                               && (this.gridRow.grid.style.cellSpacing === 0) && (childGrid.style.cellSpacing === 0)) {\n      //     layoutRect = innerLayoutArea;\n      // }\n      // if(this.objectValue.style.cellPadding != null && typeof this.objectValue.style.cellPadding !== 'undefined'){\n      //     layoutRect = bounds;\n      // }           \n\n\n      var layouter = new PdfGridLayouter(childGrid);\n      var format = new PdfGridLayoutFormat();\n      if (this.row.grid.LayoutFormat != null) format = this.row.grid.LayoutFormat;else format.layout = PdfLayoutType.Paginate;\n      var param = new PdfLayoutParams();\n\n      if (graphics.layer != null) {\n        // Define layout parameters.\n        param.page = graphics.page;\n        param.bounds = layoutRect;\n        param.format = format; //Set the span \n\n        childGrid.setSpan();\n        childGrid.checkSpan(); // Draw the child grid.\n\n        var childGridResult = layouter.Layouter(param); //let childGridResult : PdfLayoutResult = layouter.innerLayout(param);\n\n        this.value = childGrid;\n\n        if (this.row.grid.splitChildRowIndex !== -1) {\n          this.height = this.row.rowBreakHeightValue;\n        }\n\n        if (param.page != childGridResult.page) //&& (isWidthGreaterthanParent != true))\n          {\n            childGridResult.bounds.height = this.row.rowBreakHeightValue;\n            if (this.row.rowBreakHeight == 0) this.row.NestedGridLayoutResult = childGridResult;else this.row.rowBreakHeight = this.row.rowBreakHeightValue; //bounds.height = this.row.rowBreakHeight;\n            //After drawing paginated nested grid, the bounds of the parent grid in start page should be corrected for borders.\n            //bounds.height = graphics.clientSize.height - bounds.y;\n          }\n      }\n    } else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {\n      var imageBounds = void 0;\n\n      if (this.objectValue.width <= innerLayoutArea.width) {\n        imageBounds = new RectangleF(innerLayoutArea.x, innerLayoutArea.y, this.objectValue.width, innerLayoutArea.height);\n      } else {\n        imageBounds = innerLayoutArea;\n      }\n\n      graphics.drawImage(this.objectValue, imageBounds.x, imageBounds.y, imageBounds.width, imageBounds.height);\n    } else if (this.objectValue instanceof PdfTextWebLink) {\n      this.objectValue.draw(graphics.currentPage, innerLayoutArea);\n    } else if (typeof this.objectValue === 'undefined') {\n      this.objectValue = \"\";\n      graphics.drawString(this.objectValue, font, textPen, textBrush, innerLayoutArea.x, innerLayoutArea.y, innerLayoutArea.width, innerLayoutArea.height, strFormat);\n\n      if (this.style.cellPadding != null && this.style.cellPadding.bottom == 0 && this.style.cellPadding.left == 0 && this.style.cellPadding.right == 0 && this.style.cellPadding.top == 0) {\n        bounds.width -= this.style.borders.left.width + this.style.borders.right.width;\n      }\n\n      if (this.gridRow.grid.style.cellSpacing != 0) {\n        bounds.width -= this.gridRow.grid.style.cellSpacing;\n      }\n    }\n\n    if (this.style.borders != null) {\n      if (!this.fontSpilt) this.drawCellBorders(graphics, bounds);else {\n        if (this.row.grid.ParentCell.row.grid.splitChildRowIndex != -1) {\n          this.row.rowFontSplit = false;\n          this.drawCellBorders(graphics, bounds);\n        }\n      }\n    }\n\n    return result;\n  };\n  /* tslint:enable */\n\n  /**\n   * Draws the `cell border` constructed by drawing lines.\n   * @private\n   */\n\n\n  PdfGridCell.prototype.drawCellBorders = function (graphics, bounds) {\n    if (this.row.grid.style.borderOverlapStyle === PdfBorderOverlapStyle.Inside) {\n      bounds.x += this.style.borders.left.width;\n      bounds.y += this.style.borders.top.width;\n      bounds.width -= this.style.borders.right.width;\n      bounds.height -= this.style.borders.bottom.width;\n    }\n\n    var p1 = new PointF(bounds.x, bounds.y + bounds.height);\n    var p2 = new PointF(bounds.x, bounds.y);\n    var pen = this.cellStyle.borders.left;\n\n    if (this.cellStyle.borders.left.dashStyle === PdfDashStyle.Solid) {\n      pen.lineCap = PdfLineCap.Square;\n    } // SetTransparency(ref graphics, pen);\n\n\n    if (pen.width !== 0) {\n      graphics.drawLine(pen, p1, p2);\n    }\n\n    p1 = new PointF(bounds.x + bounds.width, bounds.y);\n    p2 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height);\n    pen = this.cellStyle.borders.right;\n\n    if (bounds.x + bounds.width > graphics.clientSize.width - pen.width / 2) {\n      p1 = new PointF(graphics.clientSize.width - pen.width / 2, bounds.y);\n      p2 = new PointF(graphics.clientSize.width - pen.width / 2, bounds.y + bounds.height);\n    }\n\n    if (this.cellStyle.borders.right.dashStyle === PdfDashStyle.Solid) {\n      pen.lineCap = PdfLineCap.Square;\n    }\n\n    if (pen.width !== 0) {\n      graphics.drawLine(pen, p1, p2);\n    }\n\n    p1 = new PointF(bounds.x, bounds.y);\n    p2 = new PointF(bounds.x + bounds.width, bounds.y);\n    pen = this.cellStyle.borders.top;\n\n    if (this.cellStyle.borders.top.dashStyle === PdfDashStyle.Solid) {\n      pen.lineCap = PdfLineCap.Square;\n    }\n\n    if (pen.width !== 0) {\n      graphics.drawLine(pen, p1, p2);\n    }\n\n    p1 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height);\n    p2 = new PointF(bounds.x, bounds.y + bounds.height);\n    pen = this.cellStyle.borders.bottom;\n\n    if (bounds.y + bounds.height > graphics.clientSize.height - pen.width / 2) {\n      p1 = new PointF(bounds.x + bounds.width, graphics.clientSize.height - pen.width / 2);\n      p2 = new PointF(bounds.x, graphics.clientSize.height - pen.width / 2);\n    }\n\n    if (this.cellStyle.borders.bottom.dashStyle === PdfDashStyle.Solid) {\n      pen.lineCap = PdfLineCap.Square;\n    }\n\n    if (pen.width !== 0) {\n      graphics.drawLine(pen, p1, p2);\n    }\n  }; // private setTransparency(graphics : PdfGraphics, pen : PdfPen) : void {\n  //     let alpha : number = (pen.color.a / 255)as number;\n  //     graphics.save();\n  //     graphics.setTransparency(alpha);\n  // }\n\n  /**\n   * `Adjusts the outer layout area`.\n   * @private\n   */\n\n  /* tslint:disable */\n\n\n  PdfGridCell.prototype.adjustOuterLayoutArea = function (bounds, g) {\n    var isHeader = false;\n    var cellSpacing = this.row.grid.style.cellSpacing;\n\n    if (cellSpacing > 0) {\n      bounds = new RectangleF(bounds.x + cellSpacing, bounds.y + cellSpacing, bounds.width - cellSpacing, bounds.height - cellSpacing);\n    }\n\n    var currentColIndex = this.row.cells.indexOf(this);\n\n    if (this.columnSpan > 1 || this.row.rowOverflowIndex > 0 && currentColIndex == this.row.rowOverflowIndex + 1 && this.isCellMergeContinue) {\n      var span = this.columnSpan;\n\n      if (span == 1 && this.isCellMergeContinue) {\n        for (var j = currentColIndex + 1; j < this.row.grid.columns.count; j++) {\n          if (this.row.cells.getCell(j).isCellMergeContinue) span++;else break;\n        }\n      }\n\n      var totalWidth = 0;\n\n      for (var i = currentColIndex; i < currentColIndex + span; i++) {\n        if (this.row.grid.style.allowHorizontalOverflow) {\n          var width = void 0;\n          var compWidth = this.row.grid.size.width < g.clientSize.width ? this.row.grid.size.width : g.clientSize.width;\n\n          if (this.row.grid.size.width > g.clientSize.width) {\n            width = bounds.x + totalWidth + this.row.grid.columns.getColumn(i).width;\n          } else {\n            width = totalWidth + this.row.grid.columns.getColumn(i).width;\n          }\n\n          if (width > compWidth) {\n            break;\n          }\n        }\n\n        totalWidth += this.row.grid.columns.getColumn(i).width;\n      }\n\n      totalWidth -= this.row.grid.style.cellSpacing;\n      bounds.width = totalWidth;\n    }\n\n    if (this.rowSpan > 1 || this.row.rowSpanExists) {\n      var span = this.rowSpan;\n      var currentRowIndex = this.row.grid.rows.rowCollection.indexOf(this.row);\n\n      if (currentRowIndex == -1) {\n        currentRowIndex = this.row.grid.headers.indexOf(this.row);\n\n        if (currentRowIndex != -1) {\n          isHeader = true;\n        }\n      } // if (span == 1 && this.isCellMergeContinue) {\n      //         for (let j : number = currentRowIndex + 1; j < this.row.grid.rows.count; j++)\n      //         {\n      //             let flag : boolean = (isHeader ? this.row.grid.headers.getHeader(j).cells.getCell(currentColIndex).isCellMergeContinue : this.row.grid.rows.getRow(j).cells.getCell(currentColIndex).isCellMergeContinue);\n      //             if (flag)\n      //                 span++;\n      //             else\n      //                 break;\n      //         }\n      // }\n\n\n      var totalHeight = 0;\n      var max = 0;\n\n      for (var i = currentRowIndex; i < currentRowIndex + span; i++) {\n        totalHeight += isHeader ? this.row.grid.headers.getHeader(i).height : this.row.grid.rows.getRow(i).height;\n        var row = this.row.grid.rows.getRow(i);\n        var rowIndex = this.row.grid.rows.rowCollection.indexOf(row);\n        /*if (this.rowSpan > 1)\n            {\n                for (let k : number = 0; k < this.row.cells.count; k++) {\n                    let cell : PdfGridCell = this.row.cells.getCell(k);\n                    if(cell.rowSpan>1)\n                    {\n                        let tempHeight : number =0;\n                        \n                        for (let j :number = i; j < i +cell.rowSpan; j++)\n                        {\n                            if (!this.row.grid.rows.getRow(j).isRowSpanRowHeightSet)\n                                this.row.grid.rows.getRow(j).isRowHeightSet = false;\n                            tempHeight += this.row.grid.rows.getRow(j).height;\n                            if (!this.row.grid.rows.getRow(j).isRowSpanRowHeightSet)\n                                this.row.grid.rows.getRow(j).isRowHeightSet = true;\n                        }\n                        //To check the Row spanned cell height is greater than the total spanned row height.\n                        if(cell.height>tempHeight)\n                        {\n                            if (max < (cell.height - tempHeight))\n                            {\n                                max = cell.height - tempHeight;\n                                if (this.rowSpanRemainingHeight != 0 && max > this.rowSpanRemainingHeight)\n                                {\n                                    max += this.rowSpanRemainingHeight;\n                                }\n                                let index :number = row.cells.indexOf(cell);\n                                //set the m_rowspanRemainingHeight to last rowspanned row.\n                                this.row.grid.rows.getRow((rowIndex +cell.rowSpan) - 1).cells.getCell(index).rowSpanRemainingHeight = max;\n                                this.rowSpanRemainingHeight = this.row.grid.rows.getRow((rowIndex + cell.rowSpan) - 1).cells.getCell(index).rowSpanRemainingHeight;\n                            }\n                        }\n                    }\n                }\n            }\n            if (!this.row.grid.rows.getRow(i).isRowSpanRowHeightSet)\n            this.row.grid.rows.getRow(i).isRowHeightSet = true;*/\n      }\n\n      var cellIndex = this.row.cells.indexOf(this);\n      totalHeight -= this.row.grid.style.cellSpacing; // if (this.row.cells.getCell(cellIndex).height > totalHeight && (!this.row.grid.rows.getRow((currentRowIndex + span) - 1).isRowHeightSet)) {\n      //      this.row.grid.rows.getRow((currentRowIndex + span) - 1).cells.getCell(cellIndex).rowSpanRemainingHeight = this.row.cells.getCell(cellIndex).height - totalHeight;\n      //      totalHeight = this.row.cells.getCell(cellIndex).height;\n      //      bounds.height = totalHeight;\n      // } else {\n\n      bounds.height = totalHeight; //  }\n\n      if (!this.row.rowMergeComplete) {\n        bounds.height = totalHeight;\n      }\n    }\n\n    return bounds;\n  };\n  /* tslint:enable */\n\n  /**\n   * Gets the `text font`.\n   * @private\n   */\n\n\n  PdfGridCell.prototype.getTextFont = function () {\n    if (typeof this.style.font !== 'undefined' && this.style.font != null) {\n      return this.style.font;\n    } else if (typeof this.row.style.font !== 'undefined' && this.row.style.font != null) {\n      return this.row.style.font;\n    } else if (typeof this.row.grid.style.font !== 'undefined' && this.row.grid.style.font != null) {\n      return this.row.grid.style.font;\n    } else {\n      return PdfDocument.defaultFont;\n    }\n  };\n  /**\n   * Gets the `text brush`.\n   * @private\n   */\n\n\n  PdfGridCell.prototype.getTextBrush = function () {\n    if (typeof this.style.textBrush !== 'undefined' && this.style.textBrush != null) {\n      return this.style.textBrush;\n    } else if (typeof this.row.style.textBrush !== 'undefined' && this.row.style.textBrush != null) {\n      return this.row.style.textBrush;\n    } else {\n      return this.row.grid.style.textBrush;\n    }\n  };\n  /**\n   * Gets the `text pen`.\n   * @private\n   */\n\n\n  PdfGridCell.prototype.getTextPen = function () {\n    if (typeof this.style.textPen !== 'undefined' && this.style.textPen != null) {\n      return this.style.textPen;\n    } else if (typeof this.row.style.textPen !== 'undefined' && this.row.style.textPen != null) {\n      return this.row.style.textPen;\n    } else {\n      return this.row.grid.style.textPen;\n    }\n  };\n  /**\n   * Gets the `background brush`.\n   * @private\n   */\n\n\n  PdfGridCell.prototype.getBackgroundBrush = function () {\n    if (typeof this.style.backgroundBrush !== 'undefined' && this.style.backgroundBrush != null) {\n      return this.style.backgroundBrush;\n    } else if (typeof this.row.style.backgroundBrush !== 'undefined' && this.row.style.backgroundBrush != null) {\n      return this.row.style.backgroundBrush;\n    } else {\n      return this.row.grid.style.backgroundBrush;\n    }\n  };\n  /**\n   * Gets the `background image`.\n   * @private\n   */\n\n\n  PdfGridCell.prototype.getBackgroundImage = function () {\n    if (typeof this.style.backgroundImage !== 'undefined' && this.style.backgroundImage != null) {\n      return this.style.backgroundImage;\n    } else if (typeof this.row.style.backgroundImage !== 'undefined' && this.row.style.backgroundImage != null) {\n      return this.row.style.backgroundImage;\n    } else {\n      return this.row.grid.style.backgroundImage;\n    }\n  };\n  /**\n   * Gets the current `StringFormat`.\n   * @private\n   */\n\n\n  PdfGridCell.prototype.getStringFormat = function () {\n    if (typeof this.style.stringFormat !== 'undefined' && this.style.stringFormat != null) {\n      return this.style.stringFormat;\n    } else {\n      return this.stringFormat;\n    }\n  };\n  /**\n   * Calculates the `height`.\n   * @private\n   */\n\n\n  PdfGridCell.prototype.measureHeight = function () {\n    // .. Calculate the cell text height.\n    // .....Add border widths, cell spacings and paddings to the height.\n    var width = this.calculateWidth(); // //check whether the Current PdfGridCell has padding\n\n    if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n      width -= this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left; //width -= (this.style.borders.left.width + this.style.borders.right.width);\n    } else {\n      width -= this.style.cellPadding.right + this.style.cellPadding.left;\n      width -= this.style.borders.left.width + this.style.borders.right.width;\n    }\n\n    var height = 0;\n    var layouter = new PdfStringLayouter();\n\n    if (typeof this.objectValue === 'string' || typeof this.remaining === 'string') {\n      var currentValue = this.objectValue;\n      /* tslint:disable */\n\n      if (!this.isFinish) currentValue = !(this.remaining === null || this.remaining === '' || typeof this.remaining === 'undefined') ? this.remaining : this.objectValue;\n      var slr = null;\n      var cellIndex = this.row.cells.indexOf(this);\n\n      if (this.gridRow.grid.style.cellSpacing != 0) {\n        width -= this.gridRow.grid.style.cellSpacing * 2;\n      }\n\n      if (!this.row.cells.getCell(cellIndex).hasColSpan && !this.row.cells.getCell(cellIndex).hasRowSpan) {\n        if (this.gridRow.grid.isChildGrid) {\n          if (width < 0) {\n            this.tempval = width;\n\n            if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n              this.tempval += this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left;\n            } else {\n              this.tempval += this.style.cellPadding.right + this.style.cellPadding.left;\n              this.tempval += this.style.borders.left.width + this.style.borders.right.width;\n            }\n          } else {\n            this.tempval = width;\n          }\n\n          slr = layouter.layout(currentValue, this.getTextFont(), this.stringFormat, new SizeF(this.tempval, 0), false, new SizeF(0, 0));\n          height += slr.actualSize.height;\n        } else {\n          slr = layouter.layout(currentValue, this.getTextFont(), this.stringFormat, new SizeF(width, 0), false, new SizeF(0, 0));\n          height += slr.actualSize.height;\n        }\n      }\n      /* tslint:enable */\n\n\n      height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n    } else if (this.objectValue instanceof PdfGrid) {\n      var cellIndex = this.row.cells.indexOf(this);\n      var internalWidth = 0;\n\n      if (this.style.cellPadding != null || typeof this.style.cellPadding !== 'undefined') {\n        internalWidth = this.calculateWidth();\n\n        if (typeof this.style.cellPadding.left !== 'undefined' && this.style.cellPadding.hasLeftPad) {\n          internalWidth -= this.style.cellPadding.left;\n        }\n\n        if (typeof this.style.cellPadding.right !== 'undefined' && this.style.cellPadding.hasRightPad) {\n          internalWidth -= this.style.cellPadding.right;\n        }\n      } else if (this.row.grid.style.cellPadding != null || typeof this.row.grid.style.cellPadding !== 'undefined') {\n        internalWidth = this.calculateWidth();\n\n        if (typeof this.row.grid.style.cellPadding.left !== 'undefined' && this.row.grid.style.cellPadding.hasLeftPad) {\n          internalWidth -= this.row.grid.style.cellPadding.left;\n        }\n\n        if (typeof this.row.grid.style.cellPadding.right !== 'undefined' && this.row.grid.style.cellPadding.hasRightPad) {\n          internalWidth -= this.row.grid.style.cellPadding.right;\n        }\n      } else {\n        internalWidth = this.calculateWidth();\n      }\n\n      this.objectValue.tempWidth = internalWidth;\n\n      if (!this.row.cells.getCell(cellIndex).hasColSpan && !this.row.cells.getCell(cellIndex).hasRowSpan) {\n        height = this.objectValue.size.height;\n      } else {\n        height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n      }\n\n      if (this.gridRow.grid.style.cellSpacing !== 0) {\n        width -= this.gridRow.grid.style.cellSpacing * 2; //height += (this.row.grid.style.cellPadding.top + this.row.grid.style.cellPadding.bottom);\n      }\n\n      if (this.style.cellPadding != null || typeof this.style.cellPadding !== 'undefined') {\n        if (typeof this.row.grid.style.cellPadding.top !== 'undefined' && this.row.grid.style.cellPadding.hasTopPad) {\n          height += this.row.grid.style.cellPadding.top;\n        }\n\n        if (this.row.grid.style.cellPadding.hasBottomPad && typeof this.row.grid.style.cellPadding.bottom !== 'undefined') {\n          height += this.row.grid.style.cellPadding.bottom;\n        }\n      }\n\n      height += this.objectValue.style.cellSpacing;\n    } else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {\n      height += this.objectValue.height;\n    } else if (this.objectValue instanceof PdfTextWebLink) {\n      var webLink = this.objectValue;\n      /* tslint:disable */\n\n      var slr = layouter.layout(webLink.text, webLink.font, webLink.stringFormat, new SizeF(width, 0), false, new SizeF(0, 0));\n      /* tslint:enable */\n\n      height += slr.actualSize.height;\n      height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n    } else if (typeof this.objectValue === 'undefined') {\n      if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n        width -= this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left;\n      } else {\n        width -= this.style.cellPadding.right + this.style.cellPadding.left;\n        width -= this.style.borders.left.width + this.style.borders.right.width;\n      }\n\n      height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n    } //Add padding top and bottom value to height\n\n\n    if (!(this.objectValue instanceof PdfGrid)) {\n      if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n        height += this.row.grid.style.cellPadding.top + this.row.grid.style.cellPadding.bottom;\n      } else {\n        height += this.style.cellPadding.top + this.style.cellPadding.bottom;\n      }\n    } else {\n      if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n        if (typeof this.row.grid.style.cellPadding.top !== 'undefined' && this.row.grid.style.cellPadding.hasTopPad) {\n          height += this.row.grid.style.cellPadding.top;\n        }\n\n        if (typeof this.row.grid.style.cellPadding.bottom !== 'undefined' && this.row.grid.style.cellPadding.hasBottomPad) {\n          height += this.row.grid.style.cellPadding.bottom;\n        }\n      } else {\n        if (typeof this.style.cellPadding.top !== 'undefined' && this.style.cellPadding.hasTopPad) {\n          height += this.style.cellPadding.top;\n        }\n\n        if (typeof this.style.cellPadding.bottom !== 'undefined' && this.style.cellPadding.hasBottomPad) {\n          height += this.style.cellPadding.bottom;\n        }\n      }\n    }\n\n    height += this.row.grid.style.cellSpacing;\n    return height;\n  };\n  /**\n   * return the calculated `width` of the cell.\n   * @private\n   */\n\n\n  PdfGridCell.prototype.calculateWidth = function () {\n    var cellIndex = this.row.cells.indexOf(this);\n    var rowindex = this.row.grid.rows.rowCollection.indexOf(this.row);\n    var columnSpan = this.columnSpan;\n    var width = 0;\n\n    if (columnSpan === 1) {\n      for (var i = 0; i < columnSpan; i++) {\n        width += this.row.grid.columns.getColumn(cellIndex + i).width;\n      }\n    } else if (columnSpan > 1) {\n      for (var i = 0; i < columnSpan; i++) {\n        width += this.row.grid.columns.getColumn(cellIndex + i).width;\n\n        if (i + 1 < columnSpan) {\n          this.row.cells.getCell(cellIndex + i + 1).hasColSpan = true;\n        }\n      }\n    }\n\n    if (this.parent != null && this.parent.row.width > 0) {\n      if (this.row.grid.isChildGrid && this.parent != null && this.row.width > this.parent.row.width) {\n        width = 0;\n\n        for (var j = 0; j < this.parent.columnSpan; j++) {\n          width += this.parent.row.grid.columns.getColumn(j).width;\n        }\n\n        width = width / this.row.cells.count;\n      }\n    }\n\n    return width;\n  };\n\n  return PdfGridCell;\n}();\n\nexport { PdfGridCell };\n/**\n * `PdfGridCellCollection` class provides access to an ordered,\n * strongly typed collection of 'PdfGridCell' objects.\n * @private\n */\n\nvar PdfGridCellCollection =\n/** @class */\nfunction () {\n  //Constructor\n\n  /**\n   * Initializes a new instance of the `PdfGridCellCollection` class with the row.\n   * @private\n   */\n  function PdfGridCellCollection(row) {\n    /**\n     * @hidden\n     * @private\n     */\n    this.cells = [];\n    this.gridRow = row;\n  } //Properties\n\n  /**\n   * Gets the current `cell`.\n   * @private\n   */\n\n\n  PdfGridCellCollection.prototype.getCell = function (index) {\n    if (index < 0 || index >= this.count) {\n      throw new Error('IndexOutOfRangeException');\n    }\n\n    return this.cells[index];\n  };\n\n  Object.defineProperty(PdfGridCellCollection.prototype, \"count\", {\n    /**\n     * Gets the cells `count`.[Read-Only].\n     * @private\n     */\n    get: function get() {\n      return this.cells.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfGridCellCollection.prototype.add = function (cell) {\n    if (typeof cell === 'undefined') {\n      var tempcell = new PdfGridCell();\n      this.add(tempcell);\n      return cell;\n    } else {\n      cell.row = this.gridRow;\n      this.cells.push(cell);\n    }\n  };\n  /**\n   * Returns the `index of` a particular cell in the collection.\n   * @private\n   */\n\n\n  PdfGridCellCollection.prototype.indexOf = function (cell) {\n    return this.cells.indexOf(cell);\n  };\n\n  return PdfGridCellCollection;\n}();\n\nexport { PdfGridCellCollection };","map":{"version":3,"names":["PdfGrid","PdfGridCellStyle","PdfStringLayouter","PdfDocument","PdfStringFormat","RectangleF","PointF","SizeF","PdfDashStyle","PdfLineCap","PdfBorderOverlapStyle","PdfSolidBrush","PdfColor","PdfImage","PdfBitmap","PdfTextWebLink","PdfLayoutType","PdfGridLayouter","PdfGridLayoutFormat","PdfLayoutParams","PdfGridCell","row","cellWidth","cellHeight","tempval","fontSpilt","finsh","rowSpanRemainingHeight","hasRowSpan","hasColSpan","isFinish","present","gridRowSpan","colSpan","gridRow","Object","defineProperty","prototype","get","internalIsCellMergeContinue","set","value","enumerable","configurable","internalIsRowMergeContinue","internalIsCellMergeStart","internalIsRowMergeStart","remaining","format","objectValue","grid","isSingleGrid","ParentCell","isChildGrid","rowCount","rows","count","i","getRow","colCount","cells","j","cell","getCell","parent","Error","rowSpanExists","hasRowSpanSpan","cellStyle","measureHeight","columnSpanExists","isComplete","measureWidth","Math","round","width","layouter","slr","layout","getTextFont","stringFormat","Number","MAX_VALUE","actualSize","style","borders","left","right","size","webLink","result","text","font","cellPadding","hasLeftPad","hasRightPad","cellSpacing","drawCellBackground","graphics","bounds","backgroundBrush","getBackgroundBrush","save","drawRectangle","x","y","height","restore","backgroundImage","image","getBackgroundImage","drawImage","adjustContentLayoutArea","returnBounds","top","bottom","rowSpan","hasTopPad","hasBottomPad","draw","cancelSubsequentSpans","isrowbreak","allowHorizontalOverflow","rowOverflowIndex","indexOf","adjustOuterLayoutArea","textPen","getTextPen","textBrush","getTextBrush","strFormat","getStringFormat","innerLayoutArea","clientSize","allowRowBreakAcrossPages","temp","layoutRectangle","splitChildRowIndex","rowFontSplit","drawString","repeatFlag","stringLayoutResult","childGrid","layoutRect","LayoutFormat","Paginate","param","layer","page","setSpan","checkSpan","childGridResult","Layouter","rowBreakHeightValue","rowBreakHeight","NestedGridLayoutResult","imageBounds","currentPage","drawCellBorders","borderOverlapStyle","Inside","p1","p2","pen","dashStyle","Solid","lineCap","Square","drawLine","g","isHeader","currentColIndex","columnSpan","isCellMergeContinue","span","columns","totalWidth","compWidth","getColumn","currentRowIndex","rowCollection","headers","totalHeight","max","getHeader","rowIndex","cellIndex","rowMergeComplete","defaultFont","calculateWidth","currentValue","internalWidth","tempWidth","rowindex","PdfGridCellCollection","index","length","add","tempcell","push"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/pdf-grid-cell.js"],"sourcesContent":["import { PdfGrid } from './pdf-grid';\nimport { PdfGridCellStyle } from './styles/style';\nimport { PdfStringLayouter } from './../../graphics/fonts/string-layouter';\nimport { PdfDocument } from './../../document/pdf-document';\nimport { PdfStringFormat } from './../../graphics/fonts/pdf-string-format';\nimport { RectangleF, PointF, SizeF } from './../../drawing/pdf-drawing';\nimport { PdfDashStyle, PdfLineCap } from './../../graphics/enum';\nimport { PdfBorderOverlapStyle } from './../tables/light-tables/enum';\nimport { PdfSolidBrush } from './../../graphics/brushes/pdf-solid-brush';\nimport { PdfColor } from './../../graphics/pdf-color';\nimport { PdfImage } from './../../graphics/images/pdf-image';\nimport { PdfBitmap } from './../../graphics/images/pdf-bitmap';\nimport { PdfTextWebLink } from './../../annotations/pdf-text-web-link';\nimport { PdfLayoutType } from './../../graphics/figures/enum';\nimport { PdfGridLayouter, PdfGridLayoutFormat } from './../../structured-elements/grid/layout/grid-layouter';\nimport { PdfLayoutParams } from '../../../implementation/graphics/figures/base/element-layouter';\n/**\n * `PdfGridCell` class represents the schema of a cell in a 'PdfGrid'.\n */\nvar PdfGridCell = /** @class */ (function () {\n    function PdfGridCell(row) {\n        /**\n         * `Width` of the cell.\n         * @default 0\n         * @private\n         */\n        this.cellWidth = 0;\n        /**\n         * `Height` of the cell.\n         * @default 0\n         * @private\n         */\n        this.cellHeight = 0;\n        /**\n         * `tempval`to stores current width .\n         * @default 0\n         * @private\n         */\n        this.tempval = 0;\n        this.fontSpilt = false;\n        /**\n         * Specifies weather the `cell is drawn`.\n         * @default true\n         * @private\n         */\n        this.finsh = true;\n        /**\n         * The `remaining height` of row span.\n         * @default 0\n         * @private\n         */\n        this.rowSpanRemainingHeight = 0;\n        this.hasRowSpan = false;\n        this.hasColSpan = false;\n        /**\n         * the 'isFinish' is set to page finish\n         */\n        this.isFinish = true;\n        /**\n         * The `present' to store the current cell.\n         * @default false\n         * @private\n         */\n        this.present = false;\n        this.gridRowSpan = 1;\n        this.colSpan = 1;\n        if (typeof row !== 'undefined') {\n            this.gridRow = row;\n        }\n    }\n    Object.defineProperty(PdfGridCell.prototype, \"isCellMergeContinue\", {\n        //Properties\n        get: function () {\n            return this.internalIsCellMergeContinue;\n        },\n        set: function (value) {\n            this.internalIsCellMergeContinue = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"isRowMergeContinue\", {\n        get: function () {\n            return this.internalIsRowMergeContinue;\n        },\n        set: function (value) {\n            this.internalIsRowMergeContinue = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"isCellMergeStart\", {\n        get: function () {\n            return this.internalIsCellMergeStart;\n        },\n        set: function (value) {\n            this.internalIsCellMergeStart = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"isRowMergeStart\", {\n        get: function () {\n            return this.internalIsRowMergeStart;\n        },\n        set: function (value) {\n            this.internalIsRowMergeStart = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"remainingString\", {\n        /**\n         * Gets or sets the `remaining string` after the row split between pages.\n         * @private\n         */\n        get: function () {\n            return this.remaining;\n        },\n        set: function (value) {\n            this.remaining = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"FinishedDrawingCell\", {\n        /**\n         * Gets or sets the `FinishedDrawingCell` .\n         * @private\n         */\n        get: function () {\n            return this.isFinish;\n        },\n        set: function (value) {\n            this.isFinish = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"stringFormat\", {\n        /**\n         * Gets or sets the `string format`.\n         * @private\n         */\n        get: function () {\n            if (this.format == null) {\n                this.format = new PdfStringFormat();\n            }\n            return this.format;\n        },\n        set: function (value) {\n            this.format = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"row\", {\n        /**\n         * Gets or sets the parent `row`.\n         * @private\n         */\n        get: function () {\n            return this.gridRow;\n        },\n        set: function (value) {\n            this.gridRow = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"value\", {\n        /**\n         * Gets or sets the `value` of the cell.\n         * @private\n         */\n        get: function () {\n            return this.objectValue;\n        },\n        set: function (value) {\n            this.objectValue = value;\n            if (this.objectValue instanceof PdfGrid) {\n                this.row.grid.isSingleGrid = false;\n                var grid = this.objectValue;\n                grid.ParentCell = this;\n                this.objectValue.isChildGrid = true;\n                var rowCount = this.row.grid.rows.count;\n                for (var i = 0; i < rowCount; i++) {\n                    var row = this.row.grid.rows.getRow(i);\n                    var colCount = row.cells.count;\n                    for (var j = 0; j < colCount; j++) {\n                        var cell = row.cells.getCell(j);\n                        cell.parent = this;\n                    }\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"rowSpan\", {\n        /**\n         * Gets or sets a value that indicates the total number of rows that cell `spans` within a PdfGrid.\n         * @private\n         */\n        get: function () {\n            return this.gridRowSpan;\n        },\n        set: function (value) {\n            if (value < 1) {\n                throw new Error('ArgumentException : Invalid span specified, must be greater than or equal to 1');\n            }\n            else {\n                this.gridRowSpan = value;\n                this.row.rowSpanExists = true;\n                this.row.grid.hasRowSpanSpan = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"style\", {\n        /**\n         * Gets or sets the cell `style`.\n         * @private\n         */\n        get: function () {\n            if (this.cellStyle == null) {\n                this.cellStyle = new PdfGridCellStyle();\n            }\n            return this.cellStyle;\n        },\n        set: function (value) {\n            this.cellStyle = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"height\", {\n        /**\n         * Gets the `height` of the PdfGrid cell.[Read-Only].\n         * @private\n         */\n        get: function () {\n            if (this.cellHeight === 0) {\n                this.cellHeight = this.measureHeight();\n            }\n            return this.cellHeight;\n        },\n        set: function (value) {\n            this.cellHeight = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"columnSpan\", {\n        /**\n         * Gets or sets a value that indicates the total number of columns that cell `spans` within a PdfGrid.\n         * @private\n         */\n        get: function () {\n            return this.colSpan;\n        },\n        set: function (value) {\n            if (value < 1) {\n                throw Error('Invalid span specified, must be greater than or equal to 1');\n            }\n            else {\n                this.colSpan = value;\n                this.row.columnSpanExists = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"width\", {\n        /**\n         * Gets the `width` of the PdfGrid cell.[Read-Only].\n         * @private\n         */\n        get: function () {\n            if (this.cellWidth === 0 || this.row.grid.isComplete) {\n                this.cellWidth = this.measureWidth();\n            }\n            return Math.round(this.cellWidth);\n        },\n        set: function (value) {\n            this.cellWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Implementation\n    /**\n     * `Calculates the width`.\n     * @private\n     */\n    PdfGridCell.prototype.measureWidth = function () {\n        // .. Calculate the cell text width.\n        // .....Add border widths, cell spacings and paddings to the width.\n        var width = 0;\n        var layouter = new PdfStringLayouter();\n        if (typeof this.objectValue === 'string') {\n            /* tslint:disable */\n            var slr = layouter.layout(this.objectValue, this.getTextFont(), this.stringFormat, new SizeF(Number.MAX_VALUE, Number.MAX_VALUE), false, new SizeF(0, 0));\n            width += slr.actualSize.width;\n            width += (this.style.borders.left.width + this.style.borders.right.width) * 2;\n        }\n        else if (this.objectValue instanceof PdfGrid) {\n            width = this.objectValue.size.width;\n            //width += this.objectValue.style.cellSpacing;\n        }\n        else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {\n            width += this.objectValue.width;\n        }\n        else if (this.objectValue instanceof PdfTextWebLink) {\n            var webLink = this.objectValue;\n            var result = layouter.layout(webLink.text, webLink.font, webLink.stringFormat, new SizeF(0, 0), false, new SizeF(0, 0));\n            /* tslint:enable */\n            width += result.actualSize.width;\n            width += (this.style.borders.left.width + this.style.borders.right.width) * 2;\n        }\n        if (!(this.objectValue instanceof PdfGrid)) {\n            if (this.style.cellPadding != null) {\n                width += (this.style.cellPadding.left + this.style.cellPadding.right);\n            }\n            else {\n                width += (this.row.grid.style.cellPadding.left + this.row.grid.style.cellPadding.right);\n            }\n        }\n        else {\n            if (this.style.cellPadding != null || typeof this.style.cellPadding !== 'undefined') {\n                if (typeof this.style.cellPadding.left !== 'undefined' && this.style.cellPadding.hasLeftPad) {\n                    width += this.style.cellPadding.left;\n                }\n                if (typeof this.style.cellPadding.right !== 'undefined' && this.style.cellPadding.hasRightPad) {\n                    width += this.style.cellPadding.right;\n                }\n            }\n            else {\n                if (typeof this.row.grid.style.cellPadding.left !== 'undefined' && this.row.grid.style.cellPadding.hasLeftPad) {\n                    width += this.row.grid.style.cellPadding.left;\n                }\n                if (typeof this.row.grid.style.cellPadding.right !== 'undefined' && this.row.grid.style.cellPadding.hasRightPad) {\n                    width += this.row.grid.style.cellPadding.right;\n                }\n            }\n        }\n        width += this.row.grid.style.cellSpacing;\n        return width;\n    };\n    /**\n     * Draw the `cell background`.\n     * @private\n     */\n    PdfGridCell.prototype.drawCellBackground = function (graphics, bounds) {\n        var backgroundBrush = this.getBackgroundBrush();\n        //graphics.isTemplateGraphics = true;\n        if (backgroundBrush != null) {\n            graphics.save();\n            graphics.drawRectangle(backgroundBrush, bounds.x, bounds.y, bounds.width, bounds.height);\n            graphics.restore();\n        }\n        if (this.style.backgroundImage != null) {\n            var image = this.getBackgroundImage();\n            graphics.drawImage(this.style.backgroundImage, bounds.x, bounds.y, bounds.width, bounds.height);\n        }\n    };\n    /**\n     * `Adjusts the text layout area`.\n     * @private\n     */\n    /* tslint:disable */\n    PdfGridCell.prototype.adjustContentLayoutArea = function (bounds) {\n        //Add Padding value to its Cell Bounds\n        var returnBounds = new RectangleF(bounds.x, bounds.y, bounds.width, bounds.height);\n        if (!(this.objectValue instanceof PdfGrid)) {\n            if (typeof this.style.cellPadding === 'undefined' || this.style.cellPadding == null) {\n                returnBounds.x += this.gridRow.grid.style.cellPadding.left + this.cellStyle.borders.left.width;\n                returnBounds.y += this.gridRow.grid.style.cellPadding.top + this.cellStyle.borders.top.width;\n                returnBounds.width -= (this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left);\n                returnBounds.height -= (this.gridRow.grid.style.cellPadding.bottom + this.gridRow.grid.style.cellPadding.top);\n                returnBounds.height -= (this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width);\n            }\n            else {\n                returnBounds.x += this.style.cellPadding.left + this.cellStyle.borders.left.width;\n                returnBounds.y += this.style.cellPadding.top + this.cellStyle.borders.top.width;\n                returnBounds.width -= (this.style.cellPadding.right + this.style.cellPadding.left);\n                returnBounds.width -= (this.cellStyle.borders.left.width + this.cellStyle.borders.right.width);\n                returnBounds.height -= (this.style.cellPadding.bottom + this.style.cellPadding.top);\n                returnBounds.height -= (this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width);\n                if (this.rowSpan === 1) {\n                    returnBounds.width -= (this.style.borders.left.width);\n                }\n            }\n        }\n        else {\n            if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n                if (typeof this.gridRow.grid.style.cellPadding.left !== 'undefined' && this.gridRow.grid.style.cellPadding.hasLeftPad) {\n                    returnBounds.x += this.gridRow.grid.style.cellPadding.left + this.cellStyle.borders.left.width;\n                    returnBounds.width -= this.gridRow.grid.style.cellPadding.left;\n                }\n                if (typeof this.gridRow.grid.style.cellPadding.top !== 'undefined' && this.gridRow.grid.style.cellPadding.hasTopPad) {\n                    returnBounds.y += this.gridRow.grid.style.cellPadding.top + this.cellStyle.borders.top.width;\n                    returnBounds.height -= this.gridRow.grid.style.cellPadding.top;\n                }\n                if (typeof this.gridRow.grid.style.cellPadding.right !== 'undefined' && this.gridRow.grid.style.cellPadding.hasRightPad) {\n                    returnBounds.width -= this.gridRow.grid.style.cellPadding.right;\n                }\n                if (typeof this.gridRow.grid.style.cellPadding.bottom !== 'undefined' && this.gridRow.grid.style.cellPadding.hasBottomPad) {\n                    returnBounds.height -= this.gridRow.grid.style.cellPadding.bottom;\n                }\n            }\n            else {\n                if (typeof this.style.cellPadding.left !== 'undefined' && this.style.cellPadding.hasLeftPad) {\n                    returnBounds.x += this.style.cellPadding.left + this.cellStyle.borders.left.width;\n                    returnBounds.width -= this.style.cellPadding.left;\n                }\n                if (typeof this.style.cellPadding.top !== 'undefined' && this.style.cellPadding.hasTopPad) {\n                    returnBounds.y += this.style.cellPadding.top + this.cellStyle.borders.top.width;\n                    returnBounds.height -= this.style.cellPadding.top;\n                }\n                if (typeof this.style.cellPadding.right !== 'undefined' && this.style.cellPadding.hasRightPad) {\n                    returnBounds.width -= this.style.cellPadding.right;\n                }\n                if (typeof this.style.cellPadding.bottom !== 'undefined' && this.style.cellPadding.hasBottomPad) {\n                    returnBounds.height -= this.style.cellPadding.bottom;\n                }\n            }\n            returnBounds.width -= (this.cellStyle.borders.left.width + this.cellStyle.borders.right.width);\n            returnBounds.height -= (this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width);\n        }\n        return returnBounds;\n    };\n    /**\n     * `Draws` the specified graphics.\n     * @private\n     */\n    PdfGridCell.prototype.draw = function (graphics, bounds, cancelSubsequentSpans) {\n        var isrowbreak = false;\n        /*if (!this.row.grid.isSingleGrid)\n        {\n            //Check whether the Grid Span to Nextpage\n            if ((this.remainingString != null) || (PdfGridLayouter.repeatRowIndex != -1))\n            {\n                this.DrawParentCells(graphics, bounds, true);\n            }\n            else if (this.row.grid.rows.count > 1)\n            {\n                for (let i : number  = 0; i < this.row.grid.rows.count; i++)\n                {\n                    if (this.row == this.row.grid.rows.getRow(i))\n                    {\n                        if (this.row.grid.rows.getRow(i).rowBreakHeight > 0)\n                            isrowbreak = true;\n                        if ((i > 0) && (isrowbreak))\n                            this.DrawParentCells(graphics, bounds, false);\n                    }\n                }\n            }\n        } */\n        var result = null;\n        /*if (cancelSubsequentSpans)\n        {\n            //..Cancel all subsequent cell spans, if no space exists.\n            let currentCellIndex : number = this.row.cells.indexOf(this);\n            for (let i : number = currentCellIndex + 1; i <= currentCellIndex + this.colSpan; i++)\n            {\n                this.row.cells.getCell(i).isCellMergeContinue = false;\n                this.row.cells.getCell(i).isRowMergeContinue = false;\n            }\n            this.colSpan = 1;\n        }*/\n        //..Skip cells which were already covered by spanmap.\n        if (this.internalIsCellMergeContinue || this.internalIsRowMergeContinue) {\n            if (this.internalIsCellMergeContinue && this.row.grid.style.allowHorizontalOverflow) {\n                if ((this.row.rowOverflowIndex > 0 && (this.row.cells.indexOf(this) != this.row.rowOverflowIndex + 1)) || (this.row.rowOverflowIndex == 0 && this.internalIsCellMergeContinue)) {\n                    return result;\n                }\n            }\n            else {\n                return result;\n            }\n        }\n        //Adjust bounds with Row and Column Spacing\n        bounds = this.adjustOuterLayoutArea(bounds, graphics);\n        this.drawCellBackground(graphics, bounds);\n        var textPen = this.getTextPen();\n        var textBrush = this.getTextBrush();\n        if (typeof textPen === 'undefined' && typeof textBrush === 'undefined') {\n            textBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n        }\n        var font = this.getTextFont();\n        var strFormat = this.getStringFormat();\n        var innerLayoutArea = bounds;\n        if (innerLayoutArea.height >= graphics.clientSize.height) {\n            // If to break row to next page.\n            if (this.row.grid.allowRowBreakAcrossPages) {\n                innerLayoutArea.height -= innerLayoutArea.y;\n                //bounds.height -= bounds.y;\n                // if(this.row.grid.isChildGrid)\n                // {\n                //     innerLayoutArea.height -= this.row.grid.ParentCell.row.grid.style.cellPadding.bottom;\n                // }\n            }\n            // if user choose to cut the row whose height is more than page height.\n            // else\n            // {\n            //     innerLayoutArea.height = graphics.clientSize.height;\n            //     bounds.height = graphics.clientSize.height;\n            // }\n        }\n        innerLayoutArea = this.adjustContentLayoutArea(innerLayoutArea);\n        if (typeof this.objectValue === 'string' || typeof this.remaining === 'string') {\n            var temp = void 0;\n            var layoutRectangle = void 0;\n            if (innerLayoutArea.height < font.height)\n                layoutRectangle = new RectangleF(innerLayoutArea.x, innerLayoutArea.y, innerLayoutArea.width, font.height);\n            else\n                layoutRectangle = innerLayoutArea;\n            if (innerLayoutArea.height < font.height && this.row.grid.isChildGrid && this.row.grid.ParentCell != null) {\n                var height = layoutRectangle.height - this.row.grid.ParentCell.row.grid.style.cellPadding.bottom - this.row.grid.style.cellPadding.bottom;\n                if (this.row.grid.splitChildRowIndex != -1) {\n                    this.fontSpilt = true;\n                    this.row.rowFontSplit = true;\n                }\n                if (height > 0 && height < font.height)\n                    layoutRectangle.height = height;\n                // else if (height + this.row.grid.style.cellPadding.bottom > 0 && height + this.row.grid.style.cellPadding.bottom < font.height)\n                //     layoutRectangle.height = height + this.row.grid.style.cellPadding.bottom;\n                // else if (bounds.height < font.height)\n                //     layoutRectangle.height = bounds.height;\n                // else if (bounds.height - this.row.grid.ParentCell.row.grid.style.cellPadding.bottom < font.height)\n                //     layoutRectangle.height = bounds.height - this.row.grid.ParentCell.row.grid.style.cellPadding.bottom;                        \n            }\n            if (this.gridRow.grid.style.cellSpacing != 0) {\n                layoutRectangle.width -= this.gridRow.grid.style.cellSpacing;\n                bounds.width -= this.gridRow.grid.style.cellSpacing;\n            }\n            if (this.isFinish) {\n                // if (this.row.grid.splitChildRowIndex != -1 && !this.row.grid.isChildGrid && typeof this.remaining === 'undefined'){\n                //     this.remaining = '';\n                //     graphics.drawString(this.remaining, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n                // } else {\n                temp = this.remaining === '' ? this.remaining : this.objectValue;\n                graphics.drawString(temp, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n                if (this.row.grid.splitChildRowIndex != -1 && !this.row.grid.isChildGrid && typeof this.remaining === 'undefined') {\n                    this.remaining = '';\n                    //graphics.drawString(this.remaining, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n                }\n            }\n            else {\n                if (typeof this.remaining == 'undefined' || this.remaining === null) {\n                    this.remaining = '';\n                }\n                if (this.row.repeatFlag) {\n                    graphics.drawString(this.remaining, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n                }\n                //  else {\n                //     if(this.row.grid.ParentCell.row.repeatFlag) {\n                //         graphics.drawString((this.remaining as string), font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);                    \n                //     } else {\n                //         layoutRectangle.height = this.row.height;\n                //         graphics.drawString((this.objectValue as string), font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n                //         bounds.height = this.row.height;\n                //     }\n                //  }\n                this.isFinish = true;\n                //graphics.drawString((this.remaining as string), font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n            }\n            result = graphics.stringLayoutResult;\n            // if(this.row.grid.isChildGrid && this.row.rowBreakHeight > 0 && result !=null) {\n            //     bounds.height -= this.row.grid.ParentCell.row.grid.style.cellPadding.bottom;\n            // }\n        }\n        else if (this.objectValue instanceof PdfGrid) {\n            var childGrid = this.objectValue;\n            childGrid.isChildGrid = true;\n            childGrid.ParentCell = this;\n            var layoutRect = void 0;\n            layoutRect = innerLayoutArea;\n            if (this.gridRow.grid.style.cellSpacing != 0) {\n                bounds.width -= this.gridRow.grid.style.cellSpacing;\n            }\n            // layoutRect = bounds;\n            // if (this.style.cellPadding != null){\n            //     layoutRect = bounds;            \n            // } else if((this.row.grid.style.cellPadding != null) && (childGrid.style.cellPadding.bottom === 0.5) && (childGrid.style.cellPadding.top === 0.5)\n            //                               && (childGrid.style.cellPadding.left === 5.76) && (childGrid.style.cellPadding.right === 5.76)\n            //                               && (this.gridRow.grid.style.cellSpacing === 0) && (childGrid.style.cellSpacing === 0)) {\n            //     layoutRect = innerLayoutArea;\n            // }\n            // if(this.objectValue.style.cellPadding != null && typeof this.objectValue.style.cellPadding !== 'undefined'){\n            //     layoutRect = bounds;\n            // }           \n            var layouter = new PdfGridLayouter(childGrid);\n            var format = new PdfGridLayoutFormat();\n            if (this.row.grid.LayoutFormat != null)\n                format = this.row.grid.LayoutFormat;\n            else\n                format.layout = PdfLayoutType.Paginate;\n            var param = new PdfLayoutParams();\n            if (graphics.layer != null) {\n                // Define layout parameters.\n                param.page = graphics.page;\n                param.bounds = layoutRect;\n                param.format = format;\n                //Set the span \n                childGrid.setSpan();\n                childGrid.checkSpan();\n                // Draw the child grid.\n                var childGridResult = layouter.Layouter(param);\n                //let childGridResult : PdfLayoutResult = layouter.innerLayout(param);\n                this.value = childGrid;\n                if (this.row.grid.splitChildRowIndex !== -1) {\n                    this.height = this.row.rowBreakHeightValue;\n                }\n                if (param.page != childGridResult.page) //&& (isWidthGreaterthanParent != true))\n                 {\n                    childGridResult.bounds.height = this.row.rowBreakHeightValue;\n                    if (this.row.rowBreakHeight == 0)\n                        this.row.NestedGridLayoutResult = childGridResult;\n                    else\n                        this.row.rowBreakHeight = this.row.rowBreakHeightValue;\n                    //bounds.height = this.row.rowBreakHeight;\n                    //After drawing paginated nested grid, the bounds of the parent grid in start page should be corrected for borders.\n                    //bounds.height = graphics.clientSize.height - bounds.y;\n                }\n            }\n        }\n        else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {\n            var imageBounds = void 0;\n            if (this.objectValue.width <= innerLayoutArea.width) {\n                imageBounds = new RectangleF(innerLayoutArea.x, innerLayoutArea.y, this.objectValue.width, innerLayoutArea.height);\n            }\n            else {\n                imageBounds = innerLayoutArea;\n            }\n            graphics.drawImage(this.objectValue, imageBounds.x, imageBounds.y, imageBounds.width, imageBounds.height);\n        }\n        else if (this.objectValue instanceof PdfTextWebLink) {\n            this.objectValue.draw(graphics.currentPage, innerLayoutArea);\n        }\n        else if (typeof this.objectValue === 'undefined') {\n            this.objectValue = \"\";\n            graphics.drawString(this.objectValue, font, textPen, textBrush, innerLayoutArea.x, innerLayoutArea.y, innerLayoutArea.width, innerLayoutArea.height, strFormat);\n            if (this.style.cellPadding != null && this.style.cellPadding.bottom == 0 && this.style.cellPadding.left == 0 && this.style.cellPadding.right == 0 && this.style.cellPadding.top == 0) {\n                bounds.width -= (this.style.borders.left.width + this.style.borders.right.width);\n            }\n            if (this.gridRow.grid.style.cellSpacing != 0) {\n                bounds.width -= this.gridRow.grid.style.cellSpacing;\n            }\n        }\n        if (this.style.borders != null) {\n            if (!this.fontSpilt)\n                this.drawCellBorders(graphics, bounds);\n            else {\n                if (this.row.grid.ParentCell.row.grid.splitChildRowIndex != -1) {\n                    this.row.rowFontSplit = false;\n                    this.drawCellBorders(graphics, bounds);\n                }\n            }\n        }\n        return result;\n    };\n    /* tslint:enable */\n    /**\n     * Draws the `cell border` constructed by drawing lines.\n     * @private\n     */\n    PdfGridCell.prototype.drawCellBorders = function (graphics, bounds) {\n        if (this.row.grid.style.borderOverlapStyle === PdfBorderOverlapStyle.Inside) {\n            bounds.x += this.style.borders.left.width;\n            bounds.y += this.style.borders.top.width;\n            bounds.width -= this.style.borders.right.width;\n            bounds.height -= this.style.borders.bottom.width;\n        }\n        var p1 = new PointF(bounds.x, bounds.y + bounds.height);\n        var p2 = new PointF(bounds.x, bounds.y);\n        var pen = this.cellStyle.borders.left;\n        if (this.cellStyle.borders.left.dashStyle === PdfDashStyle.Solid) {\n            pen.lineCap = PdfLineCap.Square;\n        }\n        // SetTransparency(ref graphics, pen);\n        if (pen.width !== 0) {\n            graphics.drawLine(pen, p1, p2);\n        }\n        p1 = new PointF(bounds.x + bounds.width, bounds.y);\n        p2 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height);\n        pen = this.cellStyle.borders.right;\n        if ((bounds.x + bounds.width) > (graphics.clientSize.width - (pen.width / 2))) {\n            p1 = new PointF(graphics.clientSize.width - (pen.width / 2), bounds.y);\n            p2 = new PointF(graphics.clientSize.width - (pen.width / 2), bounds.y + bounds.height);\n        }\n        if (this.cellStyle.borders.right.dashStyle === PdfDashStyle.Solid) {\n            pen.lineCap = PdfLineCap.Square;\n        }\n        if (pen.width !== 0) {\n            graphics.drawLine(pen, p1, p2);\n        }\n        p1 = new PointF(bounds.x, bounds.y);\n        p2 = new PointF(bounds.x + bounds.width, bounds.y);\n        pen = this.cellStyle.borders.top;\n        if (this.cellStyle.borders.top.dashStyle === PdfDashStyle.Solid) {\n            pen.lineCap = PdfLineCap.Square;\n        }\n        if (pen.width !== 0) {\n            graphics.drawLine(pen, p1, p2);\n        }\n        p1 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height);\n        p2 = new PointF(bounds.x, bounds.y + bounds.height);\n        pen = this.cellStyle.borders.bottom;\n        if ((bounds.y + bounds.height) > (graphics.clientSize.height - (pen.width / 2))) {\n            p1 = new PointF((bounds.x + bounds.width), (graphics.clientSize.height - (pen.width / 2)));\n            p2 = new PointF(bounds.x, (graphics.clientSize.height - (pen.width / 2)));\n        }\n        if (this.cellStyle.borders.bottom.dashStyle === PdfDashStyle.Solid) {\n            pen.lineCap = PdfLineCap.Square;\n        }\n        if (pen.width !== 0) {\n            graphics.drawLine(pen, p1, p2);\n        }\n    };\n    // private setTransparency(graphics : PdfGraphics, pen : PdfPen) : void {\n    //     let alpha : number = (pen.color.a / 255)as number;\n    //     graphics.save();\n    //     graphics.setTransparency(alpha);\n    // }\n    /**\n     * `Adjusts the outer layout area`.\n     * @private\n     */\n    /* tslint:disable */\n    PdfGridCell.prototype.adjustOuterLayoutArea = function (bounds, g) {\n        var isHeader = false;\n        var cellSpacing = this.row.grid.style.cellSpacing;\n        if (cellSpacing > 0) {\n            bounds = new RectangleF(bounds.x + cellSpacing, bounds.y + cellSpacing, bounds.width - cellSpacing, bounds.height - cellSpacing);\n        }\n        var currentColIndex = this.row.cells.indexOf(this);\n        if (this.columnSpan > 1 || (this.row.rowOverflowIndex > 0 && (currentColIndex == this.row.rowOverflowIndex + 1) && this.isCellMergeContinue)) {\n            var span = this.columnSpan;\n            if (span == 1 && this.isCellMergeContinue) {\n                for (var j = currentColIndex + 1; j < this.row.grid.columns.count; j++) {\n                    if (this.row.cells.getCell(j).isCellMergeContinue)\n                        span++;\n                    else\n                        break;\n                }\n            }\n            var totalWidth = 0;\n            for (var i = currentColIndex; i < currentColIndex + span; i++) {\n                if (this.row.grid.style.allowHorizontalOverflow) {\n                    var width = void 0;\n                    var compWidth = this.row.grid.size.width < g.clientSize.width ? this.row.grid.size.width : g.clientSize.width;\n                    if (this.row.grid.size.width > g.clientSize.width) {\n                        width = bounds.x + totalWidth + this.row.grid.columns.getColumn(i).width;\n                    }\n                    else {\n                        width = totalWidth + this.row.grid.columns.getColumn(i).width;\n                    }\n                    if (width > compWidth) {\n                        break;\n                    }\n                }\n                totalWidth += this.row.grid.columns.getColumn(i).width;\n            }\n            totalWidth -= this.row.grid.style.cellSpacing;\n            bounds.width = totalWidth;\n        }\n        if (this.rowSpan > 1 || this.row.rowSpanExists) {\n            var span = this.rowSpan;\n            var currentRowIndex = this.row.grid.rows.rowCollection.indexOf(this.row);\n            if (currentRowIndex == -1) {\n                currentRowIndex = this.row.grid.headers.indexOf(this.row);\n                if (currentRowIndex != -1) {\n                    isHeader = true;\n                }\n            }\n            // if (span == 1 && this.isCellMergeContinue) {\n            //         for (let j : number = currentRowIndex + 1; j < this.row.grid.rows.count; j++)\n            //         {\n            //             let flag : boolean = (isHeader ? this.row.grid.headers.getHeader(j).cells.getCell(currentColIndex).isCellMergeContinue : this.row.grid.rows.getRow(j).cells.getCell(currentColIndex).isCellMergeContinue);\n            //             if (flag)\n            //                 span++;\n            //             else\n            //                 break;\n            //         }\n            // }\n            var totalHeight = 0;\n            var max = 0;\n            for (var i = currentRowIndex; i < currentRowIndex + span; i++) {\n                totalHeight += (isHeader ? this.row.grid.headers.getHeader(i).height : this.row.grid.rows.getRow(i).height);\n                var row = this.row.grid.rows.getRow(i);\n                var rowIndex = this.row.grid.rows.rowCollection.indexOf(row);\n                /*if (this.rowSpan > 1)\n                    {\n                        for (let k : number = 0; k < this.row.cells.count; k++) {\n                            let cell : PdfGridCell = this.row.cells.getCell(k);\n                            if(cell.rowSpan>1)\n                            {\n                                let tempHeight : number =0;\n                                \n                                for (let j :number = i; j < i +cell.rowSpan; j++)\n                                {\n                                    if (!this.row.grid.rows.getRow(j).isRowSpanRowHeightSet)\n                                        this.row.grid.rows.getRow(j).isRowHeightSet = false;\n                                    tempHeight += this.row.grid.rows.getRow(j).height;\n                                    if (!this.row.grid.rows.getRow(j).isRowSpanRowHeightSet)\n                                        this.row.grid.rows.getRow(j).isRowHeightSet = true;\n                                }\n                                //To check the Row spanned cell height is greater than the total spanned row height.\n                                if(cell.height>tempHeight)\n                                {\n                                    if (max < (cell.height - tempHeight))\n                                    {\n                                        max = cell.height - tempHeight;\n                                        if (this.rowSpanRemainingHeight != 0 && max > this.rowSpanRemainingHeight)\n                                        {\n                                            max += this.rowSpanRemainingHeight;\n                                        }\n                                        let index :number = row.cells.indexOf(cell);\n                                        //set the m_rowspanRemainingHeight to last rowspanned row.\n                                        this.row.grid.rows.getRow((rowIndex +cell.rowSpan) - 1).cells.getCell(index).rowSpanRemainingHeight = max;\n                                        this.rowSpanRemainingHeight = this.row.grid.rows.getRow((rowIndex + cell.rowSpan) - 1).cells.getCell(index).rowSpanRemainingHeight;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (!this.row.grid.rows.getRow(i).isRowSpanRowHeightSet)\n                    this.row.grid.rows.getRow(i).isRowHeightSet = true;*/\n            }\n            var cellIndex = this.row.cells.indexOf(this);\n            totalHeight -= this.row.grid.style.cellSpacing;\n            // if (this.row.cells.getCell(cellIndex).height > totalHeight && (!this.row.grid.rows.getRow((currentRowIndex + span) - 1).isRowHeightSet)) {\n            //      this.row.grid.rows.getRow((currentRowIndex + span) - 1).cells.getCell(cellIndex).rowSpanRemainingHeight = this.row.cells.getCell(cellIndex).height - totalHeight;\n            //      totalHeight = this.row.cells.getCell(cellIndex).height;\n            //      bounds.height = totalHeight;\n            // } else {\n            bounds.height = totalHeight;\n            //  }\n            if (!this.row.rowMergeComplete) {\n                bounds.height = totalHeight;\n            }\n        }\n        return bounds;\n    };\n    /* tslint:enable */\n    /**\n     * Gets the `text font`.\n     * @private\n     */\n    PdfGridCell.prototype.getTextFont = function () {\n        if (typeof this.style.font !== 'undefined' && this.style.font != null) {\n            return this.style.font;\n        }\n        else if (typeof this.row.style.font !== 'undefined' && this.row.style.font != null) {\n            return this.row.style.font;\n        }\n        else if (typeof this.row.grid.style.font !== 'undefined' && this.row.grid.style.font != null) {\n            return this.row.grid.style.font;\n        }\n        else {\n            return PdfDocument.defaultFont;\n        }\n    };\n    /**\n     * Gets the `text brush`.\n     * @private\n     */\n    PdfGridCell.prototype.getTextBrush = function () {\n        if (typeof this.style.textBrush !== 'undefined' && this.style.textBrush != null) {\n            return this.style.textBrush;\n        }\n        else if (typeof this.row.style.textBrush !== 'undefined' && this.row.style.textBrush != null) {\n            return this.row.style.textBrush;\n        }\n        else {\n            return this.row.grid.style.textBrush;\n        }\n    };\n    /**\n     * Gets the `text pen`.\n     * @private\n     */\n    PdfGridCell.prototype.getTextPen = function () {\n        if (typeof this.style.textPen !== 'undefined' && this.style.textPen != null) {\n            return this.style.textPen;\n        }\n        else if (typeof this.row.style.textPen !== 'undefined' && this.row.style.textPen != null) {\n            return this.row.style.textPen;\n        }\n        else {\n            return this.row.grid.style.textPen;\n        }\n    };\n    /**\n     * Gets the `background brush`.\n     * @private\n     */\n    PdfGridCell.prototype.getBackgroundBrush = function () {\n        if (typeof this.style.backgroundBrush !== 'undefined' && this.style.backgroundBrush != null) {\n            return this.style.backgroundBrush;\n        }\n        else if (typeof this.row.style.backgroundBrush !== 'undefined' && this.row.style.backgroundBrush != null) {\n            return this.row.style.backgroundBrush;\n        }\n        else {\n            return this.row.grid.style.backgroundBrush;\n        }\n    };\n    /**\n     * Gets the `background image`.\n     * @private\n     */\n    PdfGridCell.prototype.getBackgroundImage = function () {\n        if (typeof this.style.backgroundImage !== 'undefined' && this.style.backgroundImage != null) {\n            return this.style.backgroundImage;\n        }\n        else if (typeof this.row.style.backgroundImage !== 'undefined' && this.row.style.backgroundImage != null) {\n            return this.row.style.backgroundImage;\n        }\n        else {\n            return this.row.grid.style.backgroundImage;\n        }\n    };\n    /**\n     * Gets the current `StringFormat`.\n     * @private\n     */\n    PdfGridCell.prototype.getStringFormat = function () {\n        if (typeof this.style.stringFormat !== 'undefined' && this.style.stringFormat != null) {\n            return this.style.stringFormat;\n        }\n        else {\n            return this.stringFormat;\n        }\n    };\n    /**\n     * Calculates the `height`.\n     * @private\n     */\n    PdfGridCell.prototype.measureHeight = function () {\n        // .. Calculate the cell text height.\n        // .....Add border widths, cell spacings and paddings to the height.\n        var width = this.calculateWidth();\n        // //check whether the Current PdfGridCell has padding\n        if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n            width -= (this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left);\n            //width -= (this.style.borders.left.width + this.style.borders.right.width);\n        }\n        else {\n            width -= (this.style.cellPadding.right + this.style.cellPadding.left);\n            width -= (this.style.borders.left.width + this.style.borders.right.width);\n        }\n        var height = 0;\n        var layouter = new PdfStringLayouter();\n        if (typeof this.objectValue === 'string' || typeof this.remaining === 'string') {\n            var currentValue = this.objectValue;\n            /* tslint:disable */\n            if (!this.isFinish)\n                currentValue = !(this.remaining === null || this.remaining === '' ||\n                    typeof this.remaining === 'undefined') ? this.remaining : this.objectValue;\n            var slr = null;\n            var cellIndex = this.row.cells.indexOf(this);\n            if (this.gridRow.grid.style.cellSpacing != 0) {\n                width -= this.gridRow.grid.style.cellSpacing * 2;\n            }\n            if (!this.row.cells.getCell(cellIndex).hasColSpan && !this.row.cells.getCell(cellIndex).hasRowSpan) {\n                if (this.gridRow.grid.isChildGrid) {\n                    if (width < 0) {\n                        this.tempval = width;\n                        if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n                            this.tempval += (this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left);\n                        }\n                        else {\n                            this.tempval += (this.style.cellPadding.right + this.style.cellPadding.left);\n                            this.tempval += (this.style.borders.left.width + this.style.borders.right.width);\n                        }\n                    }\n                    else {\n                        this.tempval = width;\n                    }\n                    slr = layouter.layout(currentValue, this.getTextFont(), this.stringFormat, new SizeF(this.tempval, 0), false, new SizeF(0, 0));\n                    height += slr.actualSize.height;\n                }\n                else {\n                    slr = layouter.layout(currentValue, this.getTextFont(), this.stringFormat, new SizeF(width, 0), false, new SizeF(0, 0));\n                    height += slr.actualSize.height;\n                }\n            }\n            /* tslint:enable */\n            height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n        }\n        else if (this.objectValue instanceof PdfGrid) {\n            var cellIndex = this.row.cells.indexOf(this);\n            var internalWidth = 0;\n            if ((this.style.cellPadding != null || typeof this.style.cellPadding !== 'undefined')) {\n                internalWidth = this.calculateWidth();\n                if (typeof this.style.cellPadding.left !== 'undefined' && this.style.cellPadding.hasLeftPad) {\n                    internalWidth -= this.style.cellPadding.left;\n                }\n                if (typeof this.style.cellPadding.right !== 'undefined' && this.style.cellPadding.hasRightPad) {\n                    internalWidth -= this.style.cellPadding.right;\n                }\n            }\n            else if ((this.row.grid.style.cellPadding != null || typeof this.row.grid.style.cellPadding !== 'undefined')) {\n                internalWidth = this.calculateWidth();\n                if (typeof this.row.grid.style.cellPadding.left !== 'undefined' && this.row.grid.style.cellPadding.hasLeftPad) {\n                    internalWidth -= this.row.grid.style.cellPadding.left;\n                }\n                if (typeof this.row.grid.style.cellPadding.right !== 'undefined' && this.row.grid.style.cellPadding.hasRightPad) {\n                    internalWidth -= this.row.grid.style.cellPadding.right;\n                }\n            }\n            else {\n                internalWidth = this.calculateWidth();\n            }\n            this.objectValue.tempWidth = internalWidth;\n            if (!this.row.cells.getCell(cellIndex).hasColSpan && !this.row.cells.getCell(cellIndex).hasRowSpan) {\n                height = this.objectValue.size.height;\n            }\n            else {\n                height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n            }\n            if (this.gridRow.grid.style.cellSpacing !== 0) {\n                width -= this.gridRow.grid.style.cellSpacing * 2;\n                //height += (this.row.grid.style.cellPadding.top + this.row.grid.style.cellPadding.bottom);\n            }\n            if (this.style.cellPadding != null || typeof this.style.cellPadding !== 'undefined') {\n                if (typeof this.row.grid.style.cellPadding.top !== 'undefined' && this.row.grid.style.cellPadding.hasTopPad) {\n                    height += this.row.grid.style.cellPadding.top;\n                }\n                if (this.row.grid.style.cellPadding.hasBottomPad && typeof this.row.grid.style.cellPadding.bottom !== 'undefined') {\n                    height += this.row.grid.style.cellPadding.bottom;\n                }\n            }\n            height += this.objectValue.style.cellSpacing;\n        }\n        else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {\n            height += this.objectValue.height;\n        }\n        else if (this.objectValue instanceof PdfTextWebLink) {\n            var webLink = this.objectValue;\n            /* tslint:disable */\n            var slr = layouter.layout(webLink.text, webLink.font, webLink.stringFormat, new SizeF(width, 0), false, new SizeF(0, 0));\n            /* tslint:enable */\n            height += slr.actualSize.height;\n            height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n        }\n        else if (typeof this.objectValue === 'undefined') {\n            if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n                width -= (this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left);\n            }\n            else {\n                width -= (this.style.cellPadding.right + this.style.cellPadding.left);\n                width -= (this.style.borders.left.width + this.style.borders.right.width);\n            }\n            height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n        }\n        //Add padding top and bottom value to height\n        if (!(this.objectValue instanceof PdfGrid)) {\n            if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n                height += (this.row.grid.style.cellPadding.top + this.row.grid.style.cellPadding.bottom);\n            }\n            else {\n                height += (this.style.cellPadding.top + this.style.cellPadding.bottom);\n            }\n        }\n        else {\n            if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n                if (typeof this.row.grid.style.cellPadding.top !== 'undefined' && this.row.grid.style.cellPadding.hasTopPad) {\n                    height += this.row.grid.style.cellPadding.top;\n                }\n                if (typeof this.row.grid.style.cellPadding.bottom !== 'undefined' && this.row.grid.style.cellPadding.hasBottomPad) {\n                    height += this.row.grid.style.cellPadding.bottom;\n                }\n            }\n            else {\n                if (typeof this.style.cellPadding.top !== 'undefined' && this.style.cellPadding.hasTopPad) {\n                    height += this.style.cellPadding.top;\n                }\n                if (typeof this.style.cellPadding.bottom !== 'undefined' && this.style.cellPadding.hasBottomPad) {\n                    height += this.style.cellPadding.bottom;\n                }\n            }\n        }\n        height += this.row.grid.style.cellSpacing;\n        return height;\n    };\n    /**\n     * return the calculated `width` of the cell.\n     * @private\n     */\n    PdfGridCell.prototype.calculateWidth = function () {\n        var cellIndex = this.row.cells.indexOf(this);\n        var rowindex = this.row.grid.rows.rowCollection.indexOf(this.row);\n        var columnSpan = this.columnSpan;\n        var width = 0;\n        if (columnSpan === 1) {\n            for (var i = 0; i < columnSpan; i++) {\n                width += this.row.grid.columns.getColumn(cellIndex + i).width;\n            }\n        }\n        else if (columnSpan > 1) {\n            for (var i = 0; i < columnSpan; i++) {\n                width += this.row.grid.columns.getColumn(cellIndex + i).width;\n                if ((i + 1) < columnSpan) {\n                    this.row.cells.getCell(cellIndex + i + 1).hasColSpan = true;\n                }\n            }\n        }\n        if (this.parent != null && this.parent.row.width > 0) {\n            if ((this.row.grid.isChildGrid) && this.parent != null && (this.row.width > this.parent.row.width)) {\n                width = 0;\n                for (var j = 0; j < this.parent.columnSpan; j++) {\n                    width += this.parent.row.grid.columns.getColumn(j).width;\n                }\n                width = width / this.row.cells.count;\n            }\n        }\n        return width;\n    };\n    return PdfGridCell;\n}());\nexport { PdfGridCell };\n/**\n * `PdfGridCellCollection` class provides access to an ordered,\n * strongly typed collection of 'PdfGridCell' objects.\n * @private\n */\nvar PdfGridCellCollection = /** @class */ (function () {\n    //Constructor\n    /**\n     * Initializes a new instance of the `PdfGridCellCollection` class with the row.\n     * @private\n     */\n    function PdfGridCellCollection(row) {\n        /**\n         * @hidden\n         * @private\n         */\n        this.cells = [];\n        this.gridRow = row;\n    }\n    //Properties\n    /**\n     * Gets the current `cell`.\n     * @private\n     */\n    PdfGridCellCollection.prototype.getCell = function (index) {\n        if (index < 0 || index >= this.count) {\n            throw new Error('IndexOutOfRangeException');\n        }\n        return this.cells[index];\n    };\n    Object.defineProperty(PdfGridCellCollection.prototype, \"count\", {\n        /**\n         * Gets the cells `count`.[Read-Only].\n         * @private\n         */\n        get: function () {\n            return this.cells.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfGridCellCollection.prototype.add = function (cell) {\n        if (typeof cell === 'undefined') {\n            var tempcell = new PdfGridCell();\n            this.add(tempcell);\n            return cell;\n        }\n        else {\n            cell.row = this.gridRow;\n            this.cells.push(cell);\n        }\n    };\n    /**\n     * Returns the `index of` a particular cell in the collection.\n     * @private\n     */\n    PdfGridCellCollection.prototype.indexOf = function (cell) {\n        return this.cells.indexOf(cell);\n    };\n    return PdfGridCellCollection;\n}());\nexport { PdfGridCellCollection };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}