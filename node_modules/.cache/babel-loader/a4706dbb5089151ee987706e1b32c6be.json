{"ast":null,"code":"import formatDecimal from \"./formatDecimal.js\";\nimport formatPrefixAuto from \"./formatPrefixAuto.js\";\nimport formatRounded from \"./formatRounded.js\";\nexport default {\n  \"%\": function _(x, p) {\n    return (x * 100).toFixed(p);\n  },\n  \"b\": function b(x) {\n    return Math.round(x).toString(2);\n  },\n  \"c\": function c(x) {\n    return x + \"\";\n  },\n  \"d\": formatDecimal,\n  \"e\": function e(x, p) {\n    return x.toExponential(p);\n  },\n  \"f\": function f(x, p) {\n    return x.toFixed(p);\n  },\n  \"g\": function g(x, p) {\n    return x.toPrecision(p);\n  },\n  \"o\": function o(x) {\n    return Math.round(x).toString(8);\n  },\n  \"p\": function p(x, _p) {\n    return formatRounded(x * 100, _p);\n  },\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": function X(x) {\n    return Math.round(x).toString(16).toUpperCase();\n  },\n  \"x\": function x(_x) {\n    return Math.round(_x).toString(16);\n  }\n};","map":{"version":3,"names":["formatDecimal","formatPrefixAuto","formatRounded","x","p","toFixed","Math","round","toString","toExponential","toPrecision","toUpperCase"],"sources":["D:/Theme/package/node_modules/d3-format/src/formatTypes.js"],"sourcesContent":["import formatDecimal from \"./formatDecimal.js\";\nimport formatPrefixAuto from \"./formatPrefixAuto.js\";\nimport formatRounded from \"./formatRounded.js\";\n\nexport default {\n  \"%\": function(x, p) { return (x * 100).toFixed(p); },\n  \"b\": function(x) { return Math.round(x).toString(2); },\n  \"c\": function(x) { return x + \"\"; },\n  \"d\": formatDecimal,\n  \"e\": function(x, p) { return x.toExponential(p); },\n  \"f\": function(x, p) { return x.toFixed(p); },\n  \"g\": function(x, p) { return x.toPrecision(p); },\n  \"o\": function(x) { return Math.round(x).toString(8); },\n  \"p\": function(x, p) { return formatRounded(x * 100, p); },\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\n  \"x\": function(x) { return Math.round(x).toString(16); }\n};\n"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,oBAA1B;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AAEA,eAAe;EACb,KAAK,WAASC,CAAT,EAAYC,CAAZ,EAAe;IAAE,OAAO,CAACD,CAAC,GAAG,GAAL,EAAUE,OAAV,CAAkBD,CAAlB,CAAP;EAA8B,CADvC;EAEb,KAAK,WAASD,CAAT,EAAY;IAAE,OAAOG,IAAI,CAACC,KAAL,CAAWJ,CAAX,EAAcK,QAAd,CAAuB,CAAvB,CAAP;EAAmC,CAFzC;EAGb,KAAK,WAASL,CAAT,EAAY;IAAE,OAAOA,CAAC,GAAG,EAAX;EAAgB,CAHtB;EAIb,KAAKH,aAJQ;EAKb,KAAK,WAASG,CAAT,EAAYC,CAAZ,EAAe;IAAE,OAAOD,CAAC,CAACM,aAAF,CAAgBL,CAAhB,CAAP;EAA4B,CALrC;EAMb,KAAK,WAASD,CAAT,EAAYC,CAAZ,EAAe;IAAE,OAAOD,CAAC,CAACE,OAAF,CAAUD,CAAV,CAAP;EAAsB,CAN/B;EAOb,KAAK,WAASD,CAAT,EAAYC,CAAZ,EAAe;IAAE,OAAOD,CAAC,CAACO,WAAF,CAAcN,CAAd,CAAP;EAA0B,CAPnC;EAQb,KAAK,WAASD,CAAT,EAAY;IAAE,OAAOG,IAAI,CAACC,KAAL,CAAWJ,CAAX,EAAcK,QAAd,CAAuB,CAAvB,CAAP;EAAmC,CARzC;EASb,KAAK,WAASL,CAAT,EAAYC,EAAZ,EAAe;IAAE,OAAOF,aAAa,CAACC,CAAC,GAAG,GAAL,EAAUC,EAAV,CAApB;EAAmC,CAT5C;EAUb,KAAKF,aAVQ;EAWb,KAAKD,gBAXQ;EAYb,KAAK,WAASE,CAAT,EAAY;IAAE,OAAOG,IAAI,CAACC,KAAL,CAAWJ,CAAX,EAAcK,QAAd,CAAuB,EAAvB,EAA2BG,WAA3B,EAAP;EAAkD,CAZxD;EAab,KAAK,WAASR,EAAT,EAAY;IAAE,OAAOG,IAAI,CAACC,KAAL,CAAWJ,EAAX,EAAcK,QAAd,CAAuB,EAAvB,CAAP;EAAoC;AAb1C,CAAf"},"metadata":{},"sourceType":"module"}