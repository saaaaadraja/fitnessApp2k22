{"ast":null,"code":"import { PdfGridCell } from './pdf-grid-cell';\nimport { PdfStringFormat } from './../../graphics/fonts/pdf-string-format';\n/**\n * `PdfGridColumn` class represents the schema of a column in a 'PdfGrid'.\n */\n\nvar PdfGridColumn =\n/** @class */\nfunction () {\n  //Constructors\n\n  /**\n   * Initializes a new instance of the `PdfGridColumn` class with the parent grid.\n   * @private\n   */\n  function PdfGridColumn(grid) {\n    /**\n     * The `width` of the column.\n     * @default 0\n     * @private\n     */\n    this.columnWidth = 0;\n    this.grid = grid;\n  }\n\n  Object.defineProperty(PdfGridColumn.prototype, \"width\", {\n    /**\n     * Gets or sets the `width` of the 'PdfGridColumn'.\n     * @private\n     */\n    get: function get() {\n      return this.columnWidth;\n    },\n    set: function set(value) {\n      this.isCustomWidth = true;\n      this.columnWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridColumn.prototype, \"format\", {\n    /**\n     * Gets or sets the information about the text `formatting`.\n     * @private\n     */\n    get: function get() {\n      if (this.stringFormat == null) {\n        this.stringFormat = new PdfStringFormat(); //GetDefaultFormat();\n      }\n\n      return this.stringFormat;\n    },\n    set: function set(value) {\n      this.stringFormat = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGridColumn;\n}();\n\nexport { PdfGridColumn };\n/**\n * `PdfGridColumnCollection` class provides access to an ordered,\n * strongly typed collection of 'PdfGridColumn' objects.\n * @private\n */\n\nvar PdfGridColumnCollection =\n/** @class */\nfunction () {\n  //properties\n  //Constructors\n\n  /**\n   * Initializes a new instance of the `PdfGridColumnCollection` class with the parent grid.\n   * @private\n   */\n  function PdfGridColumnCollection(grid) {\n    /**\n     * @hidden\n     * @private\n     */\n    this.internalColumns = [];\n    /**\n     * @hidden\n     * @private\n     */\n\n    this.columnWidth = 0;\n    this.grid = grid;\n    this.internalColumns = [];\n  } //Iplementation\n\n  /**\n   * `Add` a new column to the 'PdfGrid'.\n   * @private\n   */\n\n\n  PdfGridColumnCollection.prototype.add = function (count) {\n    // public add(column : PdfGridColumn) : void\n    // public add(arg : number|PdfGridColumn) : void {\n    // if (typeof arg === 'number') {\n    for (var i = 0; i < count; i++) {\n      this.internalColumns.push(new PdfGridColumn(this.grid));\n\n      for (var index = 0; index < this.grid.rows.count; index++) {\n        var row = this.grid.rows.getRow(index);\n        var cell = new PdfGridCell();\n        cell.value = '';\n        row.cells.add(cell);\n      }\n    } // } else {\n    //     let column : PdfGridColumn = new PdfGridColumn(this.grid);\n    //     this.columns.push(column);\n    //     return column;\n    // }\n\n  };\n\n  Object.defineProperty(PdfGridColumnCollection.prototype, \"count\", {\n    /**\n     * Gets the `number of columns` in the 'PdfGrid'.[Read-Only].\n     * @private\n     */\n    get: function get() {\n      return this.internalColumns.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridColumnCollection.prototype, \"width\", {\n    /**\n     * Gets the `widths`.\n     * @private\n     */\n    get: function get() {\n      if (this.columnWidth === 0) {\n        this.columnWidth = this.measureColumnsWidth();\n      }\n\n      if (this.grid.initialWidth !== 0 && this.columnWidth !== this.grid.initialWidth && !this.grid.style.allowHorizontalOverflow) {\n        this.columnWidth = this.grid.initialWidth;\n        this.grid.isPageWidth = true;\n      }\n\n      return this.columnWidth;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridColumnCollection.prototype, \"columns\", {\n    /**\n     * Gets the `array of PdfGridColumn`.[Read-Only]\n     * @private\n     */\n    get: function get() {\n      return this.internalColumns;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Gets the `PdfGridColumn` from the specified index.[Read-Only]\n   * @private\n   */\n\n  PdfGridColumnCollection.prototype.getColumn = function (index) {\n    if (index >= 0 && index <= this.columns.length) {\n      return this.columns[index];\n    } else {\n      throw Error('can not get the column from the index: ' + index);\n    }\n  }; //Implementation\n\n  /**\n   * `Calculates the column widths`.\n   * @private\n   */\n\n\n  PdfGridColumnCollection.prototype.measureColumnsWidth = function () {\n    var totalWidth = 0;\n    this.grid.measureColumnsWidth();\n\n    for (var i = 0, count = this.internalColumns.length; i < count; i++) {\n      totalWidth += this.internalColumns[i].width;\n    }\n\n    return totalWidth;\n  };\n  /**\n   * Gets the `widths of the columns`.\n   * @private\n   */\n\n\n  PdfGridColumnCollection.prototype.getDefaultWidths = function (totalWidth) {\n    var widths = [];\n    var summ = 0.0;\n    var subFactor = this.count;\n\n    for (var i = 0; i < this.count; i++) {\n      if (this.grid.isPageWidth && totalWidth >= 0 && !this.internalColumns[i].isCustomWidth) {\n        this.internalColumns[i].width = 0;\n      } else {\n        widths[i] = this.internalColumns[i].width;\n\n        if (this.internalColumns[i].width > 0 && this.internalColumns[i].isCustomWidth) {\n          totalWidth -= this.internalColumns[i].width;\n          subFactor--;\n        } else {\n          widths[i] = 0;\n        }\n      }\n    }\n\n    for (var i = 0; i < this.count; i++) {\n      var width = totalWidth / subFactor;\n\n      if (widths[i] <= 0) {\n        widths[i] = width;\n      }\n    }\n\n    return widths;\n  };\n\n  return PdfGridColumnCollection;\n}();\n\nexport { PdfGridColumnCollection };","map":{"version":3,"names":["PdfGridCell","PdfStringFormat","PdfGridColumn","grid","columnWidth","Object","defineProperty","prototype","get","set","value","isCustomWidth","enumerable","configurable","stringFormat","PdfGridColumnCollection","internalColumns","add","count","i","push","index","rows","row","getRow","cell","cells","length","measureColumnsWidth","initialWidth","style","allowHorizontalOverflow","isPageWidth","getColumn","columns","Error","totalWidth","width","getDefaultWidths","widths","summ","subFactor"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/pdf-grid-column.js"],"sourcesContent":["import { PdfGridCell } from './pdf-grid-cell';\nimport { PdfStringFormat } from './../../graphics/fonts/pdf-string-format';\n/**\n * `PdfGridColumn` class represents the schema of a column in a 'PdfGrid'.\n */\nvar PdfGridColumn = /** @class */ (function () {\n    //Constructors\n    /**\n     * Initializes a new instance of the `PdfGridColumn` class with the parent grid.\n     * @private\n     */\n    function PdfGridColumn(grid) {\n        /**\n         * The `width` of the column.\n         * @default 0\n         * @private\n         */\n        this.columnWidth = 0;\n        this.grid = grid;\n    }\n    Object.defineProperty(PdfGridColumn.prototype, \"width\", {\n        /**\n         * Gets or sets the `width` of the 'PdfGridColumn'.\n         * @private\n         */\n        get: function () {\n            return this.columnWidth;\n        },\n        set: function (value) {\n            this.isCustomWidth = true;\n            this.columnWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridColumn.prototype, \"format\", {\n        /**\n         * Gets or sets the information about the text `formatting`.\n         * @private\n         */\n        get: function () {\n            if (this.stringFormat == null) {\n                this.stringFormat = new PdfStringFormat(); //GetDefaultFormat();\n            }\n            return this.stringFormat;\n        },\n        set: function (value) {\n            this.stringFormat = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridColumn;\n}());\nexport { PdfGridColumn };\n/**\n * `PdfGridColumnCollection` class provides access to an ordered,\n * strongly typed collection of 'PdfGridColumn' objects.\n * @private\n */\nvar PdfGridColumnCollection = /** @class */ (function () {\n    //properties\n    //Constructors\n    /**\n     * Initializes a new instance of the `PdfGridColumnCollection` class with the parent grid.\n     * @private\n     */\n    function PdfGridColumnCollection(grid) {\n        /**\n         * @hidden\n         * @private\n         */\n        this.internalColumns = [];\n        /**\n         * @hidden\n         * @private\n         */\n        this.columnWidth = 0;\n        this.grid = grid;\n        this.internalColumns = [];\n    }\n    //Iplementation\n    /**\n     * `Add` a new column to the 'PdfGrid'.\n     * @private\n     */\n    PdfGridColumnCollection.prototype.add = function (count) {\n        // public add(column : PdfGridColumn) : void\n        // public add(arg : number|PdfGridColumn) : void {\n        // if (typeof arg === 'number') {\n        for (var i = 0; i < count; i++) {\n            this.internalColumns.push(new PdfGridColumn(this.grid));\n            for (var index = 0; index < this.grid.rows.count; index++) {\n                var row = this.grid.rows.getRow(index);\n                var cell = new PdfGridCell();\n                cell.value = '';\n                row.cells.add(cell);\n            }\n        }\n        // } else {\n        //     let column : PdfGridColumn = new PdfGridColumn(this.grid);\n        //     this.columns.push(column);\n        //     return column;\n        // }\n    };\n    Object.defineProperty(PdfGridColumnCollection.prototype, \"count\", {\n        /**\n         * Gets the `number of columns` in the 'PdfGrid'.[Read-Only].\n         * @private\n         */\n        get: function () {\n            return this.internalColumns.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridColumnCollection.prototype, \"width\", {\n        /**\n         * Gets the `widths`.\n         * @private\n         */\n        get: function () {\n            if (this.columnWidth === 0) {\n                this.columnWidth = this.measureColumnsWidth();\n            }\n            if (this.grid.initialWidth !== 0 && this.columnWidth !== this.grid.initialWidth && !this.grid.style.allowHorizontalOverflow) {\n                this.columnWidth = this.grid.initialWidth;\n                this.grid.isPageWidth = true;\n            }\n            return this.columnWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridColumnCollection.prototype, \"columns\", {\n        /**\n         * Gets the `array of PdfGridColumn`.[Read-Only]\n         * @private\n         */\n        get: function () {\n            return this.internalColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets the `PdfGridColumn` from the specified index.[Read-Only]\n     * @private\n     */\n    PdfGridColumnCollection.prototype.getColumn = function (index) {\n        if (index >= 0 && index <= this.columns.length) {\n            return this.columns[index];\n        }\n        else {\n            throw Error('can not get the column from the index: ' + index);\n        }\n    };\n    //Implementation\n    /**\n     * `Calculates the column widths`.\n     * @private\n     */\n    PdfGridColumnCollection.prototype.measureColumnsWidth = function () {\n        var totalWidth = 0;\n        this.grid.measureColumnsWidth();\n        for (var i = 0, count = this.internalColumns.length; i < count; i++) {\n            totalWidth += this.internalColumns[i].width;\n        }\n        return totalWidth;\n    };\n    /**\n     * Gets the `widths of the columns`.\n     * @private\n     */\n    PdfGridColumnCollection.prototype.getDefaultWidths = function (totalWidth) {\n        var widths = [];\n        var summ = 0.0;\n        var subFactor = this.count;\n        for (var i = 0; i < this.count; i++) {\n            if (this.grid.isPageWidth && totalWidth >= 0 && !this.internalColumns[i].isCustomWidth) {\n                this.internalColumns[i].width = 0;\n            }\n            else {\n                widths[i] = this.internalColumns[i].width;\n                if (this.internalColumns[i].width > 0 && this.internalColumns[i].isCustomWidth) {\n                    totalWidth -= this.internalColumns[i].width;\n                    subFactor--;\n                }\n                else {\n                    widths[i] = 0;\n                }\n            }\n        }\n        for (var i = 0; i < this.count; i++) {\n            var width = totalWidth / subFactor;\n            if (widths[i] <= 0) {\n                widths[i] = width;\n            }\n        }\n        return widths;\n    };\n    return PdfGridColumnCollection;\n}());\nexport { PdfGridColumnCollection };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}