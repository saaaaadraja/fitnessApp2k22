{"ast":null,"code":"/**\n *\n */\nimport { createElement, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { measureText } from '../../smithchart/utils/helper';\nimport { getTemplateFunction, convertElementFromLabel, PathOption } from '../../smithchart/utils/helper';\nimport { SmithchartLabelPosition } from '../../smithchart/utils/utils';\nimport { LabelOption } from '../../smithchart/utils/utils';\n/* tslint:disable:no-string-literal */\n\nvar DataLabel =\n/** @class */\nfunction () {\n  function DataLabel() {\n    this.textOptions = [];\n    this.labelOptions = [];\n    this.allPoints = [];\n  }\n\n  DataLabel.prototype.drawDataLabel = function (smithchart, seriesindex, groupElement, pointsRegion, bounds) {\n    this.textOptions = [];\n    this.allPoints = [];\n    var margin = smithchart.margin;\n    var pointIndex;\n    var marker = smithchart.series[seriesindex].marker;\n    var region;\n    var labelPosition;\n    var labelText;\n    var textSize;\n    var dataLabel = marker.dataLabel;\n    var font = dataLabel.textStyle;\n    var count = pointsRegion.length;\n\n    for (var i = 0; i < count; i++) {\n      labelText = smithchart.series[seriesindex].points[i].reactance.toString();\n      textSize = measureText(labelText, font);\n      region = pointsRegion[i]['point'];\n      var xPos = region.x - textSize.width / 2;\n      var yPos = region.y - (textSize.height + marker['height'] + margin.top);\n      var width = textSize.width + margin.left / 2 + margin.right / 2;\n      var height = textSize.height + margin.top / 2 + margin.bottom / 2;\n      pointIndex = i;\n      labelPosition = new SmithchartLabelPosition();\n      labelPosition = {\n        textX: xPos + margin.left / 2,\n        textY: yPos + height / 2 + margin.top / 2,\n        x: xPos,\n        y: yPos\n      };\n      this.textOptions[i] = {\n        id: smithchart.element.id + '_Series' + seriesindex + '_Points' + pointIndex + '_dataLabel' + '_displayText' + i,\n        x: labelPosition['textX'],\n        y: labelPosition['textY'],\n        fill: 'black',\n        text: labelText,\n        font: font,\n        xPosition: xPos,\n        yPosition: yPos,\n        width: width,\n        height: height,\n        location: region,\n        labelOptions: labelPosition,\n        visible: true,\n        connectorFlag: null\n      };\n    }\n\n    var labelOption = new LabelOption();\n    labelOption.textOptions = this.textOptions;\n    this.labelOptions.push(labelOption);\n    this.drawDatalabelSymbol(smithchart, seriesindex, dataLabel, groupElement, bounds, pointsRegion);\n  };\n\n  DataLabel.prototype.calculateSmartLabels = function (points, seriesIndex) {\n    var length = points['textOptions'].length;\n    var count = 0;\n\n    for (var k = 0; k < length; k++) {\n      this.allPoints[this.allPoints.length] = points['textOptions'][k];\n      this.connectorFlag = false;\n      this.compareDataLabels(k, points, count, seriesIndex);\n      this.labelOptions[seriesIndex]['textOptions'][k] = points['textOptions'][k];\n      this.labelOptions[seriesIndex]['textOptions'][k].connectorFlag = this.connectorFlag;\n    }\n  };\n\n  DataLabel.prototype.compareDataLabels = function (i, points, count, m) {\n    var length = this.allPoints.length;\n    var padding = 10;\n    var collide;\n    var currentLabel;\n    var prevLabel;\n\n    for (var j = 0; j < length; j++) {\n      prevLabel = this.allPoints[j];\n      currentLabel = this.allPoints[length - 1];\n      collide = this.isCollide(prevLabel, currentLabel);\n\n      if (collide) {\n        this.connectorFlag = true;\n\n        switch (count) {\n          case 0:\n            // Right\n            this.resetValues(currentLabel);\n            this.prevLabel = prevLabel;\n            currentLabel['xPosition'] = this.prevLabel['xPosition'] + (this.prevLabel['width'] / 2 + currentLabel['width'] / 2 + padding);\n            currentLabel['x'] = currentLabel['xPosition'] + padding / 2;\n            count += 1;\n            this.compareDataLabels(i, points, count, m);\n            break;\n\n          case 1:\n            // Right Bottom\n            this.resetValues(currentLabel);\n            currentLabel['xPosition'] = this.prevLabel['xPosition'] + this.prevLabel['width'] / 2 + currentLabel['width'] / 2 + padding;\n            currentLabel['x'] = currentLabel['xPosition'] + padding / 2;\n            currentLabel['yPosition'] = currentLabel['location'].y + currentLabel['height'] / 2 + padding / 2;\n            currentLabel['y'] = currentLabel['yPosition'] + currentLabel['height'] / 2 + padding / 2;\n            count += 1;\n            this.compareDataLabels(i, points, count, m);\n            break;\n\n          case 2:\n            // Bottom\n            this.resetValues(currentLabel);\n            currentLabel['yPosition'] = currentLabel['location'].y + currentLabel['height'] / 2 + padding / 2;\n            currentLabel['y'] = currentLabel['yPosition'] + currentLabel['height'] / 2 + padding / 2;\n            count += 1;\n            this.compareDataLabels(i, points, count, m);\n            break;\n\n          case 3:\n            // Left Bottom\n            this.resetValues(currentLabel);\n            currentLabel['xPosition'] = this.prevLabel['xPosition'] - this.prevLabel['width'] / 2 - currentLabel['width'] / 2 - padding;\n            currentLabel['x'] = currentLabel['xPosition'] + padding / 2;\n            currentLabel['yPosition'] = currentLabel['height'] / 2 + currentLabel['location'].y + padding / 2;\n            currentLabel['y'] = currentLabel['yPosition'] + currentLabel['height'] / 2 + padding / 2;\n            count += 1;\n            this.compareDataLabels(i, points, count, m);\n            break;\n\n          case 4:\n            // Left\n            this.resetValues(currentLabel);\n            currentLabel['xPosition'] = this.prevLabel['xPosition'] - this.prevLabel['width'] / 2 - currentLabel['width'] / 2 - padding;\n            currentLabel['x'] = currentLabel['xPosition'] + padding / 2;\n            count += 1;\n            this.compareDataLabels(i, points, count, m);\n            break;\n\n          case 5:\n            //Left Top\n            this.resetValues(currentLabel);\n            currentLabel['xPosition'] = this.prevLabel['xPosition'] - this.prevLabel['width'] / 2 - currentLabel['width'] / 2 - padding;\n            currentLabel['x'] = currentLabel['xPosition'] + padding / 2;\n            currentLabel['yPosition'] = this.prevLabel['yPosition'] - currentLabel['height'] - padding;\n            currentLabel['y'] = currentLabel['yPosition'] + currentLabel['height'] / 2 + padding / 2;\n            count += 1;\n            this.compareDataLabels(i, points, count, m);\n            break;\n\n          case 6:\n            // Top\n            this.resetValues(currentLabel);\n            currentLabel['yPosition'] = this.prevLabel['yPosition'] - (currentLabel['height'] + padding);\n            currentLabel['y'] = currentLabel['yPosition'] + currentLabel['height'] / 2 + padding / 2;\n            count += 1;\n            this.compareDataLabels(i, points, count, m);\n            break;\n\n          case 7:\n            // Right Top\n            this.resetValues(currentLabel);\n            currentLabel['xPosition'] = this.prevLabel['xPosition'] + this.prevLabel['width'] / 2 + currentLabel['width'] / 2 + padding;\n            currentLabel['x'] = currentLabel['xPosition'] + padding / 2;\n            currentLabel['yPosition'] = this.prevLabel['yPosition'] - currentLabel['height'] - padding;\n            currentLabel['y'] = currentLabel['yPosition'] + currentLabel['height'] / 2 + padding / 2;\n            count += 1;\n            this.compareDataLabels(i, points, count, m);\n            break;\n\n          case 8:\n            count = 0;\n            this.compareDataLabels(i, points, count, m);\n            break;\n        }\n      }\n    }\n  };\n\n  DataLabel.prototype.isCollide = function (dataLabel1, dataLabel2) {\n    var state = false;\n\n    if (dataLabel1 !== dataLabel2) {\n      state = !( // to compare data labels\n      dataLabel1['y'] + dataLabel1['height'] < dataLabel2['y'] || dataLabel1['y'] > dataLabel2['y'] + dataLabel2['height'] || dataLabel1['x'] + dataLabel1['width'] / 2 < dataLabel2['x'] - dataLabel2['width'] / 2 || dataLabel1['x'] - dataLabel1['width'] / 2 > dataLabel2['x'] + dataLabel2['width'] / 2);\n    }\n\n    return state;\n  };\n\n  DataLabel.prototype.resetValues = function (currentPoint) {\n    currentPoint['xPosition'] = currentPoint['labelOptions']['x'];\n    currentPoint['yPosition'] = currentPoint['labelOptions']['y'];\n    currentPoint['x'] = currentPoint['labelOptions']['textX'];\n    currentPoint['y'] = currentPoint['labelOptions']['textY'];\n  };\n\n  DataLabel.prototype.drawConnectorLines = function (smithchart, seriesIndex, index, currentPoint, groupElement) {\n    var xPos = currentPoint['xPosition'];\n    var yPos = currentPoint['yPosition'];\n    var location = currentPoint['location'];\n    var endY;\n\n    if (location.y > currentPoint['y']) {\n      endY = currentPoint['y'];\n    } else {\n      endY = currentPoint['y'] - currentPoint['height'] / 2; // bottom\n    }\n\n    var connectorDirection = 'M' + ' ' + location.x + ' ' + location.y + ' ' + 'L' + ' ' + currentPoint['x'] + ' ' + endY;\n    var connectorLineValues = smithchart.series[seriesIndex].marker.dataLabel.connectorLine;\n    var stroke = connectorLineValues.color ? connectorLineValues.color : smithchart.series[seriesIndex].fill || smithchart.seriesColors[seriesIndex % smithchart.seriesColors.length];\n    var options = new PathOption(smithchart.element.id + '_dataLabelConnectorLine' + '_series' + seriesIndex + '_point' + index, 'none', connectorLineValues.width, stroke, 1, 'none', connectorDirection);\n    var element = smithchart.renderer.drawPath(options);\n    groupElement.appendChild(element);\n  };\n\n  DataLabel.prototype.drawDatalabelSymbol = function (smithchart, seriesindex, dataLabel, groupElement, bounds, pointsRegion) {\n    for (var i = 0; i < smithchart.series[seriesindex].points.length; i++) {\n      if (dataLabel.template) {\n        var labelTemplateElement = createElement('div', {\n          id: smithchart.element.id + '_seriesIndex_' + seriesindex + '_Label_Template_Group',\n          className: 'template',\n          styles: 'position: absolute;'\n          /* 'top:' + bounds['x'] + 'px;' +\n           'left:' + bounds['y'] + 'px;' +\n           'height:' + smithchart.availableSize.height + 'px;' +\n           'width:' + smithchart.availableSize.width + 'px;'*/\n\n        });\n        document.getElementById(smithchart.element.id + '_Secondary_Element').appendChild(labelTemplateElement);\n        var templateFn = void 0;\n        var labelElement = void 0;\n        var id = dataLabel.template + '_seriesIndex' + seriesindex + '_pointIndex' + i + smithchart.element.id;\n        var data = {\n          point: smithchart.series[seriesindex].points[i].reactance\n        };\n        templateFn = getTemplateFunction(dataLabel.template);\n        var templateElement = templateFn(smithchart);\n        labelElement = convertElementFromLabel(templateElement, id, data, seriesindex, smithchart);\n        labelTemplateElement.appendChild(labelElement);\n        labelElement.style.left = pointsRegion[i].point.x - labelElement.offsetWidth / 2 + 'px';\n        labelElement.style.top = pointsRegion[i].point.y - labelElement.offsetHeight - smithchart.series[seriesindex].marker.height / 2 + 'px';\n        var blazorId = '_seriesIndex' + seriesindex + '_pointIndex' + i + smithchart.element.id;\n        updateBlazorTemplate(blazorId + 'Template', 'Template');\n        var left = parseInt(labelElement.style.left, 10);\n        var top_1 = parseInt(labelElement.style.top, 10);\n        var width = labelElement.offsetWidth;\n        var height = labelElement.offsetHeight;\n        var region = pointsRegion[i]['point'];\n        var labelPosition = {\n          textX: left,\n          textY: top_1,\n          x: left,\n          y: top_1\n        };\n        this.labelOptions[seriesindex]['textOptions'][i] = {\n          id: id,\n          x: left,\n          y: top_1,\n          fill: 'black',\n          text: '',\n          font: dataLabel.textStyle,\n          xPosition: left,\n          yPosition: top_1,\n          width: width,\n          height: height,\n          location: region,\n          labelOptions: labelPosition,\n          visible: true,\n          connectorFlag: null\n        };\n      }\n    }\n  };\n\n  return DataLabel;\n}();\n\nexport { DataLabel };","map":{"version":3,"names":["createElement","updateBlazorTemplate","measureText","getTemplateFunction","convertElementFromLabel","PathOption","SmithchartLabelPosition","LabelOption","DataLabel","textOptions","labelOptions","allPoints","prototype","drawDataLabel","smithchart","seriesindex","groupElement","pointsRegion","bounds","margin","pointIndex","marker","series","region","labelPosition","labelText","textSize","dataLabel","font","textStyle","count","length","i","points","reactance","toString","xPos","x","width","yPos","y","height","top","left","right","bottom","textX","textY","id","element","fill","text","xPosition","yPosition","location","visible","connectorFlag","labelOption","push","drawDatalabelSymbol","calculateSmartLabels","seriesIndex","k","compareDataLabels","m","padding","collide","currentLabel","prevLabel","j","isCollide","resetValues","dataLabel1","dataLabel2","state","currentPoint","drawConnectorLines","index","endY","connectorDirection","connectorLineValues","connectorLine","stroke","color","seriesColors","options","renderer","drawPath","appendChild","template","labelTemplateElement","className","styles","document","getElementById","templateFn","labelElement","data","point","templateElement","style","offsetWidth","offsetHeight","blazorId","parseInt","top_1"],"sources":["D:/Theme/package/node_modules/@syncfusion/ej2-charts/src/smithchart/series/datalabel.js"],"sourcesContent":["/**\n *\n */\nimport { createElement, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { measureText } from '../../smithchart/utils/helper';\nimport { getTemplateFunction, convertElementFromLabel, PathOption } from '../../smithchart/utils/helper';\nimport { SmithchartLabelPosition } from '../../smithchart/utils/utils';\nimport { LabelOption } from '../../smithchart/utils/utils';\n/* tslint:disable:no-string-literal */\nvar DataLabel = /** @class */ (function () {\n    function DataLabel() {\n        this.textOptions = [];\n        this.labelOptions = [];\n        this.allPoints = [];\n    }\n    DataLabel.prototype.drawDataLabel = function (smithchart, seriesindex, groupElement, pointsRegion, bounds) {\n        this.textOptions = [];\n        this.allPoints = [];\n        var margin = smithchart.margin;\n        var pointIndex;\n        var marker = smithchart.series[seriesindex].marker;\n        var region;\n        var labelPosition;\n        var labelText;\n        var textSize;\n        var dataLabel = marker.dataLabel;\n        var font = dataLabel.textStyle;\n        var count = pointsRegion.length;\n        for (var i = 0; i < count; i++) {\n            labelText = smithchart.series[seriesindex].points[i].reactance.toString();\n            textSize = measureText(labelText, font);\n            region = pointsRegion[i]['point'];\n            var xPos = region.x - textSize.width / 2;\n            var yPos = region.y - (textSize.height + marker['height'] + (margin.top));\n            var width = textSize.width + (margin.left / 2) + (margin.right / 2);\n            var height = textSize.height + (margin.top / 2) + (margin.bottom / 2);\n            pointIndex = i;\n            labelPosition = new SmithchartLabelPosition();\n            labelPosition = { textX: xPos + (margin.left / 2), textY: yPos + (height / 2) + margin.top / 2, x: xPos, y: yPos };\n            this.textOptions[i] = {\n                id: smithchart.element.id + '_Series' + seriesindex + '_Points' + pointIndex + '_dataLabel' + '_displayText' + i,\n                x: labelPosition['textX'],\n                y: labelPosition['textY'],\n                fill: 'black',\n                text: labelText,\n                font: font,\n                xPosition: xPos,\n                yPosition: yPos,\n                width: width,\n                height: height,\n                location: region,\n                labelOptions: labelPosition,\n                visible: true,\n                connectorFlag: null\n            };\n        }\n        var labelOption = new LabelOption();\n        labelOption.textOptions = this.textOptions;\n        this.labelOptions.push(labelOption);\n        this.drawDatalabelSymbol(smithchart, seriesindex, dataLabel, groupElement, bounds, pointsRegion);\n    };\n    DataLabel.prototype.calculateSmartLabels = function (points, seriesIndex) {\n        var length = points['textOptions'].length;\n        var count = 0;\n        for (var k = 0; k < length; k++) {\n            this.allPoints[this.allPoints.length] = points['textOptions'][k];\n            this.connectorFlag = false;\n            this.compareDataLabels(k, points, count, seriesIndex);\n            this.labelOptions[seriesIndex]['textOptions'][k] = points['textOptions'][k];\n            this.labelOptions[seriesIndex]['textOptions'][k].connectorFlag = this.connectorFlag;\n        }\n    };\n    DataLabel.prototype.compareDataLabels = function (i, points, count, m) {\n        var length = this.allPoints.length;\n        var padding = 10;\n        var collide;\n        var currentLabel;\n        var prevLabel;\n        for (var j = 0; j < length; j++) {\n            prevLabel = this.allPoints[j];\n            currentLabel = this.allPoints[length - 1];\n            collide = this.isCollide(prevLabel, currentLabel);\n            if (collide) {\n                this.connectorFlag = true;\n                switch (count) {\n                    case 0:\n                        // Right\n                        this.resetValues(currentLabel);\n                        this.prevLabel = prevLabel;\n                        currentLabel['xPosition'] = this.prevLabel['xPosition'] + (this.prevLabel['width'] / 2 +\n                            currentLabel['width'] / 2 + padding);\n                        currentLabel['x'] = currentLabel['xPosition'] + padding / 2;\n                        count += 1;\n                        this.compareDataLabels(i, points, count, m);\n                        break;\n                    case 1:\n                        // Right Bottom\n                        this.resetValues(currentLabel);\n                        currentLabel['xPosition'] = this.prevLabel['xPosition'] + this.prevLabel['width'] / 2 +\n                            currentLabel['width'] / 2 + padding;\n                        currentLabel['x'] = currentLabel['xPosition'] + padding / 2;\n                        currentLabel['yPosition'] = currentLabel['location'].y + currentLabel['height'] / 2 + padding / 2;\n                        currentLabel['y'] = currentLabel['yPosition'] + ((currentLabel['height'] / 2)) + padding / 2;\n                        count += 1;\n                        this.compareDataLabels(i, points, count, m);\n                        break;\n                    case 2:\n                        // Bottom\n                        this.resetValues(currentLabel);\n                        currentLabel['yPosition'] = currentLabel['location'].y + currentLabel['height'] / 2 + padding / 2;\n                        currentLabel['y'] = currentLabel['yPosition'] + (currentLabel['height'] / 2) + padding / 2;\n                        count += 1;\n                        this.compareDataLabels(i, points, count, m);\n                        break;\n                    case 3:\n                        // Left Bottom\n                        this.resetValues(currentLabel);\n                        currentLabel['xPosition'] = this.prevLabel['xPosition'] - this.prevLabel['width'] / 2\n                            - currentLabel['width'] / 2 - padding;\n                        currentLabel['x'] = currentLabel['xPosition'] + padding / 2;\n                        currentLabel['yPosition'] = currentLabel['height'] / 2 + currentLabel['location'].y + padding / 2;\n                        currentLabel['y'] = currentLabel['yPosition'] + ((currentLabel['height'] / 2)) + padding / 2;\n                        count += 1;\n                        this.compareDataLabels(i, points, count, m);\n                        break;\n                    case 4:\n                        // Left\n                        this.resetValues(currentLabel);\n                        currentLabel['xPosition'] = (this.prevLabel['xPosition'] - this.prevLabel['width'] / 2 -\n                            currentLabel['width'] / 2 - padding);\n                        currentLabel['x'] = currentLabel['xPosition'] + padding / 2;\n                        count += 1;\n                        this.compareDataLabels(i, points, count, m);\n                        break;\n                    case 5:\n                        //Left Top\n                        this.resetValues(currentLabel);\n                        currentLabel['xPosition'] = this.prevLabel['xPosition'] - this.prevLabel['width'] / 2 -\n                            currentLabel['width'] / 2 - padding;\n                        currentLabel['x'] = currentLabel['xPosition'] + padding / 2;\n                        currentLabel['yPosition'] = this.prevLabel['yPosition'] - currentLabel['height'] - padding;\n                        currentLabel['y'] = currentLabel['yPosition'] + currentLabel['height'] / 2 + padding / 2;\n                        count += 1;\n                        this.compareDataLabels(i, points, count, m);\n                        break;\n                    case 6:\n                        // Top\n                        this.resetValues(currentLabel);\n                        currentLabel['yPosition'] = (this.prevLabel['yPosition']) - (currentLabel['height'] + padding);\n                        currentLabel['y'] = currentLabel['yPosition'] + (currentLabel['height'] / 2) + padding / 2;\n                        count += 1;\n                        this.compareDataLabels(i, points, count, m);\n                        break;\n                    case 7:\n                        // Right Top\n                        this.resetValues(currentLabel);\n                        currentLabel['xPosition'] = this.prevLabel['xPosition'] + this.prevLabel['width'] / 2 +\n                            currentLabel['width'] / 2 + padding;\n                        currentLabel['x'] = currentLabel['xPosition'] + padding / 2;\n                        currentLabel['yPosition'] = this.prevLabel['yPosition'] - currentLabel['height'] - padding;\n                        currentLabel['y'] = currentLabel['yPosition'] + (currentLabel['height'] / 2) + padding / 2;\n                        count += 1;\n                        this.compareDataLabels(i, points, count, m);\n                        break;\n                    case 8:\n                        count = 0;\n                        this.compareDataLabels(i, points, count, m);\n                        break;\n                }\n            }\n        }\n    };\n    DataLabel.prototype.isCollide = function (dataLabel1, dataLabel2) {\n        var state = false;\n        if (dataLabel1 !== dataLabel2) {\n            state = !( // to compare data labels\n            ((dataLabel1['y'] + dataLabel1['height']) < (dataLabel2['y'])) ||\n                (dataLabel1['y'] > (dataLabel2['y'] + dataLabel2['height'])) ||\n                ((dataLabel1['x'] + dataLabel1['width'] / 2) < dataLabel2['x'] - dataLabel2['width'] / 2) ||\n                (dataLabel1['x'] - dataLabel1['width'] / 2 > (dataLabel2['x'] + dataLabel2['width'] / 2)));\n        }\n        return state;\n    };\n    DataLabel.prototype.resetValues = function (currentPoint) {\n        currentPoint['xPosition'] = currentPoint['labelOptions']['x'];\n        currentPoint['yPosition'] = currentPoint['labelOptions']['y'];\n        currentPoint['x'] = currentPoint['labelOptions']['textX'];\n        currentPoint['y'] = currentPoint['labelOptions']['textY'];\n    };\n    DataLabel.prototype.drawConnectorLines = function (smithchart, seriesIndex, index, currentPoint, groupElement) {\n        var xPos = currentPoint['xPosition'];\n        var yPos = currentPoint['yPosition'];\n        var location = currentPoint['location'];\n        var endY;\n        if (location.y > currentPoint['y']) {\n            endY = (currentPoint['y']);\n        }\n        else {\n            endY = (currentPoint['y'] - currentPoint['height'] / 2); // bottom\n        }\n        var connectorDirection = 'M' + ' ' + (location.x) + ' ' + (location.y) + ' ' + 'L' + ' ' +\n            (currentPoint['x']) + ' ' + (endY);\n        var connectorLineValues = smithchart.series[seriesIndex].marker.dataLabel.connectorLine;\n        var stroke = connectorLineValues.color ? connectorLineValues.color :\n            (smithchart.series[seriesIndex].fill ||\n                smithchart.seriesColors[seriesIndex % smithchart.seriesColors.length]);\n        var options = new PathOption(smithchart.element.id + '_dataLabelConnectorLine' + '_series' + seriesIndex + '_point' + index, 'none', connectorLineValues.width, stroke, 1, 'none', connectorDirection);\n        var element = smithchart.renderer.drawPath(options);\n        groupElement.appendChild(element);\n    };\n    DataLabel.prototype.drawDatalabelSymbol = function (smithchart, seriesindex, dataLabel, groupElement, bounds, pointsRegion) {\n        for (var i = 0; i < smithchart.series[seriesindex].points.length; i++) {\n            if (dataLabel.template) {\n                var labelTemplateElement = createElement('div', {\n                    id: smithchart.element.id + '_seriesIndex_' + seriesindex + '_Label_Template_Group',\n                    className: 'template',\n                    styles: 'position: absolute;'\n                    /* 'top:' + bounds['x'] + 'px;' +\n                     'left:' + bounds['y'] + 'px;' +\n                     'height:' + smithchart.availableSize.height + 'px;' +\n                     'width:' + smithchart.availableSize.width + 'px;'*/\n                });\n                document.getElementById(smithchart.element.id + '_Secondary_Element').appendChild(labelTemplateElement);\n                var templateFn = void 0;\n                var labelElement = void 0;\n                var id = dataLabel.template + '_seriesIndex' + seriesindex + '_pointIndex' + i + smithchart.element.id;\n                var data = { point: smithchart.series[seriesindex].points[i].reactance };\n                templateFn = getTemplateFunction(dataLabel.template);\n                var templateElement = templateFn(smithchart);\n                labelElement = convertElementFromLabel(templateElement, id, data, seriesindex, smithchart);\n                labelTemplateElement.appendChild(labelElement);\n                labelElement.style.left = pointsRegion[i].point.x - labelElement.offsetWidth / 2 + 'px';\n                labelElement.style.top = pointsRegion[i].point.y - labelElement.offsetHeight -\n                    smithchart.series[seriesindex].marker.height / 2 + 'px';\n                var blazorId = '_seriesIndex' + seriesindex + '_pointIndex' + i + smithchart.element.id;\n                updateBlazorTemplate(blazorId + 'Template', 'Template');\n                var left = parseInt(labelElement.style.left, 10);\n                var top_1 = parseInt(labelElement.style.top, 10);\n                var width = labelElement.offsetWidth;\n                var height = labelElement.offsetHeight;\n                var region = pointsRegion[i]['point'];\n                var labelPosition = { textX: left, textY: top_1,\n                    x: left, y: top_1 };\n                this.labelOptions[seriesindex]['textOptions'][i] = {\n                    id: id,\n                    x: left,\n                    y: top_1,\n                    fill: 'black',\n                    text: '',\n                    font: dataLabel.textStyle,\n                    xPosition: left,\n                    yPosition: top_1,\n                    width: width,\n                    height: height,\n                    location: region,\n                    labelOptions: labelPosition,\n                    visible: true,\n                    connectorFlag: null\n                };\n            }\n        }\n    };\n    return DataLabel;\n}());\nexport { DataLabel };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}